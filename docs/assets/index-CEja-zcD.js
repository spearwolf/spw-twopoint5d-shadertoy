var LS=Object.defineProperty;var zm=s=>{throw TypeError(s)};var US=(s,e,t)=>e in s?LS(s,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):s[e]=t;var It=(s,e,t)=>US(s,typeof e!="symbol"?e+"":e,t),km=(s,e,t)=>e.has(s)||zm("Cannot "+t);var ee=(s,e,t)=>(km(s,e,"read from private field"),t?t.call(s):e.get(s)),nt=(s,e,t)=>e.has(s)?zm("Cannot add the same private member more than once"):e instanceof WeakSet?e.add(s):e.set(s,t),Me=(s,e,t,n)=>(km(s,e,"write to private field"),n?n.call(s,t):e.set(s,t),t);var Hm=(s,e,t,n)=>({set _(i){Me(s,e,i,t)},get _(){return ee(s,e,n)}});(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))n(i);new MutationObserver(i=>{for(const r of i)if(r.type==="childList")for(const o of r.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&n(o)}).observe(document,{childList:!0,subtree:!0});function t(i){const r={};return i.integrity&&(r.integrity=i.integrity),i.referrerPolicy&&(r.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?r.credentials="include":i.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function n(i){if(i.ep)return;i.ep=!0;const r=t(i);fetch(i.href,r)}})();/*!
=============================================================================
@spearwolf/eventize 4.0.1+build.20240804
â€” https://github.com/spearwolf/eventize.git
=============================================================================

Copyright 2015-2024 Wolfger Schramm

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/var _o="*",sx=1,Cf=2,Pf=4,Nr=Symbol.for("eventize"),IS="[eventize]",Ou=s=>s===_o,rx=s=>{switch(typeof s){case"string":case"symbol":return!0;default:return!1}},ox=typeof console<"u",FS=ox?console[console.warn?"warn":"log"].bind(console,IS):()=>{},BS=(s,e,t)=>(Object.defineProperty(s,e,{value:t,configurable:!0}),s),OS=0,ax=class{constructor(){It(this,"events",new Map);It(this,"eventNames",new Set)}static publish(s){s.sort((e,t)=>e.order-t.order).forEach(e=>e.emit())}add(s){Array.isArray(s)?s.forEach(e=>this.eventNames.add(e)):this.eventNames.add(s)}remove(s){Array.isArray(s)?s.forEach(e=>this.eventNames.delete(e)):this.eventNames.delete(s),this.clear(s)}clear(s){Array.isArray(s)?s.forEach(e=>this.events.delete(e)):this.events.delete(s)}retain(s,e){this.eventNames.has(s)&&this.events.set(s,{args:e,order:OS++})}isKnown(s){return this.eventNames.has(s)}emit(s,e,t=[]){if(Ou(s))this.eventNames.forEach(n=>this.emit(n,e,t));else if(this.events.has(s)){const{order:n,args:i}=this.events.get(s);t.push({order:n,emit:()=>e.apply(s,i)})}return t}},tf=(s,e,t,n)=>{if(typeof e=="function"){const i=e.apply(s,t);i!=null&&(n==null||n(i))}},VS=(s,e,t,n)=>tf(e,e.emit,[s].concat(t),n),GS=s=>{switch(typeof s){case"function":return sx;case"string":case"symbol":return Cf;case"object":return Pf}},zS=0,kS=()=>++zS,cx=class{constructor(s,e,t,n=null){It(this,"id");It(this,"eventName");It(this,"isCatchEmAll");It(this,"priority");It(this,"listener");It(this,"listenerObject");It(this,"listenerType");It(this,"callAfterApply");It(this,"isRemoved");It(this,"refCount");this.id=kS(),this.eventName=s,this.isCatchEmAll=Ou(s),this.listener=t,this.listenerObject=n,this.priority=e,this.listenerType=GS(t),this.callAfterApply=void 0,this.isRemoved=!1,this.refCount=1}isEqual(s,e=null){if(s===this)return!0;const t=typeof s;return t==="number"&&s===this.id?!0:e===null&&(t==="string"||t==="symbol")?s===_o||s===this.eventName:this.listener===s&&this.listenerObject===e}apply(s,e,t){if(this.isRemoved)return;const{listener:n,listenerObject:i}=this;switch(this.listenerType){case sx:tf(i,n,e,t),this.callAfterApply&&this.callAfterApply();break;case Cf:tf(i,i[n],e,t),this.callAfterApply&&this.callAfterApply();break;case Pf:{const r=n[s];if(this.isCatchEmAll||this.eventName===s){if(typeof r=="function"){const o=r.apply(n,e);o!=null&&(t==null||t(o))}else VS(s,n,e,t);this.callAfterApply&&this.callAfterApply()}break}}}},HS=(s,e)=>s.priority!==e.priority?e.priority-s.priority:s.id-e.id,Wm=s=>s==null?void 0:s.slice(0),$m=(s,e)=>{const t=s.indexOf(e);t>-1&&s.splice(t,1)},WS=s=>s===Pf||s===Cf,nf=(s,e,t)=>{const n=s.findIndex(i=>i.isEqual(e,t));n>-1&&(s[n].isRemoved=!0,s.splice(n,1))},zl=(s,e,t)=>{const n=[];for(const i of s)(e==null&&i.listenerObject===t||i.eventName===e&&i.listener===t)&&n.push(i);for(const i of n)nf(s,i,void 0)},kh=s=>{s&&(s.forEach(e=>{e.isRemoved=!0}),s.length=0)},$S=(s,e)=>s.listenerType===e.listenerType?s.priority===e.priority&&s.eventName===e.eventName&&s.listenerObject===e.listenerObject&&s.listener===e.listener:!1,XS=(s,e)=>{if(WS(s.listenerType))return e.find(t=>$S(s,t))},qS=(s,e)=>{const t=XS(s,e);return t?(t.refCount+=1,t):(e.push(s),e.sort(HS),s)},YS=class{constructor(){It(this,"namedListeners");It(this,"catchEmAllListeners");It(this,"getListenersForEventName",s=>{let e=this.namedListeners.get(s);return e||(e=[],this.namedListeners.set(s,e)),e});this.namedListeners=new Map,this.catchEmAllListeners=[]}add(s){return qS(s,s.isCatchEmAll?this.catchEmAllListeners:this.getListenersForEventName(s.eventName))}remove(s,e,t=!1){e==null&&Array.isArray(s)?s.forEach(n=>this.remove(n,null,t)):s==null||e==null&&Ou(s)?this.removeAllListeners():e==null&&rx(s)?kh(this.namedListeners.get(s)):s instanceof cx?s.isRemoved||(s.refCount-=1,s.refCount<1&&(s.isRemoved=!0,this.namedListeners.forEach(n=>$m(n,s)),$m(this.catchEmAllListeners,s))):t?Ou(s)?zl(this.catchEmAllListeners,_o,s):this.namedListeners.forEach(n=>zl(n,s,e)):(this.namedListeners.forEach(n=>{nf(n,s,e),zl(n,void 0,s)}),nf(this.catchEmAllListeners,s,e),zl(this.catchEmAllListeners,void 0,s))}removeAllListeners(){this.namedListeners.forEach(s=>kh(s)),this.namedListeners.clear(),kh(this.catchEmAllListeners)}forEach(s,e){const t=Wm(this.catchEmAllListeners),n=Wm(this.namedListeners.get(s));if(s===_o||!n||n.length===0)t.forEach(e);else if(t.length===0)n.forEach(e);else{const i=n.length,r=t.length;let o=0,a=0;for(;o<i||a<r;){if(o<i){const c=n[o];if(a>=r||c.priority>=t[a].priority){e(c),++o;continue}}a<r&&(e(t[a]),++a)}}}getSubscriptionCount(){let s=this.catchEmAllListeners.length;for(const e of this.namedListeners.values())s+=e.length;return s}},ec=s=>!!(s&&s[Nr]);function Oc(s){if(ec(s))return s;const e=new YS,t=new ax;return BS(s,Nr,{keeper:t,store:e}),s}var lx={Max:Number.POSITIVE_INFINITY,AAA:1e9,BB:1e6,C:1e3,Default:0,Low:-1e4,Min:Number.NEGATIVE_INFINITY},jS=(s,e,t,n,i,r,o)=>{const a=s.add(new cx(t,n,i,r));return e.emit(t,a,o),a},KS=(s,e,t,n)=>{const i=t.length,r=typeof t[0];let o,a,c,l;if(i>=2&&i<=3&&r==="number"?(o=_o,[a,c,l]=t):i>=3&&i<=4&&typeof t[1]=="number"?[o,a,c,l]=t:(a=lx.Default,r==="string"||r==="symbol"||Array.isArray(t[0])?[o,c,l]=t:(o=_o,[c,l]=t)),!c&&ox)throw FS("called with insufficient arguments!",t),"subscribeTo() called with insufficient arguments!";const u=h=>d=>jS(s,e,d,h,c,l,n);return Array.isArray(o)?o.map(h=>Array.isArray(h)?u(h[1])(h[0]):u(a)(h)):u(a)(o)},ux=(s,e,t)=>{const n=[],i=KS(s,e,t,n);return ax.publish(n),i},Xm=s=>e=>{e.callAfterApply=()=>{s==null||s()}},hx=(s,e)=>Object.assign(()=>Df(s,e),Array.isArray(e)?{listeners:e}:{listener:e}),dx=(s,e,t,n)=>{const{store:i,keeper:r}=s[Nr];Array.isArray(e)?e.forEach(o=>{i.forEach(o,a=>a.apply(o,t,n)),r.retain(o,t)}):e!==_o&&(i.forEach(e,o=>{o.apply(e,t,n)}),r.retain(e,t))},xo=(s,...e)=>{const t=Oc(s),{store:n,keeper:i}=t[Nr];return hx(t,ux(n,i,e))},sh=(s,...e)=>{const t=Oc(s),{store:n,keeper:i}=t[Nr],r=ux(n,i,e),o=hx(t,r);let a=!1;const c=()=>{a||(o(),a=!0)};return Array.isArray(r)?r.forEach(Xm(c)):Xm(c)(r),c},ZS=(s,e)=>new Promise(t=>{sh(s,e,t)}),Df=(s,e,t)=>{if(!ec(s))throw new Error("object is not eventized");const{store:n,keeper:i}=s[Nr],r=typeof e,o=t!=null&&(r==="string"||r==="symbol");n.remove(e,t,o),Array.isArray(e)?i.remove(e.filter(a=>typeof a=="string")):rx(e)&&i.remove(e)},Di=(s,e,...t)=>{if(!ec(s))throw new Error("object is not eventized");dx(s,e,t)},QS=(s,e,...t)=>{if(!ec(s))throw new Error("object is not eventized");let n=[];return dx(s,e,t,i=>{n.push(i)}),n=n.map(i=>Array.isArray(i)?Promise.all(i):Promise.resolve(i)),n.length>0?Promise.all(n):Promise.resolve()},Lf=(s,e)=>{const t=Oc(s),{keeper:n}=t[Nr];n.add(e)},fx=(s,e)=>{if(!ec(s))throw new Error("object is not eventized");const{keeper:t}=s[Nr];t.clear(e)},Uf=(()=>{const s=(e={})=>Oc(e);return s.inject=(e={})=>(e=Oc(e),Object.assign(e,{on:(...t)=>xo(e,...t),once:(...t)=>sh(e,...t),onceAsync:t=>ZS(e,t),off:(t,n)=>Df(e,t,n),emit:(t,...n)=>Di(e,t,...n),emitAsync:(t,...n)=>QS(e,t,...n),retain:t=>Lf(e,t),retainClear:t=>fx(e,t)}),e),s.is=ec,s})();const px=Math.round(Math.random()*(1<<24)).toString(16),JS=`display3--${px}`;let Hh=null;const qm=new Map;class la{static getGlobalSheet(e=document.head){if(Hh===null){const t=document.createElement("style");t.setAttribute("id",JS),e.appendChild(t),Hh=t.sheet}return Hh}static installRule(e,t,n=document.head){const i=la.getGlobalSheet(n),r=`${e}-${px}`,o=`.${r}`;let a=i.cssRules.length;if(qm.has(e)){const c=qm.get(e);if(c.css===t)return r;a=c.index}return i.insertRule(`${o} {${t}}`,a),r}static addRule(e,t,n,i=document.head){const r=la.installRule(t,n,i);return e.classList.add(r),r}}const Ym=s=>typeof s=="number"&&!isNaN(s)?s:performance.now()/1e3;var pa,fr,ma,to,ns,is;class eb{constructor(e){nt(this,pa);nt(this,fr);nt(this,ma);nt(this,to);nt(this,ns);nt(this,is);const t=Ym(e);Me(this,pa,t),Me(this,fr,t),Me(this,ma,0),Me(this,to,0),Me(this,ns,0),Me(this,is,!0)}get time(){return ee(this,fr)-ee(this,pa)-ee(this,to)-ee(this,ns)}get deltaTime(){return ee(this,ma)}get timeStart(){return ee(this,pa)}get lostTime(){return ee(this,to)+ee(this,ns)}get isRunning(){return ee(this,is)}update(e){const t=ee(this,fr);Me(this,fr,Ym(e));const n=ee(this,fr)-t;ee(this,is)?Me(this,ma,n):Me(this,ns,ee(this,ns)+n)}stop(){ee(this,is)&&(Me(this,is,!1),Me(this,ns,0))}start(){ee(this,is)||(Me(this,is,!0),Me(this,to,ee(this,to)+ee(this,ns)),Me(this,ns,0))}}pa=new WeakMap,fr=new WeakMap,ma=new WeakMap,to=new WeakMap,ns=new WeakMap,is=new WeakMap;/**
 * @license
 * Copyright 2010-2024 Three.js Authors
 * SPDX-License-Identifier: MIT
 */const yl="172",ua={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2},na={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},mx=0,sf=1,gx=2,tb=0,If=1,nb=2,_i=3,Ki=0,Wt=1,Bn=2,Si=0,Ui=1,wa=2,Na=3,Ca=4,Ff=5,vi=100,Bf=101,Of=102,_x=103,xx=104,Vf=200,Gf=201,zf=202,kf=203,Vc=204,Gc=205,Hf=206,Wf=207,$f=208,Xf=209,qf=210,ib=211,sb=212,rb=213,ob=214,zc=0,kc=1,Hc=2,br=3,Wc=4,$c=5,Xc=6,qc=7,vl=0,yx=1,vx=2,ri=0,Tx=1,Sx=2,bx=3,Mx=4,ab=5,Ex=6,Yf=7,jf=300,Fi=301,Bi=302,Mr=303,Er=304,yo=306,vo=1e3,cs=1001,To=1002,zt=1003,Vu=1004,ls=1005,yn=1006,ha=1007,ti=1008,cb=1008,Gn=1009,lo=1010,uo=1011,Yi=1012,Mn=1013,Yt=1014,rn=1015,zn=1016,rh=1017,oh=1018,ms=1020,ah=35902,Kf=1021,Tl=1022,Nn=1023,Zf=1024,Qf=1025,hs=1026,gs=1027,Sl=1028,tc=1029,So=1030,nc=1031,lb=1032,ic=1033,ho=33776,yr=33777,vr=33778,Tr=33779,Yc=35840,jc=35841,Kc=35842,Zc=35843,Qc=36196,Pa=37492,Da=37496,La=37808,Ua=37809,Ia=37810,Fa=37811,Ba=37812,Oa=37813,Va=37814,Ga=37815,za=37816,ka=37817,Ha=37818,Wa=37819,$a=37820,Xa=37821,fo=36492,rf=36494,of=36495,Jf=36283,Jc=36284,el=36285,tl=36286,ub=3200,hb=3201,qs=0,Ax=1,Ti="",Oe="srgb",bi="srgb-linear",Gu="linear",Nt="srgb",db=0,Xr=7680,fb=7681,pb=7682,mb=7683,gb=34055,_b=34056,xb=5386,yb=512,vb=513,Tb=514,Sb=515,bb=516,Mb=517,Eb=518,af=519,ep=512,ch=513,tp=514,lh=515,np=516,ip=517,sp=518,rp=519,zu=35044,ia=35048,jm="300 es",ni=2e3,_s=2001;class Zs{addEventListener(e,t){this._listeners===void 0&&(this._listeners={});const n=this._listeners;n[e]===void 0&&(n[e]=[]),n[e].indexOf(t)===-1&&n[e].push(t)}hasEventListener(e,t){if(this._listeners===void 0)return!1;const n=this._listeners;return n[e]!==void 0&&n[e].indexOf(t)!==-1}removeEventListener(e,t){if(this._listeners===void 0)return;const i=this._listeners[e];if(i!==void 0){const r=i.indexOf(t);r!==-1&&i.splice(r,1)}}dispatchEvent(e){if(this._listeners===void 0)return;const n=this._listeners[e.type];if(n!==void 0){e.target=this;const i=n.slice(0);for(let r=0,o=i.length;r<o;r++)i[r].call(this,e);e.target=null}}}const Un=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"];let Km=1234567;const wc=Math.PI/180,qa=180/Math.PI;function Hs(){const s=Math.random()*4294967295|0,e=Math.random()*4294967295|0,t=Math.random()*4294967295|0,n=Math.random()*4294967295|0;return(Un[s&255]+Un[s>>8&255]+Un[s>>16&255]+Un[s>>24&255]+"-"+Un[e&255]+Un[e>>8&255]+"-"+Un[e>>16&15|64]+Un[e>>24&255]+"-"+Un[t&63|128]+Un[t>>8&255]+"-"+Un[t>>16&255]+Un[t>>24&255]+Un[n&255]+Un[n>>8&255]+Un[n>>16&255]+Un[n>>24&255]).toLowerCase()}function lt(s,e,t){return Math.max(e,Math.min(t,s))}function op(s,e){return(s%e+e)%e}function Ab(s,e,t,n,i){return n+(s-e)*(i-n)/(t-e)}function Rb(s,e,t){return s!==e?(t-s)/(e-s):0}function Nc(s,e,t){return(1-t)*s+t*e}function wb(s,e,t,n){return Nc(s,e,1-Math.exp(-t*n))}function Nb(s,e=1){return e-Math.abs(op(s,e*2)-e)}function Cb(s,e,t){return s<=e?0:s>=t?1:(s=(s-e)/(t-e),s*s*(3-2*s))}function Pb(s,e,t){return s<=e?0:s>=t?1:(s=(s-e)/(t-e),s*s*s*(s*(s*6-15)+10))}function Db(s,e){return s+Math.floor(Math.random()*(e-s+1))}function Lb(s,e){return s+Math.random()*(e-s)}function Ub(s){return s*(.5-Math.random())}function Ib(s){s!==void 0&&(Km=s);let e=Km+=1831565813;return e=Math.imul(e^e>>>15,e|1),e^=e+Math.imul(e^e>>>7,e|61),((e^e>>>14)>>>0)/4294967296}function Fb(s){return s*wc}function Bb(s){return s*qa}function Ob(s){return(s&s-1)===0&&s!==0}function Vb(s){return Math.pow(2,Math.ceil(Math.log(s)/Math.LN2))}function Gb(s){return Math.pow(2,Math.floor(Math.log(s)/Math.LN2))}function zb(s,e,t,n,i){const r=Math.cos,o=Math.sin,a=r(t/2),c=o(t/2),l=r((e+n)/2),u=o((e+n)/2),h=r((e-n)/2),d=o((e-n)/2),f=r((n-e)/2),m=o((n-e)/2);switch(i){case"XYX":s.set(a*u,c*h,c*d,a*l);break;case"YZY":s.set(c*d,a*u,c*h,a*l);break;case"ZXZ":s.set(c*h,c*d,a*u,a*l);break;case"XZX":s.set(a*u,c*m,c*f,a*l);break;case"YXY":s.set(c*f,a*u,c*m,a*l);break;case"ZYZ":s.set(c*m,c*f,a*u,a*l);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+i)}}function jn(s,e){switch(e.constructor){case Float32Array:return s;case Uint32Array:return s/4294967295;case Uint16Array:return s/65535;case Uint8Array:return s/255;case Int32Array:return Math.max(s/2147483647,-1);case Int16Array:return Math.max(s/32767,-1);case Int8Array:return Math.max(s/127,-1);default:throw new Error("Invalid component type.")}}function st(s,e){switch(e.constructor){case Float32Array:return s;case Uint32Array:return Math.round(s*4294967295);case Uint16Array:return Math.round(s*65535);case Uint8Array:return Math.round(s*255);case Int32Array:return Math.round(s*2147483647);case Int16Array:return Math.round(s*32767);case Int8Array:return Math.round(s*127);default:throw new Error("Invalid component type.")}}const ap={DEG2RAD:wc,RAD2DEG:qa,generateUUID:Hs,clamp:lt,euclideanModulo:op,mapLinear:Ab,inverseLerp:Rb,lerp:Nc,damp:wb,pingpong:Nb,smoothstep:Cb,smootherstep:Pb,randInt:Db,randFloat:Lb,randFloatSpread:Ub,seededRandom:Ib,degToRad:Fb,radToDeg:Bb,isPowerOfTwo:Ob,ceilPowerOfTwo:Vb,floorPowerOfTwo:Gb,setQuaternionFromProperEuler:zb,normalize:st,denormalize:jn};class Ee{constructor(e=0,t=0){Ee.prototype.isVector2=!0,this.x=e,this.y=t}get width(){return this.x}set width(e){this.x=e}get height(){return this.y}set height(e){this.y=e}set(e,t){return this.x=e,this.y=t,this}setScalar(e){return this.x=e,this.y=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y)}copy(e){return this.x=e.x,this.y=e.y,this}add(e){return this.x+=e.x,this.y+=e.y,this}addScalar(e){return this.x+=e,this.y+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this}subScalar(e){return this.x-=e,this.y-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this}multiply(e){return this.x*=e.x,this.y*=e.y,this}multiplyScalar(e){return this.x*=e,this.y*=e,this}divide(e){return this.x/=e.x,this.y/=e.y,this}divideScalar(e){return this.multiplyScalar(1/e)}applyMatrix3(e){const t=this.x,n=this.y,i=e.elements;return this.x=i[0]*t+i[3]*n+i[6],this.y=i[1]*t+i[4]*n+i[7],this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this}clamp(e,t){return this.x=lt(this.x,e.x,t.x),this.y=lt(this.y,e.y,t.y),this}clampScalar(e,t){return this.x=lt(this.x,e,t),this.y=lt(this.y,e,t),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(lt(n,e,t))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(e){return this.x*e.x+this.y*e.y}cross(e){return this.x*e.y-this.y*e.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}angleTo(e){const t=Math.sqrt(this.lengthSq()*e.lengthSq());if(t===0)return Math.PI/2;const n=this.dot(e)/t;return Math.acos(lt(n,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y;return t*t+n*n}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this}equals(e){return e.x===this.x&&e.y===this.y}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this}rotateAround(e,t){const n=Math.cos(t),i=Math.sin(t),r=this.x-e.x,o=this.y-e.y;return this.x=r*n-o*i+e.x,this.y=r*i+o*n+e.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}class qe{constructor(e,t,n,i,r,o,a,c,l){qe.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1],e!==void 0&&this.set(e,t,n,i,r,o,a,c,l)}set(e,t,n,i,r,o,a,c,l){const u=this.elements;return u[0]=e,u[1]=i,u[2]=a,u[3]=t,u[4]=r,u[5]=c,u[6]=n,u[7]=o,u[8]=l,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(e){const t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],this}extractBasis(e,t,n){return e.setFromMatrix3Column(this,0),t.setFromMatrix3Column(this,1),n.setFromMatrix3Column(this,2),this}setFromMatrix4(e){const t=e.elements;return this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]),this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements,i=t.elements,r=this.elements,o=n[0],a=n[3],c=n[6],l=n[1],u=n[4],h=n[7],d=n[2],f=n[5],m=n[8],_=i[0],g=i[3],p=i[6],T=i[1],S=i[4],v=i[7],P=i[2],N=i[5],w=i[8];return r[0]=o*_+a*T+c*P,r[3]=o*g+a*S+c*N,r[6]=o*p+a*v+c*w,r[1]=l*_+u*T+h*P,r[4]=l*g+u*S+h*N,r[7]=l*p+u*v+h*w,r[2]=d*_+f*T+m*P,r[5]=d*g+f*S+m*N,r[8]=d*p+f*v+m*w,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[3]*=e,t[6]*=e,t[1]*=e,t[4]*=e,t[7]*=e,t[2]*=e,t[5]*=e,t[8]*=e,this}determinant(){const e=this.elements,t=e[0],n=e[1],i=e[2],r=e[3],o=e[4],a=e[5],c=e[6],l=e[7],u=e[8];return t*o*u-t*a*l-n*r*u+n*a*c+i*r*l-i*o*c}invert(){const e=this.elements,t=e[0],n=e[1],i=e[2],r=e[3],o=e[4],a=e[5],c=e[6],l=e[7],u=e[8],h=u*o-a*l,d=a*c-u*r,f=l*r-o*c,m=t*h+n*d+i*f;if(m===0)return this.set(0,0,0,0,0,0,0,0,0);const _=1/m;return e[0]=h*_,e[1]=(i*l-u*n)*_,e[2]=(a*n-i*o)*_,e[3]=d*_,e[4]=(u*t-i*c)*_,e[5]=(i*r-a*t)*_,e[6]=f*_,e[7]=(n*c-l*t)*_,e[8]=(o*t-n*r)*_,this}transpose(){let e;const t=this.elements;return e=t[1],t[1]=t[3],t[3]=e,e=t[2],t[2]=t[6],t[6]=e,e=t[5],t[5]=t[7],t[7]=e,this}getNormalMatrix(e){return this.setFromMatrix4(e).invert().transpose()}transposeIntoArray(e){const t=this.elements;return e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8],this}setUvTransform(e,t,n,i,r,o,a){const c=Math.cos(r),l=Math.sin(r);return this.set(n*c,n*l,-n*(c*o+l*a)+o+e,-i*l,i*c,-i*(-l*o+c*a)+a+t,0,0,1),this}scale(e,t){return this.premultiply(Wh.makeScale(e,t)),this}rotate(e){return this.premultiply(Wh.makeRotation(-e)),this}translate(e,t){return this.premultiply(Wh.makeTranslation(e,t)),this}makeTranslation(e,t){return e.isVector2?this.set(1,0,e.x,0,1,e.y,0,0,1):this.set(1,0,e,0,1,t,0,0,1),this}makeRotation(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,-n,0,n,t,0,0,0,1),this}makeScale(e,t){return this.set(e,0,0,0,t,0,0,0,1),this}equals(e){const t=this.elements,n=e.elements;for(let i=0;i<9;i++)if(t[i]!==n[i])return!1;return!0}fromArray(e,t=0){for(let n=0;n<9;n++)this.elements[n]=e[n+t];return this}toArray(e=[],t=0){const n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e}clone(){return new this.constructor().fromArray(this.elements)}}const Wh=new qe;function Rx(s){for(let e=s.length-1;e>=0;--e)if(s[e]>=65535)return!0;return!1}function ku(s){return document.createElementNS("http://www.w3.org/1999/xhtml",s)}function wx(){const s=ku("canvas");return s.style.display="block",s}const Zm={};function jr(s){s in Zm||(Zm[s]=!0,console.warn(s))}function kb(s,e,t){return new Promise(function(n,i){function r(){switch(s.clientWaitSync(e,s.SYNC_FLUSH_COMMANDS_BIT,0)){case s.WAIT_FAILED:i();break;case s.TIMEOUT_EXPIRED:setTimeout(r,t);break;default:n()}}setTimeout(r,t)})}function Hb(s){const e=s.elements;e[2]=.5*e[2]+.5*e[3],e[6]=.5*e[6]+.5*e[7],e[10]=.5*e[10]+.5*e[11],e[14]=.5*e[14]+.5*e[15]}function Wb(s){const e=s.elements;e[11]===-1?(e[10]=-e[10]-1,e[14]=-e[14]):(e[10]=-e[10],e[14]=-e[14]+1)}const Qm=new qe().set(.4123908,.3575843,.1804808,.212639,.7151687,.0721923,.0193308,.1191948,.9505322),Jm=new qe().set(3.2409699,-1.5373832,-.4986108,-.9692436,1.8759675,.0415551,.0556301,-.203977,1.0569715);function $b(){const s={enabled:!0,workingColorSpace:bi,spaces:{},convert:function(i,r,o){return this.enabled===!1||r===o||!r||!o||(this.spaces[r].transfer===Nt&&(i.r=Ws(i.r),i.g=Ws(i.g),i.b=Ws(i.b)),this.spaces[r].primaries!==this.spaces[o].primaries&&(i.applyMatrix3(this.spaces[r].toXYZ),i.applyMatrix3(this.spaces[o].fromXYZ)),this.spaces[o].transfer===Nt&&(i.r=da(i.r),i.g=da(i.g),i.b=da(i.b))),i},fromWorkingColorSpace:function(i,r){return this.convert(i,this.workingColorSpace,r)},toWorkingColorSpace:function(i,r){return this.convert(i,r,this.workingColorSpace)},getPrimaries:function(i){return this.spaces[i].primaries},getTransfer:function(i){return i===Ti?Gu:this.spaces[i].transfer},getLuminanceCoefficients:function(i,r=this.workingColorSpace){return i.fromArray(this.spaces[r].luminanceCoefficients)},define:function(i){Object.assign(this.spaces,i)},_getMatrix:function(i,r,o){return i.copy(this.spaces[r].toXYZ).multiply(this.spaces[o].fromXYZ)},_getDrawingBufferColorSpace:function(i){return this.spaces[i].outputColorSpaceConfig.drawingBufferColorSpace},_getUnpackColorSpace:function(i=this.workingColorSpace){return this.spaces[i].workingColorSpaceConfig.unpackColorSpace}},e=[.64,.33,.3,.6,.15,.06],t=[.2126,.7152,.0722],n=[.3127,.329];return s.define({[bi]:{primaries:e,whitePoint:n,transfer:Gu,toXYZ:Qm,fromXYZ:Jm,luminanceCoefficients:t,workingColorSpaceConfig:{unpackColorSpace:Oe},outputColorSpaceConfig:{drawingBufferColorSpace:Oe}},[Oe]:{primaries:e,whitePoint:n,transfer:Nt,toXYZ:Qm,fromXYZ:Jm,luminanceCoefficients:t,outputColorSpaceConfig:{drawingBufferColorSpace:Oe}}}),s}const rt=$b();function Ws(s){return s<.04045?s*.0773993808:Math.pow(s*.9478672986+.0521327014,2.4)}function da(s){return s<.0031308?s*12.92:1.055*Math.pow(s,.41666)-.055}let Lo;class Xb{static getDataURL(e){if(/^data:/i.test(e.src)||typeof HTMLCanvasElement>"u")return e.src;let t;if(e instanceof HTMLCanvasElement)t=e;else{Lo===void 0&&(Lo=ku("canvas")),Lo.width=e.width,Lo.height=e.height;const n=Lo.getContext("2d");e instanceof ImageData?n.putImageData(e,0,0):n.drawImage(e,0,0,e.width,e.height),t=Lo}return t.width>2048||t.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",e),t.toDataURL("image/jpeg",.6)):t.toDataURL("image/png")}static sRGBToLinear(e){if(typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&e instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&e instanceof ImageBitmap){const t=ku("canvas");t.width=e.width,t.height=e.height;const n=t.getContext("2d");n.drawImage(e,0,0,e.width,e.height);const i=n.getImageData(0,0,e.width,e.height),r=i.data;for(let o=0;o<r.length;o++)r[o]=Ws(r[o]/255)*255;return n.putImageData(i,0,0),t}else if(e.data){const t=e.data.slice(0);for(let n=0;n<t.length;n++)t instanceof Uint8Array||t instanceof Uint8ClampedArray?t[n]=Math.floor(Ws(t[n]/255)*255):t[n]=Ws(t[n]);return{data:t,width:e.width,height:e.height}}else return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),e}}let qb=0;class Nx{constructor(e=null){this.isSource=!0,Object.defineProperty(this,"id",{value:qb++}),this.uuid=Hs(),this.data=e,this.dataReady=!0,this.version=0}set needsUpdate(e){e===!0&&this.version++}toJSON(e){const t=e===void 0||typeof e=="string";if(!t&&e.images[this.uuid]!==void 0)return e.images[this.uuid];const n={uuid:this.uuid,url:""},i=this.data;if(i!==null){let r;if(Array.isArray(i)){r=[];for(let o=0,a=i.length;o<a;o++)i[o].isDataTexture?r.push($h(i[o].image)):r.push($h(i[o]))}else r=$h(i);n.url=r}return t||(e.images[this.uuid]=n),n}}function $h(s){return typeof HTMLImageElement<"u"&&s instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&s instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&s instanceof ImageBitmap?Xb.getDataURL(s):s.data?{data:Array.from(s.data),width:s.width,height:s.height,type:s.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let Yb=0;class En extends Zs{constructor(e=En.DEFAULT_IMAGE,t=En.DEFAULT_MAPPING,n=cs,i=cs,r=yn,o=ti,a=Nn,c=Gn,l=En.DEFAULT_ANISOTROPY,u=Ti){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:Yb++}),this.uuid=Hs(),this.name="",this.source=new Nx(e),this.mipmaps=[],this.mapping=t,this.channel=0,this.wrapS=n,this.wrapT=i,this.magFilter=r,this.minFilter=o,this.anisotropy=l,this.format=a,this.internalFormat=null,this.type=c,this.offset=new Ee(0,0),this.repeat=new Ee(1,1),this.center=new Ee(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new qe,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.colorSpace=u,this.userData={},this.version=0,this.onUpdate=null,this.renderTarget=null,this.isRenderTargetTexture=!1,this.pmremVersion=0}get image(){return this.source.data}set image(e=null){this.source.data=e}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return new this.constructor().copy(this)}copy(e){return this.name=e.name,this.source=e.source,this.mipmaps=e.mipmaps.slice(0),this.mapping=e.mapping,this.channel=e.channel,this.wrapS=e.wrapS,this.wrapT=e.wrapT,this.magFilter=e.magFilter,this.minFilter=e.minFilter,this.anisotropy=e.anisotropy,this.format=e.format,this.internalFormat=e.internalFormat,this.type=e.type,this.offset.copy(e.offset),this.repeat.copy(e.repeat),this.center.copy(e.center),this.rotation=e.rotation,this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrix.copy(e.matrix),this.generateMipmaps=e.generateMipmaps,this.premultiplyAlpha=e.premultiplyAlpha,this.flipY=e.flipY,this.unpackAlignment=e.unpackAlignment,this.colorSpace=e.colorSpace,this.renderTarget=e.renderTarget,this.isRenderTargetTexture=e.isRenderTargetTexture,this.userData=JSON.parse(JSON.stringify(e.userData)),this.needsUpdate=!0,this}toJSON(e){const t=e===void 0||typeof e=="string";if(!t&&e.textures[this.uuid]!==void 0)return e.textures[this.uuid];const n={metadata:{version:4.6,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(e).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(n.userData=this.userData),t||(e.textures[this.uuid]=n),n}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(e){if(this.mapping!==jf)return e;if(e.applyMatrix3(this.matrix),e.x<0||e.x>1)switch(this.wrapS){case vo:e.x=e.x-Math.floor(e.x);break;case cs:e.x=e.x<0?0:1;break;case To:Math.abs(Math.floor(e.x)%2)===1?e.x=Math.ceil(e.x)-e.x:e.x=e.x-Math.floor(e.x);break}if(e.y<0||e.y>1)switch(this.wrapT){case vo:e.y=e.y-Math.floor(e.y);break;case cs:e.y=e.y<0?0:1;break;case To:Math.abs(Math.floor(e.y)%2)===1?e.y=Math.ceil(e.y)-e.y:e.y=e.y-Math.floor(e.y);break}return this.flipY&&(e.y=1-e.y),e}set needsUpdate(e){e===!0&&(this.version++,this.source.needsUpdate=!0)}set needsPMREMUpdate(e){e===!0&&this.pmremVersion++}}En.DEFAULT_IMAGE=null;En.DEFAULT_MAPPING=jf;En.DEFAULT_ANISOTROPY=1;class je{constructor(e=0,t=0,n=0,i=1){je.prototype.isVector4=!0,this.x=e,this.y=t,this.z=n,this.w=i}get width(){return this.z}set width(e){this.z=e}get height(){return this.w}set height(e){this.w=e}set(e,t,n,i){return this.x=e,this.y=t,this.z=n,this.w=i,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this.w=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setW(e){return this.w=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;case 3:this.w=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=e.w!==void 0?e.w:1,this}add(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this.w+=e.w,this}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this.w+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this.w=e.w+t.w,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this.w+=e.w*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this.w-=e.w,this}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this.w-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this.w=e.w-t.w,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this.w*=e.w,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this.w*=e,this}applyMatrix4(e){const t=this.x,n=this.y,i=this.z,r=this.w,o=e.elements;return this.x=o[0]*t+o[4]*n+o[8]*i+o[12]*r,this.y=o[1]*t+o[5]*n+o[9]*i+o[13]*r,this.z=o[2]*t+o[6]*n+o[10]*i+o[14]*r,this.w=o[3]*t+o[7]*n+o[11]*i+o[15]*r,this}divide(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this.w/=e.w,this}divideScalar(e){return this.multiplyScalar(1/e)}setAxisAngleFromQuaternion(e){this.w=2*Math.acos(e.w);const t=Math.sqrt(1-e.w*e.w);return t<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=e.x/t,this.y=e.y/t,this.z=e.z/t),this}setAxisAngleFromRotationMatrix(e){let t,n,i,r;const c=e.elements,l=c[0],u=c[4],h=c[8],d=c[1],f=c[5],m=c[9],_=c[2],g=c[6],p=c[10];if(Math.abs(u-d)<.01&&Math.abs(h-_)<.01&&Math.abs(m-g)<.01){if(Math.abs(u+d)<.1&&Math.abs(h+_)<.1&&Math.abs(m+g)<.1&&Math.abs(l+f+p-3)<.1)return this.set(1,0,0,0),this;t=Math.PI;const S=(l+1)/2,v=(f+1)/2,P=(p+1)/2,N=(u+d)/4,w=(h+_)/4,F=(m+g)/4;return S>v&&S>P?S<.01?(n=0,i=.707106781,r=.707106781):(n=Math.sqrt(S),i=N/n,r=w/n):v>P?v<.01?(n=.707106781,i=0,r=.707106781):(i=Math.sqrt(v),n=N/i,r=F/i):P<.01?(n=.707106781,i=.707106781,r=0):(r=Math.sqrt(P),n=w/r,i=F/r),this.set(n,i,r,t),this}let T=Math.sqrt((g-m)*(g-m)+(h-_)*(h-_)+(d-u)*(d-u));return Math.abs(T)<.001&&(T=1),this.x=(g-m)/T,this.y=(h-_)/T,this.z=(d-u)/T,this.w=Math.acos((l+f+p-1)/2),this}setFromMatrixPosition(e){const t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this.w=t[15],this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this.w=Math.min(this.w,e.w),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this.w=Math.max(this.w,e.w),this}clamp(e,t){return this.x=lt(this.x,e.x,t.x),this.y=lt(this.y,e.y,t.y),this.z=lt(this.z,e.z,t.z),this.w=lt(this.w,e.w,t.w),this}clampScalar(e,t){return this.x=lt(this.x,e,t),this.y=lt(this.y,e,t),this.z=lt(this.z,e,t),this.w=lt(this.w,e,t),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(lt(n,e,t))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this.w=Math.trunc(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this.w+=(e.w-this.w)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this.z=e.z+(t.z-e.z)*n,this.w=e.w+(t.w-e.w)*n,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z&&e.w===this.w}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this.w=e[t+3],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e[t+3]=this.w,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this.w=e.getW(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}class Cr extends Zs{constructor(e=1,t=1,n={}){super(),this.isRenderTarget=!0,this.width=e,this.height=t,this.depth=1,this.scissor=new je(0,0,e,t),this.scissorTest=!1,this.viewport=new je(0,0,e,t);const i={width:e,height:t,depth:1};n=Object.assign({generateMipmaps:!1,internalFormat:null,minFilter:yn,depthBuffer:!0,stencilBuffer:!1,resolveDepthBuffer:!0,resolveStencilBuffer:!0,depthTexture:null,samples:0,count:1},n);const r=new En(i,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.colorSpace);r.flipY=!1,r.generateMipmaps=n.generateMipmaps,r.internalFormat=n.internalFormat,this.textures=[];const o=n.count;for(let a=0;a<o;a++)this.textures[a]=r.clone(),this.textures[a].isRenderTargetTexture=!0,this.textures[a].renderTarget=this;this.depthBuffer=n.depthBuffer,this.stencilBuffer=n.stencilBuffer,this.resolveDepthBuffer=n.resolveDepthBuffer,this.resolveStencilBuffer=n.resolveStencilBuffer,this._depthTexture=null,this.depthTexture=n.depthTexture,this.samples=n.samples}get texture(){return this.textures[0]}set texture(e){this.textures[0]=e}set depthTexture(e){this._depthTexture!==null&&(this._depthTexture.renderTarget=null),e!==null&&(e.renderTarget=this),this._depthTexture=e}get depthTexture(){return this._depthTexture}setSize(e,t,n=1){if(this.width!==e||this.height!==t||this.depth!==n){this.width=e,this.height=t,this.depth=n;for(let i=0,r=this.textures.length;i<r;i++)this.textures[i].image.width=e,this.textures[i].image.height=t,this.textures[i].image.depth=n;this.dispose()}this.viewport.set(0,0,e,t),this.scissor.set(0,0,e,t)}clone(){return new this.constructor().copy(this)}copy(e){this.width=e.width,this.height=e.height,this.depth=e.depth,this.scissor.copy(e.scissor),this.scissorTest=e.scissorTest,this.viewport.copy(e.viewport),this.textures.length=0;for(let n=0,i=e.textures.length;n<i;n++)this.textures[n]=e.textures[n].clone(),this.textures[n].isRenderTargetTexture=!0,this.textures[n].renderTarget=this;const t=Object.assign({},e.texture.image);return this.texture.source=new Nx(t),this.depthBuffer=e.depthBuffer,this.stencilBuffer=e.stencilBuffer,this.resolveDepthBuffer=e.resolveDepthBuffer,this.resolveStencilBuffer=e.resolveStencilBuffer,e.depthTexture!==null&&(this.depthTexture=e.depthTexture.clone()),this.samples=e.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}class bo extends Cr{constructor(e=1,t=1,n={}){super(e,t,n),this.isWebGLRenderTarget=!0}}class cp extends En{constructor(e=null,t=1,n=1,i=1){super(null),this.isDataArrayTexture=!0,this.image={data:e,width:t,height:n,depth:i},this.magFilter=zt,this.minFilter=zt,this.wrapR=cs,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.layerUpdates=new Set}addLayerUpdate(e){this.layerUpdates.add(e)}clearLayerUpdates(){this.layerUpdates.clear()}}class jb extends En{constructor(e=null,t=1,n=1,i=1){super(null),this.isData3DTexture=!0,this.image={data:e,width:t,height:n,depth:i},this.magFilter=zt,this.minFilter=zt,this.wrapR=cs,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class Ar{constructor(e=0,t=0,n=0,i=1){this.isQuaternion=!0,this._x=e,this._y=t,this._z=n,this._w=i}static slerpFlat(e,t,n,i,r,o,a){let c=n[i+0],l=n[i+1],u=n[i+2],h=n[i+3];const d=r[o+0],f=r[o+1],m=r[o+2],_=r[o+3];if(a===0){e[t+0]=c,e[t+1]=l,e[t+2]=u,e[t+3]=h;return}if(a===1){e[t+0]=d,e[t+1]=f,e[t+2]=m,e[t+3]=_;return}if(h!==_||c!==d||l!==f||u!==m){let g=1-a;const p=c*d+l*f+u*m+h*_,T=p>=0?1:-1,S=1-p*p;if(S>Number.EPSILON){const P=Math.sqrt(S),N=Math.atan2(P,p*T);g=Math.sin(g*N)/P,a=Math.sin(a*N)/P}const v=a*T;if(c=c*g+d*v,l=l*g+f*v,u=u*g+m*v,h=h*g+_*v,g===1-a){const P=1/Math.sqrt(c*c+l*l+u*u+h*h);c*=P,l*=P,u*=P,h*=P}}e[t]=c,e[t+1]=l,e[t+2]=u,e[t+3]=h}static multiplyQuaternionsFlat(e,t,n,i,r,o){const a=n[i],c=n[i+1],l=n[i+2],u=n[i+3],h=r[o],d=r[o+1],f=r[o+2],m=r[o+3];return e[t]=a*m+u*h+c*f-l*d,e[t+1]=c*m+u*d+l*h-a*f,e[t+2]=l*m+u*f+a*d-c*h,e[t+3]=u*m-a*h-c*d-l*f,e}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get w(){return this._w}set w(e){this._w=e,this._onChangeCallback()}set(e,t,n,i){return this._x=e,this._y=t,this._z=n,this._w=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(e){return this._x=e.x,this._y=e.y,this._z=e.z,this._w=e.w,this._onChangeCallback(),this}setFromEuler(e,t=!0){const n=e._x,i=e._y,r=e._z,o=e._order,a=Math.cos,c=Math.sin,l=a(n/2),u=a(i/2),h=a(r/2),d=c(n/2),f=c(i/2),m=c(r/2);switch(o){case"XYZ":this._x=d*u*h+l*f*m,this._y=l*f*h-d*u*m,this._z=l*u*m+d*f*h,this._w=l*u*h-d*f*m;break;case"YXZ":this._x=d*u*h+l*f*m,this._y=l*f*h-d*u*m,this._z=l*u*m-d*f*h,this._w=l*u*h+d*f*m;break;case"ZXY":this._x=d*u*h-l*f*m,this._y=l*f*h+d*u*m,this._z=l*u*m+d*f*h,this._w=l*u*h-d*f*m;break;case"ZYX":this._x=d*u*h-l*f*m,this._y=l*f*h+d*u*m,this._z=l*u*m-d*f*h,this._w=l*u*h+d*f*m;break;case"YZX":this._x=d*u*h+l*f*m,this._y=l*f*h+d*u*m,this._z=l*u*m-d*f*h,this._w=l*u*h-d*f*m;break;case"XZY":this._x=d*u*h-l*f*m,this._y=l*f*h-d*u*m,this._z=l*u*m+d*f*h,this._w=l*u*h+d*f*m;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+o)}return t===!0&&this._onChangeCallback(),this}setFromAxisAngle(e,t){const n=t/2,i=Math.sin(n);return this._x=e.x*i,this._y=e.y*i,this._z=e.z*i,this._w=Math.cos(n),this._onChangeCallback(),this}setFromRotationMatrix(e){const t=e.elements,n=t[0],i=t[4],r=t[8],o=t[1],a=t[5],c=t[9],l=t[2],u=t[6],h=t[10],d=n+a+h;if(d>0){const f=.5/Math.sqrt(d+1);this._w=.25/f,this._x=(u-c)*f,this._y=(r-l)*f,this._z=(o-i)*f}else if(n>a&&n>h){const f=2*Math.sqrt(1+n-a-h);this._w=(u-c)/f,this._x=.25*f,this._y=(i+o)/f,this._z=(r+l)/f}else if(a>h){const f=2*Math.sqrt(1+a-n-h);this._w=(r-l)/f,this._x=(i+o)/f,this._y=.25*f,this._z=(c+u)/f}else{const f=2*Math.sqrt(1+h-n-a);this._w=(o-i)/f,this._x=(r+l)/f,this._y=(c+u)/f,this._z=.25*f}return this._onChangeCallback(),this}setFromUnitVectors(e,t){let n=e.dot(t)+1;return n<Number.EPSILON?(n=0,Math.abs(e.x)>Math.abs(e.z)?(this._x=-e.y,this._y=e.x,this._z=0,this._w=n):(this._x=0,this._y=-e.z,this._z=e.y,this._w=n)):(this._x=e.y*t.z-e.z*t.y,this._y=e.z*t.x-e.x*t.z,this._z=e.x*t.y-e.y*t.x,this._w=n),this.normalize()}angleTo(e){return 2*Math.acos(Math.abs(lt(this.dot(e),-1,1)))}rotateTowards(e,t){const n=this.angleTo(e);if(n===0)return this;const i=Math.min(1,t/n);return this.slerp(e,i),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(e){return this._x*e._x+this._y*e._y+this._z*e._z+this._w*e._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let e=this.length();return e===0?(this._x=0,this._y=0,this._z=0,this._w=1):(e=1/e,this._x=this._x*e,this._y=this._y*e,this._z=this._z*e,this._w=this._w*e),this._onChangeCallback(),this}multiply(e){return this.multiplyQuaternions(this,e)}premultiply(e){return this.multiplyQuaternions(e,this)}multiplyQuaternions(e,t){const n=e._x,i=e._y,r=e._z,o=e._w,a=t._x,c=t._y,l=t._z,u=t._w;return this._x=n*u+o*a+i*l-r*c,this._y=i*u+o*c+r*a-n*l,this._z=r*u+o*l+n*c-i*a,this._w=o*u-n*a-i*c-r*l,this._onChangeCallback(),this}slerp(e,t){if(t===0)return this;if(t===1)return this.copy(e);const n=this._x,i=this._y,r=this._z,o=this._w;let a=o*e._w+n*e._x+i*e._y+r*e._z;if(a<0?(this._w=-e._w,this._x=-e._x,this._y=-e._y,this._z=-e._z,a=-a):this.copy(e),a>=1)return this._w=o,this._x=n,this._y=i,this._z=r,this;const c=1-a*a;if(c<=Number.EPSILON){const f=1-t;return this._w=f*o+t*this._w,this._x=f*n+t*this._x,this._y=f*i+t*this._y,this._z=f*r+t*this._z,this.normalize(),this}const l=Math.sqrt(c),u=Math.atan2(l,a),h=Math.sin((1-t)*u)/l,d=Math.sin(t*u)/l;return this._w=o*h+this._w*d,this._x=n*h+this._x*d,this._y=i*h+this._y*d,this._z=r*h+this._z*d,this._onChangeCallback(),this}slerpQuaternions(e,t,n){return this.copy(e).slerp(t,n)}random(){const e=2*Math.PI*Math.random(),t=2*Math.PI*Math.random(),n=Math.random(),i=Math.sqrt(1-n),r=Math.sqrt(n);return this.set(i*Math.sin(e),i*Math.cos(e),r*Math.sin(t),r*Math.cos(t))}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._w===this._w}fromArray(e,t=0){return this._x=e[t],this._y=e[t+1],this._z=e[t+2],this._w=e[t+3],this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._w,e}fromBufferAttribute(e,t){return this._x=e.getX(t),this._y=e.getY(t),this._z=e.getZ(t),this._w=e.getW(t),this._onChangeCallback(),this}toJSON(){return this.toArray()}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}}class U{constructor(e=0,t=0,n=0){U.prototype.isVector3=!0,this.x=e,this.y=t,this.z=n}set(e,t,n){return n===void 0&&(n=this.z),this.x=e,this.y=t,this.z=n,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this}add(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this}multiplyVectors(e,t){return this.x=e.x*t.x,this.y=e.y*t.y,this.z=e.z*t.z,this}applyEuler(e){return this.applyQuaternion(eg.setFromEuler(e))}applyAxisAngle(e,t){return this.applyQuaternion(eg.setFromAxisAngle(e,t))}applyMatrix3(e){const t=this.x,n=this.y,i=this.z,r=e.elements;return this.x=r[0]*t+r[3]*n+r[6]*i,this.y=r[1]*t+r[4]*n+r[7]*i,this.z=r[2]*t+r[5]*n+r[8]*i,this}applyNormalMatrix(e){return this.applyMatrix3(e).normalize()}applyMatrix4(e){const t=this.x,n=this.y,i=this.z,r=e.elements,o=1/(r[3]*t+r[7]*n+r[11]*i+r[15]);return this.x=(r[0]*t+r[4]*n+r[8]*i+r[12])*o,this.y=(r[1]*t+r[5]*n+r[9]*i+r[13])*o,this.z=(r[2]*t+r[6]*n+r[10]*i+r[14])*o,this}applyQuaternion(e){const t=this.x,n=this.y,i=this.z,r=e.x,o=e.y,a=e.z,c=e.w,l=2*(o*i-a*n),u=2*(a*t-r*i),h=2*(r*n-o*t);return this.x=t+c*l+o*h-a*u,this.y=n+c*u+a*l-r*h,this.z=i+c*h+r*u-o*l,this}project(e){return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix)}unproject(e){return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld)}transformDirection(e){const t=this.x,n=this.y,i=this.z,r=e.elements;return this.x=r[0]*t+r[4]*n+r[8]*i,this.y=r[1]*t+r[5]*n+r[9]*i,this.z=r[2]*t+r[6]*n+r[10]*i,this.normalize()}divide(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this}divideScalar(e){return this.multiplyScalar(1/e)}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this}clamp(e,t){return this.x=lt(this.x,e.x,t.x),this.y=lt(this.y,e.y,t.y),this.z=lt(this.z,e.z,t.z),this}clampScalar(e,t){return this.x=lt(this.x,e,t),this.y=lt(this.y,e,t),this.z=lt(this.z,e,t),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(lt(n,e,t))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this.z=e.z+(t.z-e.z)*n,this}cross(e){return this.crossVectors(this,e)}crossVectors(e,t){const n=e.x,i=e.y,r=e.z,o=t.x,a=t.y,c=t.z;return this.x=i*c-r*a,this.y=r*o-n*c,this.z=n*a-i*o,this}projectOnVector(e){const t=e.lengthSq();if(t===0)return this.set(0,0,0);const n=e.dot(this)/t;return this.copy(e).multiplyScalar(n)}projectOnPlane(e){return Xh.copy(this).projectOnVector(e),this.sub(Xh)}reflect(e){return this.sub(Xh.copy(e).multiplyScalar(2*this.dot(e)))}angleTo(e){const t=Math.sqrt(this.lengthSq()*e.lengthSq());if(t===0)return Math.PI/2;const n=this.dot(e)/t;return Math.acos(lt(n,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y,i=this.z-e.z;return t*t+n*n+i*i}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)+Math.abs(this.z-e.z)}setFromSpherical(e){return this.setFromSphericalCoords(e.radius,e.phi,e.theta)}setFromSphericalCoords(e,t,n){const i=Math.sin(t)*e;return this.x=i*Math.sin(n),this.y=Math.cos(t)*e,this.z=i*Math.cos(n),this}setFromCylindrical(e){return this.setFromCylindricalCoords(e.radius,e.theta,e.y)}setFromCylindricalCoords(e,t,n){return this.x=e*Math.sin(t),this.y=n,this.z=e*Math.cos(t),this}setFromMatrixPosition(e){const t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this}setFromMatrixScale(e){const t=this.setFromMatrixColumn(e,0).length(),n=this.setFromMatrixColumn(e,1).length(),i=this.setFromMatrixColumn(e,2).length();return this.x=t,this.y=n,this.z=i,this}setFromMatrixColumn(e,t){return this.fromArray(e.elements,t*4)}setFromMatrix3Column(e,t){return this.fromArray(e.elements,t*3)}setFromEuler(e){return this.x=e._x,this.y=e._y,this.z=e._z,this}setFromColor(e){return this.x=e.r,this.y=e.g,this.z=e.b,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const e=Math.random()*Math.PI*2,t=Math.random()*2-1,n=Math.sqrt(1-t*t);return this.x=n*Math.cos(e),this.y=t,this.z=n*Math.sin(e),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}const Xh=new U,eg=new Ar;class bl{constructor(e=new U(1/0,1/0,1/0),t=new U(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=e,this.max=t}set(e,t){return this.min.copy(e),this.max.copy(t),this}setFromArray(e){this.makeEmpty();for(let t=0,n=e.length;t<n;t+=3)this.expandByPoint(zi.fromArray(e,t));return this}setFromBufferAttribute(e){this.makeEmpty();for(let t=0,n=e.count;t<n;t++)this.expandByPoint(zi.fromBufferAttribute(e,t));return this}setFromPoints(e){this.makeEmpty();for(let t=0,n=e.length;t<n;t++)this.expandByPoint(e[t]);return this}setFromCenterAndSize(e,t){const n=zi.copy(t).multiplyScalar(.5);return this.min.copy(e).sub(n),this.max.copy(e).add(n),this}setFromObject(e,t=!1){return this.makeEmpty(),this.expandByObject(e,t)}clone(){return new this.constructor().copy(this)}copy(e){return this.min.copy(e.min),this.max.copy(e.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(e){return this.isEmpty()?e.set(0,0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(e){return this.isEmpty()?e.set(0,0,0):e.subVectors(this.max,this.min)}expandByPoint(e){return this.min.min(e),this.max.max(e),this}expandByVector(e){return this.min.sub(e),this.max.add(e),this}expandByScalar(e){return this.min.addScalar(-e),this.max.addScalar(e),this}expandByObject(e,t=!1){e.updateWorldMatrix(!1,!1);const n=e.geometry;if(n!==void 0){const r=n.getAttribute("position");if(t===!0&&r!==void 0&&e.isInstancedMesh!==!0)for(let o=0,a=r.count;o<a;o++)e.isMesh===!0?e.getVertexPosition(o,zi):zi.fromBufferAttribute(r,o),zi.applyMatrix4(e.matrixWorld),this.expandByPoint(zi);else e.boundingBox!==void 0?(e.boundingBox===null&&e.computeBoundingBox(),kl.copy(e.boundingBox)):(n.boundingBox===null&&n.computeBoundingBox(),kl.copy(n.boundingBox)),kl.applyMatrix4(e.matrixWorld),this.union(kl)}const i=e.children;for(let r=0,o=i.length;r<o;r++)this.expandByObject(i[r],t);return this}containsPoint(e){return e.x>=this.min.x&&e.x<=this.max.x&&e.y>=this.min.y&&e.y<=this.max.y&&e.z>=this.min.z&&e.z<=this.max.z}containsBox(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y&&this.min.z<=e.min.z&&e.max.z<=this.max.z}getParameter(e,t){return t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y),(e.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(e){return e.max.x>=this.min.x&&e.min.x<=this.max.x&&e.max.y>=this.min.y&&e.min.y<=this.max.y&&e.max.z>=this.min.z&&e.min.z<=this.max.z}intersectsSphere(e){return this.clampPoint(e.center,zi),zi.distanceToSquared(e.center)<=e.radius*e.radius}intersectsPlane(e){let t,n;return e.normal.x>0?(t=e.normal.x*this.min.x,n=e.normal.x*this.max.x):(t=e.normal.x*this.max.x,n=e.normal.x*this.min.x),e.normal.y>0?(t+=e.normal.y*this.min.y,n+=e.normal.y*this.max.y):(t+=e.normal.y*this.max.y,n+=e.normal.y*this.min.y),e.normal.z>0?(t+=e.normal.z*this.min.z,n+=e.normal.z*this.max.z):(t+=e.normal.z*this.max.z,n+=e.normal.z*this.min.z),t<=-e.constant&&n>=-e.constant}intersectsTriangle(e){if(this.isEmpty())return!1;this.getCenter(uc),Hl.subVectors(this.max,uc),Uo.subVectors(e.a,uc),Io.subVectors(e.b,uc),Fo.subVectors(e.c,uc),tr.subVectors(Io,Uo),nr.subVectors(Fo,Io),Fr.subVectors(Uo,Fo);let t=[0,-tr.z,tr.y,0,-nr.z,nr.y,0,-Fr.z,Fr.y,tr.z,0,-tr.x,nr.z,0,-nr.x,Fr.z,0,-Fr.x,-tr.y,tr.x,0,-nr.y,nr.x,0,-Fr.y,Fr.x,0];return!qh(t,Uo,Io,Fo,Hl)||(t=[1,0,0,0,1,0,0,0,1],!qh(t,Uo,Io,Fo,Hl))?!1:(Wl.crossVectors(tr,nr),t=[Wl.x,Wl.y,Wl.z],qh(t,Uo,Io,Fo,Hl))}clampPoint(e,t){return t.copy(e).clamp(this.min,this.max)}distanceToPoint(e){return this.clampPoint(e,zi).distanceTo(e)}getBoundingSphere(e){return this.isEmpty()?e.makeEmpty():(this.getCenter(e.center),e.radius=this.getSize(zi).length()*.5),e}intersect(e){return this.min.max(e.min),this.max.min(e.max),this.isEmpty()&&this.makeEmpty(),this}union(e){return this.min.min(e.min),this.max.max(e.max),this}applyMatrix4(e){return this.isEmpty()?this:(Rs[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(e),Rs[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(e),Rs[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(e),Rs[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(e),Rs[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(e),Rs[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(e),Rs[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(e),Rs[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(e),this.setFromPoints(Rs),this)}translate(e){return this.min.add(e),this.max.add(e),this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}const Rs=[new U,new U,new U,new U,new U,new U,new U,new U],zi=new U,kl=new bl,Uo=new U,Io=new U,Fo=new U,tr=new U,nr=new U,Fr=new U,uc=new U,Hl=new U,Wl=new U,Br=new U;function qh(s,e,t,n,i){for(let r=0,o=s.length-3;r<=o;r+=3){Br.fromArray(s,r);const a=i.x*Math.abs(Br.x)+i.y*Math.abs(Br.y)+i.z*Math.abs(Br.z),c=e.dot(Br),l=t.dot(Br),u=n.dot(Br);if(Math.max(-Math.max(c,l,u),Math.min(c,l,u))>a)return!1}return!0}const Kb=new bl,hc=new U,Yh=new U;class lp{constructor(e=new U,t=-1){this.isSphere=!0,this.center=e,this.radius=t}set(e,t){return this.center.copy(e),this.radius=t,this}setFromPoints(e,t){const n=this.center;t!==void 0?n.copy(t):Kb.setFromPoints(e).getCenter(n);let i=0;for(let r=0,o=e.length;r<o;r++)i=Math.max(i,n.distanceToSquared(e[r]));return this.radius=Math.sqrt(i),this}copy(e){return this.center.copy(e.center),this.radius=e.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(e){return e.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(e){return e.distanceTo(this.center)-this.radius}intersectsSphere(e){const t=this.radius+e.radius;return e.center.distanceToSquared(this.center)<=t*t}intersectsBox(e){return e.intersectsSphere(this)}intersectsPlane(e){return Math.abs(e.distanceToPoint(this.center))<=this.radius}clampPoint(e,t){const n=this.center.distanceToSquared(e);return t.copy(e),n>this.radius*this.radius&&(t.sub(this.center).normalize(),t.multiplyScalar(this.radius).add(this.center)),t}getBoundingBox(e){return this.isEmpty()?(e.makeEmpty(),e):(e.set(this.center,this.center),e.expandByScalar(this.radius),e)}applyMatrix4(e){return this.center.applyMatrix4(e),this.radius=this.radius*e.getMaxScaleOnAxis(),this}translate(e){return this.center.add(e),this}expandByPoint(e){if(this.isEmpty())return this.center.copy(e),this.radius=0,this;hc.subVectors(e,this.center);const t=hc.lengthSq();if(t>this.radius*this.radius){const n=Math.sqrt(t),i=(n-this.radius)*.5;this.center.addScaledVector(hc,i/n),this.radius+=i}return this}union(e){return e.isEmpty()?this:this.isEmpty()?(this.copy(e),this):(this.center.equals(e.center)===!0?this.radius=Math.max(this.radius,e.radius):(Yh.subVectors(e.center,this.center).setLength(e.radius),this.expandByPoint(hc.copy(e.center).add(Yh)),this.expandByPoint(hc.copy(e.center).sub(Yh))),this)}equals(e){return e.center.equals(this.center)&&e.radius===this.radius}clone(){return new this.constructor().copy(this)}}const ws=new U,jh=new U,$l=new U,ir=new U,Kh=new U,Xl=new U,Zh=new U;class Cx{constructor(e=new U,t=new U(0,0,-1)){this.origin=e,this.direction=t}set(e,t){return this.origin.copy(e),this.direction.copy(t),this}copy(e){return this.origin.copy(e.origin),this.direction.copy(e.direction),this}at(e,t){return t.copy(this.origin).addScaledVector(this.direction,e)}lookAt(e){return this.direction.copy(e).sub(this.origin).normalize(),this}recast(e){return this.origin.copy(this.at(e,ws)),this}closestPointToPoint(e,t){t.subVectors(e,this.origin);const n=t.dot(this.direction);return n<0?t.copy(this.origin):t.copy(this.origin).addScaledVector(this.direction,n)}distanceToPoint(e){return Math.sqrt(this.distanceSqToPoint(e))}distanceSqToPoint(e){const t=ws.subVectors(e,this.origin).dot(this.direction);return t<0?this.origin.distanceToSquared(e):(ws.copy(this.origin).addScaledVector(this.direction,t),ws.distanceToSquared(e))}distanceSqToSegment(e,t,n,i){jh.copy(e).add(t).multiplyScalar(.5),$l.copy(t).sub(e).normalize(),ir.copy(this.origin).sub(jh);const r=e.distanceTo(t)*.5,o=-this.direction.dot($l),a=ir.dot(this.direction),c=-ir.dot($l),l=ir.lengthSq(),u=Math.abs(1-o*o);let h,d,f,m;if(u>0)if(h=o*c-a,d=o*a-c,m=r*u,h>=0)if(d>=-m)if(d<=m){const _=1/u;h*=_,d*=_,f=h*(h+o*d+2*a)+d*(o*h+d+2*c)+l}else d=r,h=Math.max(0,-(o*d+a)),f=-h*h+d*(d+2*c)+l;else d=-r,h=Math.max(0,-(o*d+a)),f=-h*h+d*(d+2*c)+l;else d<=-m?(h=Math.max(0,-(-o*r+a)),d=h>0?-r:Math.min(Math.max(-r,-c),r),f=-h*h+d*(d+2*c)+l):d<=m?(h=0,d=Math.min(Math.max(-r,-c),r),f=d*(d+2*c)+l):(h=Math.max(0,-(o*r+a)),d=h>0?r:Math.min(Math.max(-r,-c),r),f=-h*h+d*(d+2*c)+l);else d=o>0?-r:r,h=Math.max(0,-(o*d+a)),f=-h*h+d*(d+2*c)+l;return n&&n.copy(this.origin).addScaledVector(this.direction,h),i&&i.copy(jh).addScaledVector($l,d),f}intersectSphere(e,t){ws.subVectors(e.center,this.origin);const n=ws.dot(this.direction),i=ws.dot(ws)-n*n,r=e.radius*e.radius;if(i>r)return null;const o=Math.sqrt(r-i),a=n-o,c=n+o;return c<0?null:a<0?this.at(c,t):this.at(a,t)}intersectsSphere(e){return this.distanceSqToPoint(e.center)<=e.radius*e.radius}distanceToPlane(e){const t=e.normal.dot(this.direction);if(t===0)return e.distanceToPoint(this.origin)===0?0:null;const n=-(this.origin.dot(e.normal)+e.constant)/t;return n>=0?n:null}intersectPlane(e,t){const n=this.distanceToPlane(e);return n===null?null:this.at(n,t)}intersectsPlane(e){const t=e.distanceToPoint(this.origin);return t===0||e.normal.dot(this.direction)*t<0}intersectBox(e,t){let n,i,r,o,a,c;const l=1/this.direction.x,u=1/this.direction.y,h=1/this.direction.z,d=this.origin;return l>=0?(n=(e.min.x-d.x)*l,i=(e.max.x-d.x)*l):(n=(e.max.x-d.x)*l,i=(e.min.x-d.x)*l),u>=0?(r=(e.min.y-d.y)*u,o=(e.max.y-d.y)*u):(r=(e.max.y-d.y)*u,o=(e.min.y-d.y)*u),n>o||r>i||((r>n||isNaN(n))&&(n=r),(o<i||isNaN(i))&&(i=o),h>=0?(a=(e.min.z-d.z)*h,c=(e.max.z-d.z)*h):(a=(e.max.z-d.z)*h,c=(e.min.z-d.z)*h),n>c||a>i)||((a>n||n!==n)&&(n=a),(c<i||i!==i)&&(i=c),i<0)?null:this.at(n>=0?n:i,t)}intersectsBox(e){return this.intersectBox(e,ws)!==null}intersectTriangle(e,t,n,i,r){Kh.subVectors(t,e),Xl.subVectors(n,e),Zh.crossVectors(Kh,Xl);let o=this.direction.dot(Zh),a;if(o>0){if(i)return null;a=1}else if(o<0)a=-1,o=-o;else return null;ir.subVectors(this.origin,e);const c=a*this.direction.dot(Xl.crossVectors(ir,Xl));if(c<0)return null;const l=a*this.direction.dot(Kh.cross(ir));if(l<0||c+l>o)return null;const u=-a*ir.dot(Zh);return u<0?null:this.at(u/o,r)}applyMatrix4(e){return this.origin.applyMatrix4(e),this.direction.transformDirection(e),this}equals(e){return e.origin.equals(this.origin)&&e.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}}class ut{constructor(e,t,n,i,r,o,a,c,l,u,h,d,f,m,_,g){ut.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],e!==void 0&&this.set(e,t,n,i,r,o,a,c,l,u,h,d,f,m,_,g)}set(e,t,n,i,r,o,a,c,l,u,h,d,f,m,_,g){const p=this.elements;return p[0]=e,p[4]=t,p[8]=n,p[12]=i,p[1]=r,p[5]=o,p[9]=a,p[13]=c,p[2]=l,p[6]=u,p[10]=h,p[14]=d,p[3]=f,p[7]=m,p[11]=_,p[15]=g,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new ut().fromArray(this.elements)}copy(e){const t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],this}copyPosition(e){const t=this.elements,n=e.elements;return t[12]=n[12],t[13]=n[13],t[14]=n[14],this}setFromMatrix3(e){const t=e.elements;return this.set(t[0],t[3],t[6],0,t[1],t[4],t[7],0,t[2],t[5],t[8],0,0,0,0,1),this}extractBasis(e,t,n){return e.setFromMatrixColumn(this,0),t.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this}makeBasis(e,t,n){return this.set(e.x,t.x,n.x,0,e.y,t.y,n.y,0,e.z,t.z,n.z,0,0,0,0,1),this}extractRotation(e){const t=this.elements,n=e.elements,i=1/Bo.setFromMatrixColumn(e,0).length(),r=1/Bo.setFromMatrixColumn(e,1).length(),o=1/Bo.setFromMatrixColumn(e,2).length();return t[0]=n[0]*i,t[1]=n[1]*i,t[2]=n[2]*i,t[3]=0,t[4]=n[4]*r,t[5]=n[5]*r,t[6]=n[6]*r,t[7]=0,t[8]=n[8]*o,t[9]=n[9]*o,t[10]=n[10]*o,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromEuler(e){const t=this.elements,n=e.x,i=e.y,r=e.z,o=Math.cos(n),a=Math.sin(n),c=Math.cos(i),l=Math.sin(i),u=Math.cos(r),h=Math.sin(r);if(e.order==="XYZ"){const d=o*u,f=o*h,m=a*u,_=a*h;t[0]=c*u,t[4]=-c*h,t[8]=l,t[1]=f+m*l,t[5]=d-_*l,t[9]=-a*c,t[2]=_-d*l,t[6]=m+f*l,t[10]=o*c}else if(e.order==="YXZ"){const d=c*u,f=c*h,m=l*u,_=l*h;t[0]=d+_*a,t[4]=m*a-f,t[8]=o*l,t[1]=o*h,t[5]=o*u,t[9]=-a,t[2]=f*a-m,t[6]=_+d*a,t[10]=o*c}else if(e.order==="ZXY"){const d=c*u,f=c*h,m=l*u,_=l*h;t[0]=d-_*a,t[4]=-o*h,t[8]=m+f*a,t[1]=f+m*a,t[5]=o*u,t[9]=_-d*a,t[2]=-o*l,t[6]=a,t[10]=o*c}else if(e.order==="ZYX"){const d=o*u,f=o*h,m=a*u,_=a*h;t[0]=c*u,t[4]=m*l-f,t[8]=d*l+_,t[1]=c*h,t[5]=_*l+d,t[9]=f*l-m,t[2]=-l,t[6]=a*c,t[10]=o*c}else if(e.order==="YZX"){const d=o*c,f=o*l,m=a*c,_=a*l;t[0]=c*u,t[4]=_-d*h,t[8]=m*h+f,t[1]=h,t[5]=o*u,t[9]=-a*u,t[2]=-l*u,t[6]=f*h+m,t[10]=d-_*h}else if(e.order==="XZY"){const d=o*c,f=o*l,m=a*c,_=a*l;t[0]=c*u,t[4]=-h,t[8]=l*u,t[1]=d*h+_,t[5]=o*u,t[9]=f*h-m,t[2]=m*h-f,t[6]=a*u,t[10]=_*h+d}return t[3]=0,t[7]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromQuaternion(e){return this.compose(Zb,e,Qb)}lookAt(e,t,n){const i=this.elements;return di.subVectors(e,t),di.lengthSq()===0&&(di.z=1),di.normalize(),sr.crossVectors(n,di),sr.lengthSq()===0&&(Math.abs(n.z)===1?di.x+=1e-4:di.z+=1e-4,di.normalize(),sr.crossVectors(n,di)),sr.normalize(),ql.crossVectors(di,sr),i[0]=sr.x,i[4]=ql.x,i[8]=di.x,i[1]=sr.y,i[5]=ql.y,i[9]=di.y,i[2]=sr.z,i[6]=ql.z,i[10]=di.z,this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements,i=t.elements,r=this.elements,o=n[0],a=n[4],c=n[8],l=n[12],u=n[1],h=n[5],d=n[9],f=n[13],m=n[2],_=n[6],g=n[10],p=n[14],T=n[3],S=n[7],v=n[11],P=n[15],N=i[0],w=i[4],F=i[8],E=i[12],M=i[1],D=i[5],Z=i[9],$=i[13],ne=i[2],oe=i[6],re=i[10],ue=i[14],Q=i[3],ye=i[7],Re=i[11],Ge=i[15];return r[0]=o*N+a*M+c*ne+l*Q,r[4]=o*w+a*D+c*oe+l*ye,r[8]=o*F+a*Z+c*re+l*Re,r[12]=o*E+a*$+c*ue+l*Ge,r[1]=u*N+h*M+d*ne+f*Q,r[5]=u*w+h*D+d*oe+f*ye,r[9]=u*F+h*Z+d*re+f*Re,r[13]=u*E+h*$+d*ue+f*Ge,r[2]=m*N+_*M+g*ne+p*Q,r[6]=m*w+_*D+g*oe+p*ye,r[10]=m*F+_*Z+g*re+p*Re,r[14]=m*E+_*$+g*ue+p*Ge,r[3]=T*N+S*M+v*ne+P*Q,r[7]=T*w+S*D+v*oe+P*ye,r[11]=T*F+S*Z+v*re+P*Re,r[15]=T*E+S*$+v*ue+P*Ge,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[4]*=e,t[8]*=e,t[12]*=e,t[1]*=e,t[5]*=e,t[9]*=e,t[13]*=e,t[2]*=e,t[6]*=e,t[10]*=e,t[14]*=e,t[3]*=e,t[7]*=e,t[11]*=e,t[15]*=e,this}determinant(){const e=this.elements,t=e[0],n=e[4],i=e[8],r=e[12],o=e[1],a=e[5],c=e[9],l=e[13],u=e[2],h=e[6],d=e[10],f=e[14],m=e[3],_=e[7],g=e[11],p=e[15];return m*(+r*c*h-i*l*h-r*a*d+n*l*d+i*a*f-n*c*f)+_*(+t*c*f-t*l*d+r*o*d-i*o*f+i*l*u-r*c*u)+g*(+t*l*h-t*a*f-r*o*h+n*o*f+r*a*u-n*l*u)+p*(-i*a*u-t*c*h+t*a*d+i*o*h-n*o*d+n*c*u)}transpose(){const e=this.elements;let t;return t=e[1],e[1]=e[4],e[4]=t,t=e[2],e[2]=e[8],e[8]=t,t=e[6],e[6]=e[9],e[9]=t,t=e[3],e[3]=e[12],e[12]=t,t=e[7],e[7]=e[13],e[13]=t,t=e[11],e[11]=e[14],e[14]=t,this}setPosition(e,t,n){const i=this.elements;return e.isVector3?(i[12]=e.x,i[13]=e.y,i[14]=e.z):(i[12]=e,i[13]=t,i[14]=n),this}invert(){const e=this.elements,t=e[0],n=e[1],i=e[2],r=e[3],o=e[4],a=e[5],c=e[6],l=e[7],u=e[8],h=e[9],d=e[10],f=e[11],m=e[12],_=e[13],g=e[14],p=e[15],T=h*g*l-_*d*l+_*c*f-a*g*f-h*c*p+a*d*p,S=m*d*l-u*g*l-m*c*f+o*g*f+u*c*p-o*d*p,v=u*_*l-m*h*l+m*a*f-o*_*f-u*a*p+o*h*p,P=m*h*c-u*_*c-m*a*d+o*_*d+u*a*g-o*h*g,N=t*T+n*S+i*v+r*P;if(N===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const w=1/N;return e[0]=T*w,e[1]=(_*d*r-h*g*r-_*i*f+n*g*f+h*i*p-n*d*p)*w,e[2]=(a*g*r-_*c*r+_*i*l-n*g*l-a*i*p+n*c*p)*w,e[3]=(h*c*r-a*d*r-h*i*l+n*d*l+a*i*f-n*c*f)*w,e[4]=S*w,e[5]=(u*g*r-m*d*r+m*i*f-t*g*f-u*i*p+t*d*p)*w,e[6]=(m*c*r-o*g*r-m*i*l+t*g*l+o*i*p-t*c*p)*w,e[7]=(o*d*r-u*c*r+u*i*l-t*d*l-o*i*f+t*c*f)*w,e[8]=v*w,e[9]=(m*h*r-u*_*r-m*n*f+t*_*f+u*n*p-t*h*p)*w,e[10]=(o*_*r-m*a*r+m*n*l-t*_*l-o*n*p+t*a*p)*w,e[11]=(u*a*r-o*h*r-u*n*l+t*h*l+o*n*f-t*a*f)*w,e[12]=P*w,e[13]=(u*_*i-m*h*i+m*n*d-t*_*d-u*n*g+t*h*g)*w,e[14]=(m*a*i-o*_*i-m*n*c+t*_*c+o*n*g-t*a*g)*w,e[15]=(o*h*i-u*a*i+u*n*c-t*h*c-o*n*d+t*a*d)*w,this}scale(e){const t=this.elements,n=e.x,i=e.y,r=e.z;return t[0]*=n,t[4]*=i,t[8]*=r,t[1]*=n,t[5]*=i,t[9]*=r,t[2]*=n,t[6]*=i,t[10]*=r,t[3]*=n,t[7]*=i,t[11]*=r,this}getMaxScaleOnAxis(){const e=this.elements,t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],n=e[4]*e[4]+e[5]*e[5]+e[6]*e[6],i=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(t,n,i))}makeTranslation(e,t,n){return e.isVector3?this.set(1,0,0,e.x,0,1,0,e.y,0,0,1,e.z,0,0,0,1):this.set(1,0,0,e,0,1,0,t,0,0,1,n,0,0,0,1),this}makeRotationX(e){const t=Math.cos(e),n=Math.sin(e);return this.set(1,0,0,0,0,t,-n,0,0,n,t,0,0,0,0,1),this}makeRotationY(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,0,n,0,0,1,0,0,-n,0,t,0,0,0,0,1),this}makeRotationZ(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,-n,0,0,n,t,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(e,t){const n=Math.cos(t),i=Math.sin(t),r=1-n,o=e.x,a=e.y,c=e.z,l=r*o,u=r*a;return this.set(l*o+n,l*a-i*c,l*c+i*a,0,l*a+i*c,u*a+n,u*c-i*o,0,l*c-i*a,u*c+i*o,r*c*c+n,0,0,0,0,1),this}makeScale(e,t,n){return this.set(e,0,0,0,0,t,0,0,0,0,n,0,0,0,0,1),this}makeShear(e,t,n,i,r,o){return this.set(1,n,r,0,e,1,o,0,t,i,1,0,0,0,0,1),this}compose(e,t,n){const i=this.elements,r=t._x,o=t._y,a=t._z,c=t._w,l=r+r,u=o+o,h=a+a,d=r*l,f=r*u,m=r*h,_=o*u,g=o*h,p=a*h,T=c*l,S=c*u,v=c*h,P=n.x,N=n.y,w=n.z;return i[0]=(1-(_+p))*P,i[1]=(f+v)*P,i[2]=(m-S)*P,i[3]=0,i[4]=(f-v)*N,i[5]=(1-(d+p))*N,i[6]=(g+T)*N,i[7]=0,i[8]=(m+S)*w,i[9]=(g-T)*w,i[10]=(1-(d+_))*w,i[11]=0,i[12]=e.x,i[13]=e.y,i[14]=e.z,i[15]=1,this}decompose(e,t,n){const i=this.elements;let r=Bo.set(i[0],i[1],i[2]).length();const o=Bo.set(i[4],i[5],i[6]).length(),a=Bo.set(i[8],i[9],i[10]).length();this.determinant()<0&&(r=-r),e.x=i[12],e.y=i[13],e.z=i[14],ki.copy(this);const l=1/r,u=1/o,h=1/a;return ki.elements[0]*=l,ki.elements[1]*=l,ki.elements[2]*=l,ki.elements[4]*=u,ki.elements[5]*=u,ki.elements[6]*=u,ki.elements[8]*=h,ki.elements[9]*=h,ki.elements[10]*=h,t.setFromRotationMatrix(ki),n.x=r,n.y=o,n.z=a,this}makePerspective(e,t,n,i,r,o,a=ni){const c=this.elements,l=2*r/(t-e),u=2*r/(n-i),h=(t+e)/(t-e),d=(n+i)/(n-i);let f,m;if(a===ni)f=-(o+r)/(o-r),m=-2*o*r/(o-r);else if(a===_s)f=-o/(o-r),m=-o*r/(o-r);else throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+a);return c[0]=l,c[4]=0,c[8]=h,c[12]=0,c[1]=0,c[5]=u,c[9]=d,c[13]=0,c[2]=0,c[6]=0,c[10]=f,c[14]=m,c[3]=0,c[7]=0,c[11]=-1,c[15]=0,this}makeOrthographic(e,t,n,i,r,o,a=ni){const c=this.elements,l=1/(t-e),u=1/(n-i),h=1/(o-r),d=(t+e)*l,f=(n+i)*u;let m,_;if(a===ni)m=(o+r)*h,_=-2*h;else if(a===_s)m=r*h,_=-1*h;else throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+a);return c[0]=2*l,c[4]=0,c[8]=0,c[12]=-d,c[1]=0,c[5]=2*u,c[9]=0,c[13]=-f,c[2]=0,c[6]=0,c[10]=_,c[14]=-m,c[3]=0,c[7]=0,c[11]=0,c[15]=1,this}equals(e){const t=this.elements,n=e.elements;for(let i=0;i<16;i++)if(t[i]!==n[i])return!1;return!0}fromArray(e,t=0){for(let n=0;n<16;n++)this.elements[n]=e[n+t];return this}toArray(e=[],t=0){const n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e[t+9]=n[9],e[t+10]=n[10],e[t+11]=n[11],e[t+12]=n[12],e[t+13]=n[13],e[t+14]=n[14],e[t+15]=n[15],e}}const Bo=new U,ki=new ut,Zb=new U(0,0,0),Qb=new U(1,1,1),sr=new U,ql=new U,di=new U,tg=new ut,ng=new Ar;class Mi{constructor(e=0,t=0,n=0,i=Mi.DEFAULT_ORDER){this.isEuler=!0,this._x=e,this._y=t,this._z=n,this._order=i}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get order(){return this._order}set order(e){this._order=e,this._onChangeCallback()}set(e,t,n,i=this._order){return this._x=e,this._y=t,this._z=n,this._order=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(e){return this._x=e._x,this._y=e._y,this._z=e._z,this._order=e._order,this._onChangeCallback(),this}setFromRotationMatrix(e,t=this._order,n=!0){const i=e.elements,r=i[0],o=i[4],a=i[8],c=i[1],l=i[5],u=i[9],h=i[2],d=i[6],f=i[10];switch(t){case"XYZ":this._y=Math.asin(lt(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(-u,f),this._z=Math.atan2(-o,r)):(this._x=Math.atan2(d,l),this._z=0);break;case"YXZ":this._x=Math.asin(-lt(u,-1,1)),Math.abs(u)<.9999999?(this._y=Math.atan2(a,f),this._z=Math.atan2(c,l)):(this._y=Math.atan2(-h,r),this._z=0);break;case"ZXY":this._x=Math.asin(lt(d,-1,1)),Math.abs(d)<.9999999?(this._y=Math.atan2(-h,f),this._z=Math.atan2(-o,l)):(this._y=0,this._z=Math.atan2(c,r));break;case"ZYX":this._y=Math.asin(-lt(h,-1,1)),Math.abs(h)<.9999999?(this._x=Math.atan2(d,f),this._z=Math.atan2(c,r)):(this._x=0,this._z=Math.atan2(-o,l));break;case"YZX":this._z=Math.asin(lt(c,-1,1)),Math.abs(c)<.9999999?(this._x=Math.atan2(-u,l),this._y=Math.atan2(-h,r)):(this._x=0,this._y=Math.atan2(a,f));break;case"XZY":this._z=Math.asin(-lt(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(d,l),this._y=Math.atan2(a,r)):(this._x=Math.atan2(-u,f),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+t)}return this._order=t,n===!0&&this._onChangeCallback(),this}setFromQuaternion(e,t,n){return tg.makeRotationFromQuaternion(e),this.setFromRotationMatrix(tg,t,n)}setFromVector3(e,t=this._order){return this.set(e.x,e.y,e.z,t)}reorder(e){return ng.setFromEuler(this),this.setFromQuaternion(ng,e)}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._order===this._order}fromArray(e){return this._x=e[0],this._y=e[1],this._z=e[2],e[3]!==void 0&&(this._order=e[3]),this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._order,e}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}}Mi.DEFAULT_ORDER="XYZ";class Px{constructor(){this.mask=1}set(e){this.mask=(1<<e|0)>>>0}enable(e){this.mask|=1<<e|0}enableAll(){this.mask=-1}toggle(e){this.mask^=1<<e|0}disable(e){this.mask&=~(1<<e|0)}disableAll(){this.mask=0}test(e){return(this.mask&e.mask)!==0}isEnabled(e){return(this.mask&(1<<e|0))!==0}}let Jb=0;const ig=new U,Oo=new Ar,Ns=new ut,Yl=new U,dc=new U,eM=new U,tM=new Ar,sg=new U(1,0,0),rg=new U(0,1,0),og=new U(0,0,1),ag={type:"added"},nM={type:"removed"},Vo={type:"childadded",child:null},Qh={type:"childremoved",child:null};class mn extends Zs{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:Jb++}),this.uuid=Hs(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=mn.DEFAULT_UP.clone();const e=new U,t=new Mi,n=new Ar,i=new U(1,1,1);function r(){n.setFromEuler(t,!1)}function o(){t.setFromQuaternion(n,void 0,!1)}t._onChange(r),n._onChange(o),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:e},rotation:{configurable:!0,enumerable:!0,value:t},quaternion:{configurable:!0,enumerable:!0,value:n},scale:{configurable:!0,enumerable:!0,value:i},modelViewMatrix:{value:new ut},normalMatrix:{value:new qe}}),this.matrix=new ut,this.matrixWorld=new ut,this.matrixAutoUpdate=mn.DEFAULT_MATRIX_AUTO_UPDATE,this.matrixWorldAutoUpdate=mn.DEFAULT_MATRIX_WORLD_AUTO_UPDATE,this.matrixWorldNeedsUpdate=!1,this.layers=new Px,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeShadow(){}onAfterShadow(){}onBeforeRender(){}onAfterRender(){}applyMatrix4(e){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(e),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(e){return this.quaternion.premultiply(e),this}setRotationFromAxisAngle(e,t){this.quaternion.setFromAxisAngle(e,t)}setRotationFromEuler(e){this.quaternion.setFromEuler(e,!0)}setRotationFromMatrix(e){this.quaternion.setFromRotationMatrix(e)}setRotationFromQuaternion(e){this.quaternion.copy(e)}rotateOnAxis(e,t){return Oo.setFromAxisAngle(e,t),this.quaternion.multiply(Oo),this}rotateOnWorldAxis(e,t){return Oo.setFromAxisAngle(e,t),this.quaternion.premultiply(Oo),this}rotateX(e){return this.rotateOnAxis(sg,e)}rotateY(e){return this.rotateOnAxis(rg,e)}rotateZ(e){return this.rotateOnAxis(og,e)}translateOnAxis(e,t){return ig.copy(e).applyQuaternion(this.quaternion),this.position.add(ig.multiplyScalar(t)),this}translateX(e){return this.translateOnAxis(sg,e)}translateY(e){return this.translateOnAxis(rg,e)}translateZ(e){return this.translateOnAxis(og,e)}localToWorld(e){return this.updateWorldMatrix(!0,!1),e.applyMatrix4(this.matrixWorld)}worldToLocal(e){return this.updateWorldMatrix(!0,!1),e.applyMatrix4(Ns.copy(this.matrixWorld).invert())}lookAt(e,t,n){e.isVector3?Yl.copy(e):Yl.set(e,t,n);const i=this.parent;this.updateWorldMatrix(!0,!1),dc.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?Ns.lookAt(dc,Yl,this.up):Ns.lookAt(Yl,dc,this.up),this.quaternion.setFromRotationMatrix(Ns),i&&(Ns.extractRotation(i.matrixWorld),Oo.setFromRotationMatrix(Ns),this.quaternion.premultiply(Oo.invert()))}add(e){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.add(arguments[t]);return this}return e===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",e),this):(e&&e.isObject3D?(e.removeFromParent(),e.parent=this,this.children.push(e),e.dispatchEvent(ag),Vo.child=e,this.dispatchEvent(Vo),Vo.child=null):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",e),this)}remove(e){if(arguments.length>1){for(let n=0;n<arguments.length;n++)this.remove(arguments[n]);return this}const t=this.children.indexOf(e);return t!==-1&&(e.parent=null,this.children.splice(t,1),e.dispatchEvent(nM),Qh.child=e,this.dispatchEvent(Qh),Qh.child=null),this}removeFromParent(){const e=this.parent;return e!==null&&e.remove(this),this}clear(){return this.remove(...this.children)}attach(e){return this.updateWorldMatrix(!0,!1),Ns.copy(this.matrixWorld).invert(),e.parent!==null&&(e.parent.updateWorldMatrix(!0,!1),Ns.multiply(e.parent.matrixWorld)),e.applyMatrix4(Ns),e.removeFromParent(),e.parent=this,this.children.push(e),e.updateWorldMatrix(!1,!0),e.dispatchEvent(ag),Vo.child=e,this.dispatchEvent(Vo),Vo.child=null,this}getObjectById(e){return this.getObjectByProperty("id",e)}getObjectByName(e){return this.getObjectByProperty("name",e)}getObjectByProperty(e,t){if(this[e]===t)return this;for(let n=0,i=this.children.length;n<i;n++){const o=this.children[n].getObjectByProperty(e,t);if(o!==void 0)return o}}getObjectsByProperty(e,t,n=[]){this[e]===t&&n.push(this);const i=this.children;for(let r=0,o=i.length;r<o;r++)i[r].getObjectsByProperty(e,t,n);return n}getWorldPosition(e){return this.updateWorldMatrix(!0,!1),e.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(dc,e,eM),e}getWorldScale(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(dc,tM,e),e}getWorldDirection(e){this.updateWorldMatrix(!0,!1);const t=this.matrixWorld.elements;return e.set(t[8],t[9],t[10]).normalize()}raycast(){}traverse(e){e(this);const t=this.children;for(let n=0,i=t.length;n<i;n++)t[n].traverse(e)}traverseVisible(e){if(this.visible===!1)return;e(this);const t=this.children;for(let n=0,i=t.length;n<i;n++)t[n].traverseVisible(e)}traverseAncestors(e){const t=this.parent;t!==null&&(e(t),t.traverseAncestors(e))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(e){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||e)&&(this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),this.matrixWorldNeedsUpdate=!1,e=!0);const t=this.children;for(let n=0,i=t.length;n<i;n++)t[n].updateMatrixWorld(e)}updateWorldMatrix(e,t){const n=this.parent;if(e===!0&&n!==null&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),t===!0){const i=this.children;for(let r=0,o=i.length;r<o;r++)i[r].updateWorldMatrix(!1,!0)}}toJSON(e){const t=e===void 0||typeof e=="string",n={};t&&(e={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},n.metadata={version:4.6,type:"Object",generator:"Object3D.toJSON"});const i={};i.uuid=this.uuid,i.type=this.type,this.name!==""&&(i.name=this.name),this.castShadow===!0&&(i.castShadow=!0),this.receiveShadow===!0&&(i.receiveShadow=!0),this.visible===!1&&(i.visible=!1),this.frustumCulled===!1&&(i.frustumCulled=!1),this.renderOrder!==0&&(i.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(i.userData=this.userData),i.layers=this.layers.mask,i.matrix=this.matrix.toArray(),i.up=this.up.toArray(),this.matrixAutoUpdate===!1&&(i.matrixAutoUpdate=!1),this.isInstancedMesh&&(i.type="InstancedMesh",i.count=this.count,i.instanceMatrix=this.instanceMatrix.toJSON(),this.instanceColor!==null&&(i.instanceColor=this.instanceColor.toJSON())),this.isBatchedMesh&&(i.type="BatchedMesh",i.perObjectFrustumCulled=this.perObjectFrustumCulled,i.sortObjects=this.sortObjects,i.drawRanges=this._drawRanges,i.reservedRanges=this._reservedRanges,i.visibility=this._visibility,i.active=this._active,i.bounds=this._bounds.map(a=>({boxInitialized:a.boxInitialized,boxMin:a.box.min.toArray(),boxMax:a.box.max.toArray(),sphereInitialized:a.sphereInitialized,sphereRadius:a.sphere.radius,sphereCenter:a.sphere.center.toArray()})),i.maxInstanceCount=this._maxInstanceCount,i.maxVertexCount=this._maxVertexCount,i.maxIndexCount=this._maxIndexCount,i.geometryInitialized=this._geometryInitialized,i.geometryCount=this._geometryCount,i.matricesTexture=this._matricesTexture.toJSON(e),this._colorsTexture!==null&&(i.colorsTexture=this._colorsTexture.toJSON(e)),this.boundingSphere!==null&&(i.boundingSphere={center:i.boundingSphere.center.toArray(),radius:i.boundingSphere.radius}),this.boundingBox!==null&&(i.boundingBox={min:i.boundingBox.min.toArray(),max:i.boundingBox.max.toArray()}));function r(a,c){return a[c.uuid]===void 0&&(a[c.uuid]=c.toJSON(e)),c.uuid}if(this.isScene)this.background&&(this.background.isColor?i.background=this.background.toJSON():this.background.isTexture&&(i.background=this.background.toJSON(e).uuid)),this.environment&&this.environment.isTexture&&this.environment.isRenderTargetTexture!==!0&&(i.environment=this.environment.toJSON(e).uuid);else if(this.isMesh||this.isLine||this.isPoints){i.geometry=r(e.geometries,this.geometry);const a=this.geometry.parameters;if(a!==void 0&&a.shapes!==void 0){const c=a.shapes;if(Array.isArray(c))for(let l=0,u=c.length;l<u;l++){const h=c[l];r(e.shapes,h)}else r(e.shapes,c)}}if(this.isSkinnedMesh&&(i.bindMode=this.bindMode,i.bindMatrix=this.bindMatrix.toArray(),this.skeleton!==void 0&&(r(e.skeletons,this.skeleton),i.skeleton=this.skeleton.uuid)),this.material!==void 0)if(Array.isArray(this.material)){const a=[];for(let c=0,l=this.material.length;c<l;c++)a.push(r(e.materials,this.material[c]));i.material=a}else i.material=r(e.materials,this.material);if(this.children.length>0){i.children=[];for(let a=0;a<this.children.length;a++)i.children.push(this.children[a].toJSON(e).object)}if(this.animations.length>0){i.animations=[];for(let a=0;a<this.animations.length;a++){const c=this.animations[a];i.animations.push(r(e.animations,c))}}if(t){const a=o(e.geometries),c=o(e.materials),l=o(e.textures),u=o(e.images),h=o(e.shapes),d=o(e.skeletons),f=o(e.animations),m=o(e.nodes);a.length>0&&(n.geometries=a),c.length>0&&(n.materials=c),l.length>0&&(n.textures=l),u.length>0&&(n.images=u),h.length>0&&(n.shapes=h),d.length>0&&(n.skeletons=d),f.length>0&&(n.animations=f),m.length>0&&(n.nodes=m)}return n.object=i,n;function o(a){const c=[];for(const l in a){const u=a[l];delete u.metadata,c.push(u)}return c}}clone(e){return new this.constructor().copy(this,e)}copy(e,t=!0){if(this.name=e.name,this.up.copy(e.up),this.position.copy(e.position),this.rotation.order=e.rotation.order,this.quaternion.copy(e.quaternion),this.scale.copy(e.scale),this.matrix.copy(e.matrix),this.matrixWorld.copy(e.matrixWorld),this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrixWorldAutoUpdate=e.matrixWorldAutoUpdate,this.matrixWorldNeedsUpdate=e.matrixWorldNeedsUpdate,this.layers.mask=e.layers.mask,this.visible=e.visible,this.castShadow=e.castShadow,this.receiveShadow=e.receiveShadow,this.frustumCulled=e.frustumCulled,this.renderOrder=e.renderOrder,this.animations=e.animations.slice(),this.userData=JSON.parse(JSON.stringify(e.userData)),t===!0)for(let n=0;n<e.children.length;n++){const i=e.children[n];this.add(i.clone())}return this}}mn.DEFAULT_UP=new U(0,1,0);mn.DEFAULT_MATRIX_AUTO_UPDATE=!0;mn.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0;const Hi=new U,Cs=new U,Jh=new U,Ps=new U,Go=new U,zo=new U,cg=new U,ed=new U,td=new U,nd=new U,id=new je,sd=new je,rd=new je;class qi{constructor(e=new U,t=new U,n=new U){this.a=e,this.b=t,this.c=n}static getNormal(e,t,n,i){i.subVectors(n,t),Hi.subVectors(e,t),i.cross(Hi);const r=i.lengthSq();return r>0?i.multiplyScalar(1/Math.sqrt(r)):i.set(0,0,0)}static getBarycoord(e,t,n,i,r){Hi.subVectors(i,t),Cs.subVectors(n,t),Jh.subVectors(e,t);const o=Hi.dot(Hi),a=Hi.dot(Cs),c=Hi.dot(Jh),l=Cs.dot(Cs),u=Cs.dot(Jh),h=o*l-a*a;if(h===0)return r.set(0,0,0),null;const d=1/h,f=(l*c-a*u)*d,m=(o*u-a*c)*d;return r.set(1-f-m,m,f)}static containsPoint(e,t,n,i){return this.getBarycoord(e,t,n,i,Ps)===null?!1:Ps.x>=0&&Ps.y>=0&&Ps.x+Ps.y<=1}static getInterpolation(e,t,n,i,r,o,a,c){return this.getBarycoord(e,t,n,i,Ps)===null?(c.x=0,c.y=0,"z"in c&&(c.z=0),"w"in c&&(c.w=0),null):(c.setScalar(0),c.addScaledVector(r,Ps.x),c.addScaledVector(o,Ps.y),c.addScaledVector(a,Ps.z),c)}static getInterpolatedAttribute(e,t,n,i,r,o){return id.setScalar(0),sd.setScalar(0),rd.setScalar(0),id.fromBufferAttribute(e,t),sd.fromBufferAttribute(e,n),rd.fromBufferAttribute(e,i),o.setScalar(0),o.addScaledVector(id,r.x),o.addScaledVector(sd,r.y),o.addScaledVector(rd,r.z),o}static isFrontFacing(e,t,n,i){return Hi.subVectors(n,t),Cs.subVectors(e,t),Hi.cross(Cs).dot(i)<0}set(e,t,n){return this.a.copy(e),this.b.copy(t),this.c.copy(n),this}setFromPointsAndIndices(e,t,n,i){return this.a.copy(e[t]),this.b.copy(e[n]),this.c.copy(e[i]),this}setFromAttributeAndIndices(e,t,n,i){return this.a.fromBufferAttribute(e,t),this.b.fromBufferAttribute(e,n),this.c.fromBufferAttribute(e,i),this}clone(){return new this.constructor().copy(this)}copy(e){return this.a.copy(e.a),this.b.copy(e.b),this.c.copy(e.c),this}getArea(){return Hi.subVectors(this.c,this.b),Cs.subVectors(this.a,this.b),Hi.cross(Cs).length()*.5}getMidpoint(e){return e.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(e){return qi.getNormal(this.a,this.b,this.c,e)}getPlane(e){return e.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(e,t){return qi.getBarycoord(e,this.a,this.b,this.c,t)}getInterpolation(e,t,n,i,r){return qi.getInterpolation(e,this.a,this.b,this.c,t,n,i,r)}containsPoint(e){return qi.containsPoint(e,this.a,this.b,this.c)}isFrontFacing(e){return qi.isFrontFacing(this.a,this.b,this.c,e)}intersectsBox(e){return e.intersectsTriangle(this)}closestPointToPoint(e,t){const n=this.a,i=this.b,r=this.c;let o,a;Go.subVectors(i,n),zo.subVectors(r,n),ed.subVectors(e,n);const c=Go.dot(ed),l=zo.dot(ed);if(c<=0&&l<=0)return t.copy(n);td.subVectors(e,i);const u=Go.dot(td),h=zo.dot(td);if(u>=0&&h<=u)return t.copy(i);const d=c*h-u*l;if(d<=0&&c>=0&&u<=0)return o=c/(c-u),t.copy(n).addScaledVector(Go,o);nd.subVectors(e,r);const f=Go.dot(nd),m=zo.dot(nd);if(m>=0&&f<=m)return t.copy(r);const _=f*l-c*m;if(_<=0&&l>=0&&m<=0)return a=l/(l-m),t.copy(n).addScaledVector(zo,a);const g=u*m-f*h;if(g<=0&&h-u>=0&&f-m>=0)return cg.subVectors(r,i),a=(h-u)/(h-u+(f-m)),t.copy(i).addScaledVector(cg,a);const p=1/(g+_+d);return o=_*p,a=d*p,t.copy(n).addScaledVector(Go,o).addScaledVector(zo,a)}equals(e){return e.a.equals(this.a)&&e.b.equals(this.b)&&e.c.equals(this.c)}}const Dx={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},rr={h:0,s:0,l:0},jl={h:0,s:0,l:0};function od(s,e,t){return t<0&&(t+=1),t>1&&(t-=1),t<1/6?s+(e-s)*6*t:t<1/2?e:t<2/3?s+(e-s)*6*(2/3-t):s}class De{constructor(e,t,n){return this.isColor=!0,this.r=1,this.g=1,this.b=1,this.set(e,t,n)}set(e,t,n){if(t===void 0&&n===void 0){const i=e;i&&i.isColor?this.copy(i):typeof i=="number"?this.setHex(i):typeof i=="string"&&this.setStyle(i)}else this.setRGB(e,t,n);return this}setScalar(e){return this.r=e,this.g=e,this.b=e,this}setHex(e,t=Oe){return e=Math.floor(e),this.r=(e>>16&255)/255,this.g=(e>>8&255)/255,this.b=(e&255)/255,rt.toWorkingColorSpace(this,t),this}setRGB(e,t,n,i=rt.workingColorSpace){return this.r=e,this.g=t,this.b=n,rt.toWorkingColorSpace(this,i),this}setHSL(e,t,n,i=rt.workingColorSpace){if(e=op(e,1),t=lt(t,0,1),n=lt(n,0,1),t===0)this.r=this.g=this.b=n;else{const r=n<=.5?n*(1+t):n+t-n*t,o=2*n-r;this.r=od(o,r,e+1/3),this.g=od(o,r,e),this.b=od(o,r,e-1/3)}return rt.toWorkingColorSpace(this,i),this}setStyle(e,t=Oe){function n(r){r!==void 0&&parseFloat(r)<1&&console.warn("THREE.Color: Alpha component of "+e+" will be ignored.")}let i;if(i=/^(\w+)\(([^\)]*)\)/.exec(e)){let r;const o=i[1],a=i[2];switch(o){case"rgb":case"rgba":if(r=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return n(r[4]),this.setRGB(Math.min(255,parseInt(r[1],10))/255,Math.min(255,parseInt(r[2],10))/255,Math.min(255,parseInt(r[3],10))/255,t);if(r=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return n(r[4]),this.setRGB(Math.min(100,parseInt(r[1],10))/100,Math.min(100,parseInt(r[2],10))/100,Math.min(100,parseInt(r[3],10))/100,t);break;case"hsl":case"hsla":if(r=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return n(r[4]),this.setHSL(parseFloat(r[1])/360,parseFloat(r[2])/100,parseFloat(r[3])/100,t);break;default:console.warn("THREE.Color: Unknown color model "+e)}}else if(i=/^\#([A-Fa-f\d]+)$/.exec(e)){const r=i[1],o=r.length;if(o===3)return this.setRGB(parseInt(r.charAt(0),16)/15,parseInt(r.charAt(1),16)/15,parseInt(r.charAt(2),16)/15,t);if(o===6)return this.setHex(parseInt(r,16),t);console.warn("THREE.Color: Invalid hex color "+e)}else if(e&&e.length>0)return this.setColorName(e,t);return this}setColorName(e,t=Oe){const n=Dx[e.toLowerCase()];return n!==void 0?this.setHex(n,t):console.warn("THREE.Color: Unknown color "+e),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(e){return this.r=e.r,this.g=e.g,this.b=e.b,this}copySRGBToLinear(e){return this.r=Ws(e.r),this.g=Ws(e.g),this.b=Ws(e.b),this}copyLinearToSRGB(e){return this.r=da(e.r),this.g=da(e.g),this.b=da(e.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(e=Oe){return rt.fromWorkingColorSpace(In.copy(this),e),Math.round(lt(In.r*255,0,255))*65536+Math.round(lt(In.g*255,0,255))*256+Math.round(lt(In.b*255,0,255))}getHexString(e=Oe){return("000000"+this.getHex(e).toString(16)).slice(-6)}getHSL(e,t=rt.workingColorSpace){rt.fromWorkingColorSpace(In.copy(this),t);const n=In.r,i=In.g,r=In.b,o=Math.max(n,i,r),a=Math.min(n,i,r);let c,l;const u=(a+o)/2;if(a===o)c=0,l=0;else{const h=o-a;switch(l=u<=.5?h/(o+a):h/(2-o-a),o){case n:c=(i-r)/h+(i<r?6:0);break;case i:c=(r-n)/h+2;break;case r:c=(n-i)/h+4;break}c/=6}return e.h=c,e.s=l,e.l=u,e}getRGB(e,t=rt.workingColorSpace){return rt.fromWorkingColorSpace(In.copy(this),t),e.r=In.r,e.g=In.g,e.b=In.b,e}getStyle(e=Oe){rt.fromWorkingColorSpace(In.copy(this),e);const t=In.r,n=In.g,i=In.b;return e!==Oe?`color(${e} ${t.toFixed(3)} ${n.toFixed(3)} ${i.toFixed(3)})`:`rgb(${Math.round(t*255)},${Math.round(n*255)},${Math.round(i*255)})`}offsetHSL(e,t,n){return this.getHSL(rr),this.setHSL(rr.h+e,rr.s+t,rr.l+n)}add(e){return this.r+=e.r,this.g+=e.g,this.b+=e.b,this}addColors(e,t){return this.r=e.r+t.r,this.g=e.g+t.g,this.b=e.b+t.b,this}addScalar(e){return this.r+=e,this.g+=e,this.b+=e,this}sub(e){return this.r=Math.max(0,this.r-e.r),this.g=Math.max(0,this.g-e.g),this.b=Math.max(0,this.b-e.b),this}multiply(e){return this.r*=e.r,this.g*=e.g,this.b*=e.b,this}multiplyScalar(e){return this.r*=e,this.g*=e,this.b*=e,this}lerp(e,t){return this.r+=(e.r-this.r)*t,this.g+=(e.g-this.g)*t,this.b+=(e.b-this.b)*t,this}lerpColors(e,t,n){return this.r=e.r+(t.r-e.r)*n,this.g=e.g+(t.g-e.g)*n,this.b=e.b+(t.b-e.b)*n,this}lerpHSL(e,t){this.getHSL(rr),e.getHSL(jl);const n=Nc(rr.h,jl.h,t),i=Nc(rr.s,jl.s,t),r=Nc(rr.l,jl.l,t);return this.setHSL(n,i,r),this}setFromVector3(e){return this.r=e.x,this.g=e.y,this.b=e.z,this}applyMatrix3(e){const t=this.r,n=this.g,i=this.b,r=e.elements;return this.r=r[0]*t+r[3]*n+r[6]*i,this.g=r[1]*t+r[4]*n+r[7]*i,this.b=r[2]*t+r[5]*n+r[8]*i,this}equals(e){return e.r===this.r&&e.g===this.g&&e.b===this.b}fromArray(e,t=0){return this.r=e[t],this.g=e[t+1],this.b=e[t+2],this}toArray(e=[],t=0){return e[t]=this.r,e[t+1]=this.g,e[t+2]=this.b,e}fromBufferAttribute(e,t){return this.r=e.getX(t),this.g=e.getY(t),this.b=e.getZ(t),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}}const In=new De;De.NAMES=Dx;let iM=0;class Hn extends Zs{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:iM++}),this.uuid=Hs(),this.name="",this.type="Material",this.blending=Ui,this.side=Ki,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.alphaHash=!1,this.blendSrc=Vc,this.blendDst=Gc,this.blendEquation=vi,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.blendColor=new De(0,0,0),this.blendAlpha=0,this.depthFunc=br,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=af,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=Xr,this.stencilZFail=Xr,this.stencilZPass=Xr,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.forceSinglePass=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(e){this._alphaTest>0!=e>0&&this.version++,this._alphaTest=e}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(e){if(e!==void 0)for(const t in e){const n=e[t];if(n===void 0){console.warn(`THREE.Material: parameter '${t}' has value of undefined.`);continue}const i=this[t];if(i===void 0){console.warn(`THREE.Material: '${t}' is not a property of THREE.${this.type}.`);continue}i&&i.isColor?i.set(n):i&&i.isVector3&&n&&n.isVector3?i.copy(n):this[t]=n}}toJSON(e){const t=e===void 0||typeof e=="string";t&&(e={textures:{},images:{}});const n={metadata:{version:4.6,type:"Material",generator:"Material.toJSON"}};n.uuid=this.uuid,n.type=this.type,this.name!==""&&(n.name=this.name),this.color&&this.color.isColor&&(n.color=this.color.getHex()),this.roughness!==void 0&&(n.roughness=this.roughness),this.metalness!==void 0&&(n.metalness=this.metalness),this.sheen!==void 0&&(n.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(n.sheenColor=this.sheenColor.getHex()),this.sheenRoughness!==void 0&&(n.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(n.emissive=this.emissive.getHex()),this.emissiveIntensity!==void 0&&this.emissiveIntensity!==1&&(n.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(n.specular=this.specular.getHex()),this.specularIntensity!==void 0&&(n.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(n.specularColor=this.specularColor.getHex()),this.shininess!==void 0&&(n.shininess=this.shininess),this.clearcoat!==void 0&&(n.clearcoat=this.clearcoat),this.clearcoatRoughness!==void 0&&(n.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(n.clearcoatMap=this.clearcoatMap.toJSON(e).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(n.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(e).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(n.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(e).uuid,n.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.dispersion!==void 0&&(n.dispersion=this.dispersion),this.iridescence!==void 0&&(n.iridescence=this.iridescence),this.iridescenceIOR!==void 0&&(n.iridescenceIOR=this.iridescenceIOR),this.iridescenceThicknessRange!==void 0&&(n.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(n.iridescenceMap=this.iridescenceMap.toJSON(e).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(n.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(e).uuid),this.anisotropy!==void 0&&(n.anisotropy=this.anisotropy),this.anisotropyRotation!==void 0&&(n.anisotropyRotation=this.anisotropyRotation),this.anisotropyMap&&this.anisotropyMap.isTexture&&(n.anisotropyMap=this.anisotropyMap.toJSON(e).uuid),this.map&&this.map.isTexture&&(n.map=this.map.toJSON(e).uuid),this.matcap&&this.matcap.isTexture&&(n.matcap=this.matcap.toJSON(e).uuid),this.alphaMap&&this.alphaMap.isTexture&&(n.alphaMap=this.alphaMap.toJSON(e).uuid),this.lightMap&&this.lightMap.isTexture&&(n.lightMap=this.lightMap.toJSON(e).uuid,n.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(n.aoMap=this.aoMap.toJSON(e).uuid,n.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(n.bumpMap=this.bumpMap.toJSON(e).uuid,n.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(n.normalMap=this.normalMap.toJSON(e).uuid,n.normalMapType=this.normalMapType,n.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(n.displacementMap=this.displacementMap.toJSON(e).uuid,n.displacementScale=this.displacementScale,n.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(n.roughnessMap=this.roughnessMap.toJSON(e).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(n.metalnessMap=this.metalnessMap.toJSON(e).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(n.emissiveMap=this.emissiveMap.toJSON(e).uuid),this.specularMap&&this.specularMap.isTexture&&(n.specularMap=this.specularMap.toJSON(e).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(n.specularIntensityMap=this.specularIntensityMap.toJSON(e).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(n.specularColorMap=this.specularColorMap.toJSON(e).uuid),this.envMap&&this.envMap.isTexture&&(n.envMap=this.envMap.toJSON(e).uuid,this.combine!==void 0&&(n.combine=this.combine)),this.envMapRotation!==void 0&&(n.envMapRotation=this.envMapRotation.toArray()),this.envMapIntensity!==void 0&&(n.envMapIntensity=this.envMapIntensity),this.reflectivity!==void 0&&(n.reflectivity=this.reflectivity),this.refractionRatio!==void 0&&(n.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(n.gradientMap=this.gradientMap.toJSON(e).uuid),this.transmission!==void 0&&(n.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(n.transmissionMap=this.transmissionMap.toJSON(e).uuid),this.thickness!==void 0&&(n.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(n.thicknessMap=this.thicknessMap.toJSON(e).uuid),this.attenuationDistance!==void 0&&this.attenuationDistance!==1/0&&(n.attenuationDistance=this.attenuationDistance),this.attenuationColor!==void 0&&(n.attenuationColor=this.attenuationColor.getHex()),this.size!==void 0&&(n.size=this.size),this.shadowSide!==null&&(n.shadowSide=this.shadowSide),this.sizeAttenuation!==void 0&&(n.sizeAttenuation=this.sizeAttenuation),this.blending!==Ui&&(n.blending=this.blending),this.side!==Ki&&(n.side=this.side),this.vertexColors===!0&&(n.vertexColors=!0),this.opacity<1&&(n.opacity=this.opacity),this.transparent===!0&&(n.transparent=!0),this.blendSrc!==Vc&&(n.blendSrc=this.blendSrc),this.blendDst!==Gc&&(n.blendDst=this.blendDst),this.blendEquation!==vi&&(n.blendEquation=this.blendEquation),this.blendSrcAlpha!==null&&(n.blendSrcAlpha=this.blendSrcAlpha),this.blendDstAlpha!==null&&(n.blendDstAlpha=this.blendDstAlpha),this.blendEquationAlpha!==null&&(n.blendEquationAlpha=this.blendEquationAlpha),this.blendColor&&this.blendColor.isColor&&(n.blendColor=this.blendColor.getHex()),this.blendAlpha!==0&&(n.blendAlpha=this.blendAlpha),this.depthFunc!==br&&(n.depthFunc=this.depthFunc),this.depthTest===!1&&(n.depthTest=this.depthTest),this.depthWrite===!1&&(n.depthWrite=this.depthWrite),this.colorWrite===!1&&(n.colorWrite=this.colorWrite),this.stencilWriteMask!==255&&(n.stencilWriteMask=this.stencilWriteMask),this.stencilFunc!==af&&(n.stencilFunc=this.stencilFunc),this.stencilRef!==0&&(n.stencilRef=this.stencilRef),this.stencilFuncMask!==255&&(n.stencilFuncMask=this.stencilFuncMask),this.stencilFail!==Xr&&(n.stencilFail=this.stencilFail),this.stencilZFail!==Xr&&(n.stencilZFail=this.stencilZFail),this.stencilZPass!==Xr&&(n.stencilZPass=this.stencilZPass),this.stencilWrite===!0&&(n.stencilWrite=this.stencilWrite),this.rotation!==void 0&&this.rotation!==0&&(n.rotation=this.rotation),this.polygonOffset===!0&&(n.polygonOffset=!0),this.polygonOffsetFactor!==0&&(n.polygonOffsetFactor=this.polygonOffsetFactor),this.polygonOffsetUnits!==0&&(n.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth!==void 0&&this.linewidth!==1&&(n.linewidth=this.linewidth),this.dashSize!==void 0&&(n.dashSize=this.dashSize),this.gapSize!==void 0&&(n.gapSize=this.gapSize),this.scale!==void 0&&(n.scale=this.scale),this.dithering===!0&&(n.dithering=!0),this.alphaTest>0&&(n.alphaTest=this.alphaTest),this.alphaHash===!0&&(n.alphaHash=!0),this.alphaToCoverage===!0&&(n.alphaToCoverage=!0),this.premultipliedAlpha===!0&&(n.premultipliedAlpha=!0),this.forceSinglePass===!0&&(n.forceSinglePass=!0),this.wireframe===!0&&(n.wireframe=!0),this.wireframeLinewidth>1&&(n.wireframeLinewidth=this.wireframeLinewidth),this.wireframeLinecap!=="round"&&(n.wireframeLinecap=this.wireframeLinecap),this.wireframeLinejoin!=="round"&&(n.wireframeLinejoin=this.wireframeLinejoin),this.flatShading===!0&&(n.flatShading=!0),this.visible===!1&&(n.visible=!1),this.toneMapped===!1&&(n.toneMapped=!1),this.fog===!1&&(n.fog=!1),Object.keys(this.userData).length>0&&(n.userData=this.userData);function i(r){const o=[];for(const a in r){const c=r[a];delete c.metadata,o.push(c)}return o}if(t){const r=i(e.textures),o=i(e.images);r.length>0&&(n.textures=r),o.length>0&&(n.images=o)}return n}clone(){return new this.constructor().copy(this)}copy(e){this.name=e.name,this.blending=e.blending,this.side=e.side,this.vertexColors=e.vertexColors,this.opacity=e.opacity,this.transparent=e.transparent,this.blendSrc=e.blendSrc,this.blendDst=e.blendDst,this.blendEquation=e.blendEquation,this.blendSrcAlpha=e.blendSrcAlpha,this.blendDstAlpha=e.blendDstAlpha,this.blendEquationAlpha=e.blendEquationAlpha,this.blendColor.copy(e.blendColor),this.blendAlpha=e.blendAlpha,this.depthFunc=e.depthFunc,this.depthTest=e.depthTest,this.depthWrite=e.depthWrite,this.stencilWriteMask=e.stencilWriteMask,this.stencilFunc=e.stencilFunc,this.stencilRef=e.stencilRef,this.stencilFuncMask=e.stencilFuncMask,this.stencilFail=e.stencilFail,this.stencilZFail=e.stencilZFail,this.stencilZPass=e.stencilZPass,this.stencilWrite=e.stencilWrite;const t=e.clippingPlanes;let n=null;if(t!==null){const i=t.length;n=new Array(i);for(let r=0;r!==i;++r)n[r]=t[r].clone()}return this.clippingPlanes=n,this.clipIntersection=e.clipIntersection,this.clipShadows=e.clipShadows,this.shadowSide=e.shadowSide,this.colorWrite=e.colorWrite,this.precision=e.precision,this.polygonOffset=e.polygonOffset,this.polygonOffsetFactor=e.polygonOffsetFactor,this.polygonOffsetUnits=e.polygonOffsetUnits,this.dithering=e.dithering,this.alphaTest=e.alphaTest,this.alphaHash=e.alphaHash,this.alphaToCoverage=e.alphaToCoverage,this.premultipliedAlpha=e.premultipliedAlpha,this.forceSinglePass=e.forceSinglePass,this.visible=e.visible,this.toneMapped=e.toneMapped,this.userData=JSON.parse(JSON.stringify(e.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(e){e===!0&&this.version++}onBuild(){console.warn("Material: onBuild() has been removed.")}}class uh extends Hn{constructor(e){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new De(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new Mi,this.combine=vl,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapRotation.copy(e.envMapRotation),this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.fog=e.fog,this}}const Gs=sM();function sM(){const s=new ArrayBuffer(4),e=new Float32Array(s),t=new Uint32Array(s),n=new Uint32Array(512),i=new Uint32Array(512);for(let c=0;c<256;++c){const l=c-127;l<-27?(n[c]=0,n[c|256]=32768,i[c]=24,i[c|256]=24):l<-14?(n[c]=1024>>-l-14,n[c|256]=1024>>-l-14|32768,i[c]=-l-1,i[c|256]=-l-1):l<=15?(n[c]=l+15<<10,n[c|256]=l+15<<10|32768,i[c]=13,i[c|256]=13):l<128?(n[c]=31744,n[c|256]=64512,i[c]=24,i[c|256]=24):(n[c]=31744,n[c|256]=64512,i[c]=13,i[c|256]=13)}const r=new Uint32Array(2048),o=new Uint32Array(64),a=new Uint32Array(64);for(let c=1;c<1024;++c){let l=c<<13,u=0;for(;!(l&8388608);)l<<=1,u-=8388608;l&=-8388609,u+=947912704,r[c]=l|u}for(let c=1024;c<2048;++c)r[c]=939524096+(c-1024<<13);for(let c=1;c<31;++c)o[c]=c<<23;o[31]=1199570944,o[32]=2147483648;for(let c=33;c<63;++c)o[c]=2147483648+(c-32<<23);o[63]=3347054592;for(let c=1;c<64;++c)c!==32&&(a[c]=1024);return{floatView:e,uint32View:t,baseTable:n,shiftTable:i,mantissaTable:r,exponentTable:o,offsetTable:a}}function fi(s){Math.abs(s)>65504&&console.warn("THREE.DataUtils.toHalfFloat(): Value out of range."),s=lt(s,-65504,65504),Gs.floatView[0]=s;const e=Gs.uint32View[0],t=e>>23&511;return Gs.baseTable[t]+((e&8388607)>>Gs.shiftTable[t])}function Kl(s){const e=s>>10;return Gs.uint32View[0]=Gs.mantissaTable[Gs.offsetTable[e]+(s&1023)]+Gs.exponentTable[e],Gs.floatView[0]}const hn=new U,Zl=new Ee;class Pn{constructor(e,t,n=!1){if(Array.isArray(e))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,this.name="",this.array=e,this.itemSize=t,this.count=e!==void 0?e.length/t:0,this.normalized=n,this.usage=zu,this.updateRanges=[],this.gpuType=rn,this.version=0}onUploadCallback(){}set needsUpdate(e){e===!0&&this.version++}setUsage(e){return this.usage=e,this}addUpdateRange(e,t){this.updateRanges.push({start:e,count:t})}clearUpdateRanges(){this.updateRanges.length=0}copy(e){return this.name=e.name,this.array=new e.array.constructor(e.array),this.itemSize=e.itemSize,this.count=e.count,this.normalized=e.normalized,this.usage=e.usage,this.gpuType=e.gpuType,this}copyAt(e,t,n){e*=this.itemSize,n*=t.itemSize;for(let i=0,r=this.itemSize;i<r;i++)this.array[e+i]=t.array[n+i];return this}copyArray(e){return this.array.set(e),this}applyMatrix3(e){if(this.itemSize===2)for(let t=0,n=this.count;t<n;t++)Zl.fromBufferAttribute(this,t),Zl.applyMatrix3(e),this.setXY(t,Zl.x,Zl.y);else if(this.itemSize===3)for(let t=0,n=this.count;t<n;t++)hn.fromBufferAttribute(this,t),hn.applyMatrix3(e),this.setXYZ(t,hn.x,hn.y,hn.z);return this}applyMatrix4(e){for(let t=0,n=this.count;t<n;t++)hn.fromBufferAttribute(this,t),hn.applyMatrix4(e),this.setXYZ(t,hn.x,hn.y,hn.z);return this}applyNormalMatrix(e){for(let t=0,n=this.count;t<n;t++)hn.fromBufferAttribute(this,t),hn.applyNormalMatrix(e),this.setXYZ(t,hn.x,hn.y,hn.z);return this}transformDirection(e){for(let t=0,n=this.count;t<n;t++)hn.fromBufferAttribute(this,t),hn.transformDirection(e),this.setXYZ(t,hn.x,hn.y,hn.z);return this}set(e,t=0){return this.array.set(e,t),this}getComponent(e,t){let n=this.array[e*this.itemSize+t];return this.normalized&&(n=jn(n,this.array)),n}setComponent(e,t,n){return this.normalized&&(n=st(n,this.array)),this.array[e*this.itemSize+t]=n,this}getX(e){let t=this.array[e*this.itemSize];return this.normalized&&(t=jn(t,this.array)),t}setX(e,t){return this.normalized&&(t=st(t,this.array)),this.array[e*this.itemSize]=t,this}getY(e){let t=this.array[e*this.itemSize+1];return this.normalized&&(t=jn(t,this.array)),t}setY(e,t){return this.normalized&&(t=st(t,this.array)),this.array[e*this.itemSize+1]=t,this}getZ(e){let t=this.array[e*this.itemSize+2];return this.normalized&&(t=jn(t,this.array)),t}setZ(e,t){return this.normalized&&(t=st(t,this.array)),this.array[e*this.itemSize+2]=t,this}getW(e){let t=this.array[e*this.itemSize+3];return this.normalized&&(t=jn(t,this.array)),t}setW(e,t){return this.normalized&&(t=st(t,this.array)),this.array[e*this.itemSize+3]=t,this}setXY(e,t,n){return e*=this.itemSize,this.normalized&&(t=st(t,this.array),n=st(n,this.array)),this.array[e+0]=t,this.array[e+1]=n,this}setXYZ(e,t,n,i){return e*=this.itemSize,this.normalized&&(t=st(t,this.array),n=st(n,this.array),i=st(i,this.array)),this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=i,this}setXYZW(e,t,n,i,r){return e*=this.itemSize,this.normalized&&(t=st(t,this.array),n=st(n,this.array),i=st(i,this.array),r=st(r,this.array)),this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=i,this.array[e+3]=r,this}onUpload(e){return this.onUploadCallback=e,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const e={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return this.name!==""&&(e.name=this.name),this.usage!==zu&&(e.usage=this.usage),e}}class up extends Pn{constructor(e,t,n){super(new Uint16Array(e),t,n)}}class hp extends Pn{constructor(e,t,n){super(new Uint32Array(e),t,n)}}class Lx extends Pn{constructor(e,t,n){super(new Uint16Array(e),t,n),this.isFloat16BufferAttribute=!0}getX(e){let t=Kl(this.array[e*this.itemSize]);return this.normalized&&(t=jn(t,this.array)),t}setX(e,t){return this.normalized&&(t=st(t,this.array)),this.array[e*this.itemSize]=fi(t),this}getY(e){let t=Kl(this.array[e*this.itemSize+1]);return this.normalized&&(t=jn(t,this.array)),t}setY(e,t){return this.normalized&&(t=st(t,this.array)),this.array[e*this.itemSize+1]=fi(t),this}getZ(e){let t=Kl(this.array[e*this.itemSize+2]);return this.normalized&&(t=jn(t,this.array)),t}setZ(e,t){return this.normalized&&(t=st(t,this.array)),this.array[e*this.itemSize+2]=fi(t),this}getW(e){let t=Kl(this.array[e*this.itemSize+3]);return this.normalized&&(t=jn(t,this.array)),t}setW(e,t){return this.normalized&&(t=st(t,this.array)),this.array[e*this.itemSize+3]=fi(t),this}setXY(e,t,n){return e*=this.itemSize,this.normalized&&(t=st(t,this.array),n=st(n,this.array)),this.array[e+0]=fi(t),this.array[e+1]=fi(n),this}setXYZ(e,t,n,i){return e*=this.itemSize,this.normalized&&(t=st(t,this.array),n=st(n,this.array),i=st(i,this.array)),this.array[e+0]=fi(t),this.array[e+1]=fi(n),this.array[e+2]=fi(i),this}setXYZW(e,t,n,i,r){return e*=this.itemSize,this.normalized&&(t=st(t,this.array),n=st(n,this.array),i=st(i,this.array),r=st(r,this.array)),this.array[e+0]=fi(t),this.array[e+1]=fi(n),this.array[e+2]=fi(i),this.array[e+3]=fi(r),this}}class oi extends Pn{constructor(e,t,n){super(new Float32Array(e),t,n)}}let rM=0;const wi=new ut,ad=new mn,ko=new U,pi=new bl,fc=new bl,Sn=new U;class Qi extends Zs{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:rM++}),this.uuid=Hs(),this.name="",this.type="BufferGeometry",this.index=null,this.indirect=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(e){return Array.isArray(e)?this.index=new(Rx(e)?hp:up)(e,1):this.index=e,this}setIndirect(e){return this.indirect=e,this}getIndirect(){return this.indirect}getAttribute(e){return this.attributes[e]}setAttribute(e,t){return this.attributes[e]=t,this}deleteAttribute(e){return delete this.attributes[e],this}hasAttribute(e){return this.attributes[e]!==void 0}addGroup(e,t,n=0){this.groups.push({start:e,count:t,materialIndex:n})}clearGroups(){this.groups=[]}setDrawRange(e,t){this.drawRange.start=e,this.drawRange.count=t}applyMatrix4(e){const t=this.attributes.position;t!==void 0&&(t.applyMatrix4(e),t.needsUpdate=!0);const n=this.attributes.normal;if(n!==void 0){const r=new qe().getNormalMatrix(e);n.applyNormalMatrix(r),n.needsUpdate=!0}const i=this.attributes.tangent;return i!==void 0&&(i.transformDirection(e),i.needsUpdate=!0),this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this}applyQuaternion(e){return wi.makeRotationFromQuaternion(e),this.applyMatrix4(wi),this}rotateX(e){return wi.makeRotationX(e),this.applyMatrix4(wi),this}rotateY(e){return wi.makeRotationY(e),this.applyMatrix4(wi),this}rotateZ(e){return wi.makeRotationZ(e),this.applyMatrix4(wi),this}translate(e,t,n){return wi.makeTranslation(e,t,n),this.applyMatrix4(wi),this}scale(e,t,n){return wi.makeScale(e,t,n),this.applyMatrix4(wi),this}lookAt(e){return ad.lookAt(e),ad.updateMatrix(),this.applyMatrix4(ad.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(ko).negate(),this.translate(ko.x,ko.y,ko.z),this}setFromPoints(e){const t=this.getAttribute("position");if(t===void 0){const n=[];for(let i=0,r=e.length;i<r;i++){const o=e[i];n.push(o.x,o.y,o.z||0)}this.setAttribute("position",new oi(n,3))}else{const n=Math.min(e.length,t.count);for(let i=0;i<n;i++){const r=e[i];t.setXYZ(i,r.x,r.y,r.z||0)}e.length>t.count&&console.warn("THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry."),t.needsUpdate=!0}return this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new bl);const e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.",this),this.boundingBox.set(new U(-1/0,-1/0,-1/0),new U(1/0,1/0,1/0));return}if(e!==void 0){if(this.boundingBox.setFromBufferAttribute(e),t)for(let n=0,i=t.length;n<i;n++){const r=t[n];pi.setFromBufferAttribute(r),this.morphTargetsRelative?(Sn.addVectors(this.boundingBox.min,pi.min),this.boundingBox.expandByPoint(Sn),Sn.addVectors(this.boundingBox.max,pi.max),this.boundingBox.expandByPoint(Sn)):(this.boundingBox.expandByPoint(pi.min),this.boundingBox.expandByPoint(pi.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new lp);const e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.",this),this.boundingSphere.set(new U,1/0);return}if(e){const n=this.boundingSphere.center;if(pi.setFromBufferAttribute(e),t)for(let r=0,o=t.length;r<o;r++){const a=t[r];fc.setFromBufferAttribute(a),this.morphTargetsRelative?(Sn.addVectors(pi.min,fc.min),pi.expandByPoint(Sn),Sn.addVectors(pi.max,fc.max),pi.expandByPoint(Sn)):(pi.expandByPoint(fc.min),pi.expandByPoint(fc.max))}pi.getCenter(n);let i=0;for(let r=0,o=e.count;r<o;r++)Sn.fromBufferAttribute(e,r),i=Math.max(i,n.distanceToSquared(Sn));if(t)for(let r=0,o=t.length;r<o;r++){const a=t[r],c=this.morphTargetsRelative;for(let l=0,u=a.count;l<u;l++)Sn.fromBufferAttribute(a,l),c&&(ko.fromBufferAttribute(e,l),Sn.add(ko)),i=Math.max(i,n.distanceToSquared(Sn))}this.boundingSphere.radius=Math.sqrt(i),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const e=this.index,t=this.attributes;if(e===null||t.position===void 0||t.normal===void 0||t.uv===void 0){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const n=t.position,i=t.normal,r=t.uv;this.hasAttribute("tangent")===!1&&this.setAttribute("tangent",new Pn(new Float32Array(4*n.count),4));const o=this.getAttribute("tangent"),a=[],c=[];for(let F=0;F<n.count;F++)a[F]=new U,c[F]=new U;const l=new U,u=new U,h=new U,d=new Ee,f=new Ee,m=new Ee,_=new U,g=new U;function p(F,E,M){l.fromBufferAttribute(n,F),u.fromBufferAttribute(n,E),h.fromBufferAttribute(n,M),d.fromBufferAttribute(r,F),f.fromBufferAttribute(r,E),m.fromBufferAttribute(r,M),u.sub(l),h.sub(l),f.sub(d),m.sub(d);const D=1/(f.x*m.y-m.x*f.y);isFinite(D)&&(_.copy(u).multiplyScalar(m.y).addScaledVector(h,-f.y).multiplyScalar(D),g.copy(h).multiplyScalar(f.x).addScaledVector(u,-m.x).multiplyScalar(D),a[F].add(_),a[E].add(_),a[M].add(_),c[F].add(g),c[E].add(g),c[M].add(g))}let T=this.groups;T.length===0&&(T=[{start:0,count:e.count}]);for(let F=0,E=T.length;F<E;++F){const M=T[F],D=M.start,Z=M.count;for(let $=D,ne=D+Z;$<ne;$+=3)p(e.getX($+0),e.getX($+1),e.getX($+2))}const S=new U,v=new U,P=new U,N=new U;function w(F){P.fromBufferAttribute(i,F),N.copy(P);const E=a[F];S.copy(E),S.sub(P.multiplyScalar(P.dot(E))).normalize(),v.crossVectors(N,E);const D=v.dot(c[F])<0?-1:1;o.setXYZW(F,S.x,S.y,S.z,D)}for(let F=0,E=T.length;F<E;++F){const M=T[F],D=M.start,Z=M.count;for(let $=D,ne=D+Z;$<ne;$+=3)w(e.getX($+0)),w(e.getX($+1)),w(e.getX($+2))}}computeVertexNormals(){const e=this.index,t=this.getAttribute("position");if(t!==void 0){let n=this.getAttribute("normal");if(n===void 0)n=new Pn(new Float32Array(t.count*3),3),this.setAttribute("normal",n);else for(let d=0,f=n.count;d<f;d++)n.setXYZ(d,0,0,0);const i=new U,r=new U,o=new U,a=new U,c=new U,l=new U,u=new U,h=new U;if(e)for(let d=0,f=e.count;d<f;d+=3){const m=e.getX(d+0),_=e.getX(d+1),g=e.getX(d+2);i.fromBufferAttribute(t,m),r.fromBufferAttribute(t,_),o.fromBufferAttribute(t,g),u.subVectors(o,r),h.subVectors(i,r),u.cross(h),a.fromBufferAttribute(n,m),c.fromBufferAttribute(n,_),l.fromBufferAttribute(n,g),a.add(u),c.add(u),l.add(u),n.setXYZ(m,a.x,a.y,a.z),n.setXYZ(_,c.x,c.y,c.z),n.setXYZ(g,l.x,l.y,l.z)}else for(let d=0,f=t.count;d<f;d+=3)i.fromBufferAttribute(t,d+0),r.fromBufferAttribute(t,d+1),o.fromBufferAttribute(t,d+2),u.subVectors(o,r),h.subVectors(i,r),u.cross(h),n.setXYZ(d+0,u.x,u.y,u.z),n.setXYZ(d+1,u.x,u.y,u.z),n.setXYZ(d+2,u.x,u.y,u.z);this.normalizeNormals(),n.needsUpdate=!0}}normalizeNormals(){const e=this.attributes.normal;for(let t=0,n=e.count;t<n;t++)Sn.fromBufferAttribute(e,t),Sn.normalize(),e.setXYZ(t,Sn.x,Sn.y,Sn.z)}toNonIndexed(){function e(a,c){const l=a.array,u=a.itemSize,h=a.normalized,d=new l.constructor(c.length*u);let f=0,m=0;for(let _=0,g=c.length;_<g;_++){a.isInterleavedBufferAttribute?f=c[_]*a.data.stride+a.offset:f=c[_]*u;for(let p=0;p<u;p++)d[m++]=l[f++]}return new Pn(d,u,h)}if(this.index===null)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const t=new Qi,n=this.index.array,i=this.attributes;for(const a in i){const c=i[a],l=e(c,n);t.setAttribute(a,l)}const r=this.morphAttributes;for(const a in r){const c=[],l=r[a];for(let u=0,h=l.length;u<h;u++){const d=l[u],f=e(d,n);c.push(f)}t.morphAttributes[a]=c}t.morphTargetsRelative=this.morphTargetsRelative;const o=this.groups;for(let a=0,c=o.length;a<c;a++){const l=o[a];t.addGroup(l.start,l.count,l.materialIndex)}return t}toJSON(){const e={metadata:{version:4.6,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(e.uuid=this.uuid,e.type=this.type,this.name!==""&&(e.name=this.name),Object.keys(this.userData).length>0&&(e.userData=this.userData),this.parameters!==void 0){const c=this.parameters;for(const l in c)c[l]!==void 0&&(e[l]=c[l]);return e}e.data={attributes:{}};const t=this.index;t!==null&&(e.data.index={type:t.array.constructor.name,array:Array.prototype.slice.call(t.array)});const n=this.attributes;for(const c in n){const l=n[c];e.data.attributes[c]=l.toJSON(e.data)}const i={};let r=!1;for(const c in this.morphAttributes){const l=this.morphAttributes[c],u=[];for(let h=0,d=l.length;h<d;h++){const f=l[h];u.push(f.toJSON(e.data))}u.length>0&&(i[c]=u,r=!0)}r&&(e.data.morphAttributes=i,e.data.morphTargetsRelative=this.morphTargetsRelative);const o=this.groups;o.length>0&&(e.data.groups=JSON.parse(JSON.stringify(o)));const a=this.boundingSphere;return a!==null&&(e.data.boundingSphere={center:a.center.toArray(),radius:a.radius}),e}clone(){return new this.constructor().copy(this)}copy(e){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const t={};this.name=e.name;const n=e.index;n!==null&&this.setIndex(n.clone(t));const i=e.attributes;for(const l in i){const u=i[l];this.setAttribute(l,u.clone(t))}const r=e.morphAttributes;for(const l in r){const u=[],h=r[l];for(let d=0,f=h.length;d<f;d++)u.push(h[d].clone(t));this.morphAttributes[l]=u}this.morphTargetsRelative=e.morphTargetsRelative;const o=e.groups;for(let l=0,u=o.length;l<u;l++){const h=o[l];this.addGroup(h.start,h.count,h.materialIndex)}const a=e.boundingBox;a!==null&&(this.boundingBox=a.clone());const c=e.boundingSphere;return c!==null&&(this.boundingSphere=c.clone()),this.drawRange.start=e.drawRange.start,this.drawRange.count=e.drawRange.count,this.userData=e.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}}const lg=new ut,Or=new Cx,Ql=new lp,ug=new U,Jl=new U,eu=new U,tu=new U,cd=new U,nu=new U,hg=new U,iu=new U;class On extends mn{constructor(e=new Qi,t=new uh){super(),this.isMesh=!0,this.type="Mesh",this.geometry=e,this.material=t,this.updateMorphTargets()}copy(e,t){return super.copy(e,t),e.morphTargetInfluences!==void 0&&(this.morphTargetInfluences=e.morphTargetInfluences.slice()),e.morphTargetDictionary!==void 0&&(this.morphTargetDictionary=Object.assign({},e.morphTargetDictionary)),this.material=Array.isArray(e.material)?e.material.slice():e.material,this.geometry=e.geometry,this}updateMorphTargets(){const t=this.geometry.morphAttributes,n=Object.keys(t);if(n.length>0){const i=t[n[0]];if(i!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let r=0,o=i.length;r<o;r++){const a=i[r].name||String(r);this.morphTargetInfluences.push(0),this.morphTargetDictionary[a]=r}}}}getVertexPosition(e,t){const n=this.geometry,i=n.attributes.position,r=n.morphAttributes.position,o=n.morphTargetsRelative;t.fromBufferAttribute(i,e);const a=this.morphTargetInfluences;if(r&&a){nu.set(0,0,0);for(let c=0,l=r.length;c<l;c++){const u=a[c],h=r[c];u!==0&&(cd.fromBufferAttribute(h,e),o?nu.addScaledVector(cd,u):nu.addScaledVector(cd.sub(t),u))}t.add(nu)}return t}raycast(e,t){const n=this.geometry,i=this.material,r=this.matrixWorld;i!==void 0&&(n.boundingSphere===null&&n.computeBoundingSphere(),Ql.copy(n.boundingSphere),Ql.applyMatrix4(r),Or.copy(e.ray).recast(e.near),!(Ql.containsPoint(Or.origin)===!1&&(Or.intersectSphere(Ql,ug)===null||Or.origin.distanceToSquared(ug)>(e.far-e.near)**2))&&(lg.copy(r).invert(),Or.copy(e.ray).applyMatrix4(lg),!(n.boundingBox!==null&&Or.intersectsBox(n.boundingBox)===!1)&&this._computeIntersections(e,t,Or)))}_computeIntersections(e,t,n){let i;const r=this.geometry,o=this.material,a=r.index,c=r.attributes.position,l=r.attributes.uv,u=r.attributes.uv1,h=r.attributes.normal,d=r.groups,f=r.drawRange;if(a!==null)if(Array.isArray(o))for(let m=0,_=d.length;m<_;m++){const g=d[m],p=o[g.materialIndex],T=Math.max(g.start,f.start),S=Math.min(a.count,Math.min(g.start+g.count,f.start+f.count));for(let v=T,P=S;v<P;v+=3){const N=a.getX(v),w=a.getX(v+1),F=a.getX(v+2);i=su(this,p,e,n,l,u,h,N,w,F),i&&(i.faceIndex=Math.floor(v/3),i.face.materialIndex=g.materialIndex,t.push(i))}}else{const m=Math.max(0,f.start),_=Math.min(a.count,f.start+f.count);for(let g=m,p=_;g<p;g+=3){const T=a.getX(g),S=a.getX(g+1),v=a.getX(g+2);i=su(this,o,e,n,l,u,h,T,S,v),i&&(i.faceIndex=Math.floor(g/3),t.push(i))}}else if(c!==void 0)if(Array.isArray(o))for(let m=0,_=d.length;m<_;m++){const g=d[m],p=o[g.materialIndex],T=Math.max(g.start,f.start),S=Math.min(c.count,Math.min(g.start+g.count,f.start+f.count));for(let v=T,P=S;v<P;v+=3){const N=v,w=v+1,F=v+2;i=su(this,p,e,n,l,u,h,N,w,F),i&&(i.faceIndex=Math.floor(v/3),i.face.materialIndex=g.materialIndex,t.push(i))}}else{const m=Math.max(0,f.start),_=Math.min(c.count,f.start+f.count);for(let g=m,p=_;g<p;g+=3){const T=g,S=g+1,v=g+2;i=su(this,o,e,n,l,u,h,T,S,v),i&&(i.faceIndex=Math.floor(g/3),t.push(i))}}}}function oM(s,e,t,n,i,r,o,a){let c;if(e.side===Wt?c=n.intersectTriangle(o,r,i,!0,a):c=n.intersectTriangle(i,r,o,e.side===Ki,a),c===null)return null;iu.copy(a),iu.applyMatrix4(s.matrixWorld);const l=t.ray.origin.distanceTo(iu);return l<t.near||l>t.far?null:{distance:l,point:iu.clone(),object:s}}function su(s,e,t,n,i,r,o,a,c,l){s.getVertexPosition(a,Jl),s.getVertexPosition(c,eu),s.getVertexPosition(l,tu);const u=oM(s,e,t,n,Jl,eu,tu,hg);if(u){const h=new U;qi.getBarycoord(hg,Jl,eu,tu,h),i&&(u.uv=qi.getInterpolatedAttribute(i,a,c,l,h,new Ee)),r&&(u.uv1=qi.getInterpolatedAttribute(r,a,c,l,h,new Ee)),o&&(u.normal=qi.getInterpolatedAttribute(o,a,c,l,h,new U),u.normal.dot(n.direction)>0&&u.normal.multiplyScalar(-1));const d={a,b:c,c:l,normal:new U,materialIndex:0};qi.getNormal(Jl,eu,tu,d.normal),u.face=d,u.barycoord=h}return u}class Pr extends Qi{constructor(e=1,t=1,n=1,i=1,r=1,o=1){super(),this.type="BoxGeometry",this.parameters={width:e,height:t,depth:n,widthSegments:i,heightSegments:r,depthSegments:o};const a=this;i=Math.floor(i),r=Math.floor(r),o=Math.floor(o);const c=[],l=[],u=[],h=[];let d=0,f=0;m("z","y","x",-1,-1,n,t,e,o,r,0),m("z","y","x",1,-1,n,t,-e,o,r,1),m("x","z","y",1,1,e,n,t,i,o,2),m("x","z","y",1,-1,e,n,-t,i,o,3),m("x","y","z",1,-1,e,t,n,i,r,4),m("x","y","z",-1,-1,e,t,-n,i,r,5),this.setIndex(c),this.setAttribute("position",new oi(l,3)),this.setAttribute("normal",new oi(u,3)),this.setAttribute("uv",new oi(h,2));function m(_,g,p,T,S,v,P,N,w,F,E){const M=v/w,D=P/F,Z=v/2,$=P/2,ne=N/2,oe=w+1,re=F+1;let ue=0,Q=0;const ye=new U;for(let Re=0;Re<re;Re++){const Ge=Re*D-$;for(let dt=0;dt<oe;dt++){const Ut=dt*M-Z;ye[_]=Ut*T,ye[g]=Ge*S,ye[p]=ne,l.push(ye.x,ye.y,ye.z),ye[_]=0,ye[g]=0,ye[p]=N>0?1:-1,u.push(ye.x,ye.y,ye.z),h.push(dt/w),h.push(1-Re/F),ue+=1}}for(let Re=0;Re<F;Re++)for(let Ge=0;Ge<w;Ge++){const dt=d+Ge+oe*Re,Ut=d+Ge+oe*(Re+1),ie=d+(Ge+1)+oe*(Re+1),pe=d+(Ge+1)+oe*Re;c.push(dt,Ut,pe),c.push(Ut,ie,pe),Q+=6}a.addGroup(f,Q,E),f+=Q,d+=ue}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new Pr(e.width,e.height,e.depth,e.widthSegments,e.heightSegments,e.depthSegments)}}function Ya(s){const e={};for(const t in s){e[t]={};for(const n in s[t]){const i=s[t][n];i&&(i.isColor||i.isMatrix3||i.isMatrix4||i.isVector2||i.isVector3||i.isVector4||i.isTexture||i.isQuaternion)?i.isRenderTargetTexture?(console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."),e[t][n]=null):e[t][n]=i.clone():Array.isArray(i)?e[t][n]=i.slice():e[t][n]=i}}return e}function qn(s){const e={};for(let t=0;t<s.length;t++){const n=Ya(s[t]);for(const i in n)e[i]=n[i]}return e}function aM(s){const e=[];for(let t=0;t<s.length;t++)e.push(s[t].clone());return e}function Ux(s){const e=s.getRenderTarget();return e===null?s.outputColorSpace:e.isXRRenderTarget===!0?e.texture.colorSpace:rt.workingColorSpace}const cM={clone:Ya,merge:qn};var lM=`void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`,uM=`void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;class Rr extends Hn{constructor(e){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader=lM,this.fragmentShader=uM,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.forceSinglePass=!0,this.extensions={clipCullDistance:!1,multiDraw:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv1:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,e!==void 0&&this.setValues(e)}copy(e){return super.copy(e),this.fragmentShader=e.fragmentShader,this.vertexShader=e.vertexShader,this.uniforms=Ya(e.uniforms),this.uniformsGroups=aM(e.uniformsGroups),this.defines=Object.assign({},e.defines),this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.fog=e.fog,this.lights=e.lights,this.clipping=e.clipping,this.extensions=Object.assign({},e.extensions),this.glslVersion=e.glslVersion,this}toJSON(e){const t=super.toJSON(e);t.glslVersion=this.glslVersion,t.uniforms={};for(const i in this.uniforms){const o=this.uniforms[i].value;o&&o.isTexture?t.uniforms[i]={type:"t",value:o.toJSON(e).uuid}:o&&o.isColor?t.uniforms[i]={type:"c",value:o.getHex()}:o&&o.isVector2?t.uniforms[i]={type:"v2",value:o.toArray()}:o&&o.isVector3?t.uniforms[i]={type:"v3",value:o.toArray()}:o&&o.isVector4?t.uniforms[i]={type:"v4",value:o.toArray()}:o&&o.isMatrix3?t.uniforms[i]={type:"m3",value:o.toArray()}:o&&o.isMatrix4?t.uniforms[i]={type:"m4",value:o.toArray()}:t.uniforms[i]={value:o}}Object.keys(this.defines).length>0&&(t.defines=this.defines),t.vertexShader=this.vertexShader,t.fragmentShader=this.fragmentShader,t.lights=this.lights,t.clipping=this.clipping;const n={};for(const i in this.extensions)this.extensions[i]===!0&&(n[i]=!0);return Object.keys(n).length>0&&(t.extensions=n),t}}class Ix extends mn{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new ut,this.projectionMatrix=new ut,this.projectionMatrixInverse=new ut,this.coordinateSystem=ni}copy(e,t){return super.copy(e,t),this.matrixWorldInverse.copy(e.matrixWorldInverse),this.projectionMatrix.copy(e.projectionMatrix),this.projectionMatrixInverse.copy(e.projectionMatrixInverse),this.coordinateSystem=e.coordinateSystem,this}getWorldDirection(e){return super.getWorldDirection(e).negate()}updateMatrixWorld(e){super.updateMatrixWorld(e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(e,t){super.updateWorldMatrix(e,t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}}const or=new U,dg=new Ee,fg=new Ee;class Yn extends Ix{constructor(e=50,t=1,n=.1,i=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=e,this.zoom=1,this.near=n,this.far=i,this.focus=10,this.aspect=t,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.fov=e.fov,this.zoom=e.zoom,this.near=e.near,this.far=e.far,this.focus=e.focus,this.aspect=e.aspect,this.view=e.view===null?null:Object.assign({},e.view),this.filmGauge=e.filmGauge,this.filmOffset=e.filmOffset,this}setFocalLength(e){const t=.5*this.getFilmHeight()/e;this.fov=qa*2*Math.atan(t),this.updateProjectionMatrix()}getFocalLength(){const e=Math.tan(wc*.5*this.fov);return .5*this.getFilmHeight()/e}getEffectiveFOV(){return qa*2*Math.atan(Math.tan(wc*.5*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}getViewBounds(e,t,n){or.set(-1,-1,.5).applyMatrix4(this.projectionMatrixInverse),t.set(or.x,or.y).multiplyScalar(-e/or.z),or.set(1,1,.5).applyMatrix4(this.projectionMatrixInverse),n.set(or.x,or.y).multiplyScalar(-e/or.z)}getViewSize(e,t){return this.getViewBounds(e,dg,fg),t.subVectors(fg,dg)}setViewOffset(e,t,n,i,r,o){this.aspect=e/t,this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=i,this.view.width=r,this.view.height=o,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const e=this.near;let t=e*Math.tan(wc*.5*this.fov)/this.zoom,n=2*t,i=this.aspect*n,r=-.5*i;const o=this.view;if(this.view!==null&&this.view.enabled){const c=o.fullWidth,l=o.fullHeight;r+=o.offsetX*i/c,t-=o.offsetY*n/l,i*=o.width/c,n*=o.height/l}const a=this.filmOffset;a!==0&&(r+=e*a/this.getFilmWidth()),this.projectionMatrix.makePerspective(r,r+i,t,t-n,e,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);return t.object.fov=this.fov,t.object.zoom=this.zoom,t.object.near=this.near,t.object.far=this.far,t.object.focus=this.focus,t.object.aspect=this.aspect,this.view!==null&&(t.object.view=Object.assign({},this.view)),t.object.filmGauge=this.filmGauge,t.object.filmOffset=this.filmOffset,t}}const Ho=-90,Wo=1;class Fx extends mn{constructor(e,t,n){super(),this.type="CubeCamera",this.renderTarget=n,this.coordinateSystem=null,this.activeMipmapLevel=0;const i=new Yn(Ho,Wo,e,t);i.layers=this.layers,this.add(i);const r=new Yn(Ho,Wo,e,t);r.layers=this.layers,this.add(r);const o=new Yn(Ho,Wo,e,t);o.layers=this.layers,this.add(o);const a=new Yn(Ho,Wo,e,t);a.layers=this.layers,this.add(a);const c=new Yn(Ho,Wo,e,t);c.layers=this.layers,this.add(c);const l=new Yn(Ho,Wo,e,t);l.layers=this.layers,this.add(l)}updateCoordinateSystem(){const e=this.coordinateSystem,t=this.children.concat(),[n,i,r,o,a,c]=t;for(const l of t)this.remove(l);if(e===ni)n.up.set(0,1,0),n.lookAt(1,0,0),i.up.set(0,1,0),i.lookAt(-1,0,0),r.up.set(0,0,-1),r.lookAt(0,1,0),o.up.set(0,0,1),o.lookAt(0,-1,0),a.up.set(0,1,0),a.lookAt(0,0,1),c.up.set(0,1,0),c.lookAt(0,0,-1);else if(e===_s)n.up.set(0,-1,0),n.lookAt(-1,0,0),i.up.set(0,-1,0),i.lookAt(1,0,0),r.up.set(0,0,1),r.lookAt(0,1,0),o.up.set(0,0,-1),o.lookAt(0,-1,0),a.up.set(0,-1,0),a.lookAt(0,0,1),c.up.set(0,-1,0),c.lookAt(0,0,-1);else throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: "+e);for(const l of t)this.add(l),l.updateMatrixWorld()}update(e,t){this.parent===null&&this.updateMatrixWorld();const{renderTarget:n,activeMipmapLevel:i}=this;this.coordinateSystem!==e.coordinateSystem&&(this.coordinateSystem=e.coordinateSystem,this.updateCoordinateSystem());const[r,o,a,c,l,u]=this.children,h=e.getRenderTarget(),d=e.getActiveCubeFace(),f=e.getActiveMipmapLevel(),m=e.xr.enabled;e.xr.enabled=!1;const _=n.texture.generateMipmaps;n.texture.generateMipmaps=!1,e.setRenderTarget(n,0,i),e.render(t,r),e.setRenderTarget(n,1,i),e.render(t,o),e.setRenderTarget(n,2,i),e.render(t,a),e.setRenderTarget(n,3,i),e.render(t,c),e.setRenderTarget(n,4,i),e.render(t,l),n.texture.generateMipmaps=_,e.setRenderTarget(n,5,i),e.render(t,u),e.setRenderTarget(h,d,f),e.xr.enabled=m,n.texture.needsPMREMUpdate=!0}}class hh extends En{constructor(e,t,n,i,r,o,a,c,l,u){e=e!==void 0?e:[],t=t!==void 0?t:Fi,super(e,t,n,i,r,o,a,c,l,u),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(e){this.image=e}}class Bx extends bo{constructor(e=1,t={}){super(e,e,t),this.isWebGLCubeRenderTarget=!0;const n={width:e,height:e,depth:1},i=[n,n,n,n,n,n];this.texture=new hh(i,t.mapping,t.wrapS,t.wrapT,t.magFilter,t.minFilter,t.format,t.type,t.anisotropy,t.colorSpace),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=t.generateMipmaps!==void 0?t.generateMipmaps:!1,this.texture.minFilter=t.minFilter!==void 0?t.minFilter:yn}fromEquirectangularTexture(e,t){this.texture.type=t.type,this.texture.colorSpace=t.colorSpace,this.texture.generateMipmaps=t.generateMipmaps,this.texture.minFilter=t.minFilter,this.texture.magFilter=t.magFilter;const n={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`},i=new Pr(5,5,5),r=new Rr({name:"CubemapFromEquirect",uniforms:Ya(n.uniforms),vertexShader:n.vertexShader,fragmentShader:n.fragmentShader,side:Wt,blending:Si});r.uniforms.tEquirect.value=t;const o=new On(i,r),a=t.minFilter;return t.minFilter===ti&&(t.minFilter=yn),new Fx(1,10,this).update(e,o),t.minFilter=a,o.geometry.dispose(),o.material.dispose(),this}clear(e,t,n,i){const r=e.getRenderTarget();for(let o=0;o<6;o++)e.setRenderTarget(this,o),e.clear(t,n,i);e.setRenderTarget(r)}}class dp extends mn{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.backgroundBlurriness=0,this.backgroundIntensity=1,this.backgroundRotation=new Mi,this.environmentIntensity=1,this.environmentRotation=new Mi,this.overrideMaterial=null,typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(e,t){return super.copy(e,t),e.background!==null&&(this.background=e.background.clone()),e.environment!==null&&(this.environment=e.environment.clone()),e.fog!==null&&(this.fog=e.fog.clone()),this.backgroundBlurriness=e.backgroundBlurriness,this.backgroundIntensity=e.backgroundIntensity,this.backgroundRotation.copy(e.backgroundRotation),this.environmentIntensity=e.environmentIntensity,this.environmentRotation.copy(e.environmentRotation),e.overrideMaterial!==null&&(this.overrideMaterial=e.overrideMaterial.clone()),this.matrixAutoUpdate=e.matrixAutoUpdate,this}toJSON(e){const t=super.toJSON(e);return this.fog!==null&&(t.object.fog=this.fog.toJSON()),this.backgroundBlurriness>0&&(t.object.backgroundBlurriness=this.backgroundBlurriness),this.backgroundIntensity!==1&&(t.object.backgroundIntensity=this.backgroundIntensity),t.object.backgroundRotation=this.backgroundRotation.toArray(),this.environmentIntensity!==1&&(t.object.environmentIntensity=this.environmentIntensity),t.object.environmentRotation=this.environmentRotation.toArray(),t}}class Ox{constructor(e,t){this.isInterleavedBuffer=!0,this.array=e,this.stride=t,this.count=e!==void 0?e.length/t:0,this.usage=zu,this.updateRanges=[],this.version=0,this.uuid=Hs()}onUploadCallback(){}set needsUpdate(e){e===!0&&this.version++}setUsage(e){return this.usage=e,this}addUpdateRange(e,t){this.updateRanges.push({start:e,count:t})}clearUpdateRanges(){this.updateRanges.length=0}copy(e){return this.array=new e.array.constructor(e.array),this.count=e.count,this.stride=e.stride,this.usage=e.usage,this}copyAt(e,t,n){e*=this.stride,n*=t.stride;for(let i=0,r=this.stride;i<r;i++)this.array[e+i]=t.array[n+i];return this}set(e,t=0){return this.array.set(e,t),this}clone(e){e.arrayBuffers===void 0&&(e.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=Hs()),e.arrayBuffers[this.array.buffer._uuid]===void 0&&(e.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const t=new this.array.constructor(e.arrayBuffers[this.array.buffer._uuid]),n=new this.constructor(t,this.stride);return n.setUsage(this.usage),n}onUpload(e){return this.onUploadCallback=e,this}toJSON(e){return e.arrayBuffers===void 0&&(e.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=Hs()),e.arrayBuffers[this.array.buffer._uuid]===void 0&&(e.arrayBuffers[this.array.buffer._uuid]=Array.from(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}}const Xn=new U;class fp{constructor(e,t,n,i=!1){this.isInterleavedBufferAttribute=!0,this.name="",this.data=e,this.itemSize=t,this.offset=n,this.normalized=i}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(e){this.data.needsUpdate=e}applyMatrix4(e){for(let t=0,n=this.data.count;t<n;t++)Xn.fromBufferAttribute(this,t),Xn.applyMatrix4(e),this.setXYZ(t,Xn.x,Xn.y,Xn.z);return this}applyNormalMatrix(e){for(let t=0,n=this.count;t<n;t++)Xn.fromBufferAttribute(this,t),Xn.applyNormalMatrix(e),this.setXYZ(t,Xn.x,Xn.y,Xn.z);return this}transformDirection(e){for(let t=0,n=this.count;t<n;t++)Xn.fromBufferAttribute(this,t),Xn.transformDirection(e),this.setXYZ(t,Xn.x,Xn.y,Xn.z);return this}getComponent(e,t){let n=this.array[e*this.data.stride+this.offset+t];return this.normalized&&(n=jn(n,this.array)),n}setComponent(e,t,n){return this.normalized&&(n=st(n,this.array)),this.data.array[e*this.data.stride+this.offset+t]=n,this}setX(e,t){return this.normalized&&(t=st(t,this.array)),this.data.array[e*this.data.stride+this.offset]=t,this}setY(e,t){return this.normalized&&(t=st(t,this.array)),this.data.array[e*this.data.stride+this.offset+1]=t,this}setZ(e,t){return this.normalized&&(t=st(t,this.array)),this.data.array[e*this.data.stride+this.offset+2]=t,this}setW(e,t){return this.normalized&&(t=st(t,this.array)),this.data.array[e*this.data.stride+this.offset+3]=t,this}getX(e){let t=this.data.array[e*this.data.stride+this.offset];return this.normalized&&(t=jn(t,this.array)),t}getY(e){let t=this.data.array[e*this.data.stride+this.offset+1];return this.normalized&&(t=jn(t,this.array)),t}getZ(e){let t=this.data.array[e*this.data.stride+this.offset+2];return this.normalized&&(t=jn(t,this.array)),t}getW(e){let t=this.data.array[e*this.data.stride+this.offset+3];return this.normalized&&(t=jn(t,this.array)),t}setXY(e,t,n){return e=e*this.data.stride+this.offset,this.normalized&&(t=st(t,this.array),n=st(n,this.array)),this.data.array[e+0]=t,this.data.array[e+1]=n,this}setXYZ(e,t,n,i){return e=e*this.data.stride+this.offset,this.normalized&&(t=st(t,this.array),n=st(n,this.array),i=st(i,this.array)),this.data.array[e+0]=t,this.data.array[e+1]=n,this.data.array[e+2]=i,this}setXYZW(e,t,n,i,r){return e=e*this.data.stride+this.offset,this.normalized&&(t=st(t,this.array),n=st(n,this.array),i=st(i,this.array),r=st(r,this.array)),this.data.array[e+0]=t,this.data.array[e+1]=n,this.data.array[e+2]=i,this.data.array[e+3]=r,this}clone(e){if(e===void 0){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");const t=[];for(let n=0;n<this.count;n++){const i=n*this.data.stride+this.offset;for(let r=0;r<this.itemSize;r++)t.push(this.data.array[i+r])}return new Pn(new this.array.constructor(t),this.itemSize,this.normalized)}else return e.interleavedBuffers===void 0&&(e.interleavedBuffers={}),e.interleavedBuffers[this.data.uuid]===void 0&&(e.interleavedBuffers[this.data.uuid]=this.data.clone(e)),new fp(e.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(e){if(e===void 0){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");const t=[];for(let n=0;n<this.count;n++){const i=n*this.data.stride+this.offset;for(let r=0;r<this.itemSize;r++)t.push(this.data.array[i+r])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:t,normalized:this.normalized}}else return e.interleavedBuffers===void 0&&(e.interleavedBuffers={}),e.interleavedBuffers[this.data.uuid]===void 0&&(e.interleavedBuffers[this.data.uuid]=this.data.toJSON(e)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}}class hM extends Hn{constructor(e){super(),this.isSpriteMaterial=!0,this.type="SpriteMaterial",this.color=new De(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.alphaMap=e.alphaMap,this.rotation=e.rotation,this.sizeAttenuation=e.sizeAttenuation,this.fog=e.fog,this}}class dM extends En{constructor(e=null,t=1,n=1,i,r,o,a,c,l=zt,u=zt,h,d){super(null,o,a,c,l,u,i,r,h,d),this.isDataTexture=!0,this.image={data:e,width:t,height:n},this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class pp extends Pn{constructor(e,t,n,i=1){super(e,t,n),this.isInstancedBufferAttribute=!0,this.meshPerAttribute=i}copy(e){return super.copy(e),this.meshPerAttribute=e.meshPerAttribute,this}toJSON(){const e=super.toJSON();return e.meshPerAttribute=this.meshPerAttribute,e.isInstancedBufferAttribute=!0,e}}const ld=new U,fM=new U,pM=new qe;class ei{constructor(e=new U(1,0,0),t=0){this.isPlane=!0,this.normal=e,this.constant=t}set(e,t){return this.normal.copy(e),this.constant=t,this}setComponents(e,t,n,i){return this.normal.set(e,t,n),this.constant=i,this}setFromNormalAndCoplanarPoint(e,t){return this.normal.copy(e),this.constant=-t.dot(this.normal),this}setFromCoplanarPoints(e,t,n){const i=ld.subVectors(n,t).cross(fM.subVectors(e,t)).normalize();return this.setFromNormalAndCoplanarPoint(i,e),this}copy(e){return this.normal.copy(e.normal),this.constant=e.constant,this}normalize(){const e=1/this.normal.length();return this.normal.multiplyScalar(e),this.constant*=e,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(e){return this.normal.dot(e)+this.constant}distanceToSphere(e){return this.distanceToPoint(e.center)-e.radius}projectPoint(e,t){return t.copy(e).addScaledVector(this.normal,-this.distanceToPoint(e))}intersectLine(e,t){const n=e.delta(ld),i=this.normal.dot(n);if(i===0)return this.distanceToPoint(e.start)===0?t.copy(e.start):null;const r=-(e.start.dot(this.normal)+this.constant)/i;return r<0||r>1?null:t.copy(e.start).addScaledVector(n,r)}intersectsLine(e){const t=this.distanceToPoint(e.start),n=this.distanceToPoint(e.end);return t<0&&n>0||n<0&&t>0}intersectsBox(e){return e.intersectsPlane(this)}intersectsSphere(e){return e.intersectsPlane(this)}coplanarPoint(e){return e.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(e,t){const n=t||pM.getNormalMatrix(e),i=this.coplanarPoint(ld).applyMatrix4(e),r=this.normal.applyMatrix3(n).normalize();return this.constant=-i.dot(r),this}translate(e){return this.constant-=e.dot(this.normal),this}equals(e){return e.normal.equals(this.normal)&&e.constant===this.constant}clone(){return new this.constructor().copy(this)}}const Vr=new lp,ru=new U;class dh{constructor(e=new ei,t=new ei,n=new ei,i=new ei,r=new ei,o=new ei){this.planes=[e,t,n,i,r,o]}set(e,t,n,i,r,o){const a=this.planes;return a[0].copy(e),a[1].copy(t),a[2].copy(n),a[3].copy(i),a[4].copy(r),a[5].copy(o),this}copy(e){const t=this.planes;for(let n=0;n<6;n++)t[n].copy(e.planes[n]);return this}setFromProjectionMatrix(e,t=ni){const n=this.planes,i=e.elements,r=i[0],o=i[1],a=i[2],c=i[3],l=i[4],u=i[5],h=i[6],d=i[7],f=i[8],m=i[9],_=i[10],g=i[11],p=i[12],T=i[13],S=i[14],v=i[15];if(n[0].setComponents(c-r,d-l,g-f,v-p).normalize(),n[1].setComponents(c+r,d+l,g+f,v+p).normalize(),n[2].setComponents(c+o,d+u,g+m,v+T).normalize(),n[3].setComponents(c-o,d-u,g-m,v-T).normalize(),n[4].setComponents(c-a,d-h,g-_,v-S).normalize(),t===ni)n[5].setComponents(c+a,d+h,g+_,v+S).normalize();else if(t===_s)n[5].setComponents(a,h,_,S).normalize();else throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: "+t);return this}intersectsObject(e){if(e.boundingSphere!==void 0)e.boundingSphere===null&&e.computeBoundingSphere(),Vr.copy(e.boundingSphere).applyMatrix4(e.matrixWorld);else{const t=e.geometry;t.boundingSphere===null&&t.computeBoundingSphere(),Vr.copy(t.boundingSphere).applyMatrix4(e.matrixWorld)}return this.intersectsSphere(Vr)}intersectsSprite(e){return Vr.center.set(0,0,0),Vr.radius=.7071067811865476,Vr.applyMatrix4(e.matrixWorld),this.intersectsSphere(Vr)}intersectsSphere(e){const t=this.planes,n=e.center,i=-e.radius;for(let r=0;r<6;r++)if(t[r].distanceToPoint(n)<i)return!1;return!0}intersectsBox(e){const t=this.planes;for(let n=0;n<6;n++){const i=t[n];if(ru.x=i.normal.x>0?e.max.x:e.min.x,ru.y=i.normal.y>0?e.max.y:e.min.y,ru.z=i.normal.z>0?e.max.z:e.min.z,i.distanceToPoint(ru)<0)return!1}return!0}containsPoint(e){const t=this.planes;for(let n=0;n<6;n++)if(t[n].distanceToPoint(e)<0)return!1;return!0}clone(){return new this.constructor().copy(this)}}class Vx extends Hn{constructor(e){super(),this.isLineBasicMaterial=!0,this.type="LineBasicMaterial",this.color=new De(16777215),this.map=null,this.linewidth=1,this.linecap="round",this.linejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.linewidth=e.linewidth,this.linecap=e.linecap,this.linejoin=e.linejoin,this.fog=e.fog,this}}class mM extends Hn{constructor(e){super(),this.isPointsMaterial=!0,this.type="PointsMaterial",this.color=new De(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.alphaMap=e.alphaMap,this.size=e.size,this.sizeAttenuation=e.sizeAttenuation,this.fog=e.fog,this}}class ou extends mn{constructor(){super(),this.isGroup=!0,this.type="Group"}}class Gx extends En{constructor(e,t){super({width:e,height:t}),this.isFramebufferTexture=!0,this.magFilter=zt,this.minFilter=zt,this.generateMipmaps=!1,this.needsUpdate=!0}}class Qs extends En{constructor(e,t,n,i,r,o,a,c,l,u=hs){if(u!==hs&&u!==gs)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");n===void 0&&u===hs&&(n=Yt),n===void 0&&u===gs&&(n=ms),super(null,i,r,o,a,c,u,n,l),this.isDepthTexture=!0,this.image={width:e,height:t},this.magFilter=a!==void 0?a:zt,this.minFilter=c!==void 0?c:zt,this.flipY=!1,this.generateMipmaps=!1,this.compareFunction=null}copy(e){return super.copy(e),this.compareFunction=e.compareFunction,this}toJSON(e){const t=super.toJSON(e);return this.compareFunction!==null&&(t.compareFunction=this.compareFunction),t}}class fh extends Qi{constructor(e=1,t=1,n=1,i=1){super(),this.type="PlaneGeometry",this.parameters={width:e,height:t,widthSegments:n,heightSegments:i};const r=e/2,o=t/2,a=Math.floor(n),c=Math.floor(i),l=a+1,u=c+1,h=e/a,d=t/c,f=[],m=[],_=[],g=[];for(let p=0;p<u;p++){const T=p*d-o;for(let S=0;S<l;S++){const v=S*h-r;m.push(v,-T,0),_.push(0,0,1),g.push(S/a),g.push(1-p/c)}}for(let p=0;p<c;p++)for(let T=0;T<a;T++){const S=T+l*p,v=T+l*(p+1),P=T+1+l*(p+1),N=T+1+l*p;f.push(S,v,N),f.push(v,P,N)}this.setIndex(f),this.setAttribute("position",new oi(m,3)),this.setAttribute("normal",new oi(_,3)),this.setAttribute("uv",new oi(g,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new fh(e.width,e.height,e.widthSegments,e.heightSegments)}}class mp extends Qi{constructor(e=1,t=32,n=16,i=0,r=Math.PI*2,o=0,a=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:e,widthSegments:t,heightSegments:n,phiStart:i,phiLength:r,thetaStart:o,thetaLength:a},t=Math.max(3,Math.floor(t)),n=Math.max(2,Math.floor(n));const c=Math.min(o+a,Math.PI);let l=0;const u=[],h=new U,d=new U,f=[],m=[],_=[],g=[];for(let p=0;p<=n;p++){const T=[],S=p/n;let v=0;p===0&&o===0?v=.5/t:p===n&&c===Math.PI&&(v=-.5/t);for(let P=0;P<=t;P++){const N=P/t;h.x=-e*Math.cos(i+N*r)*Math.sin(o+S*a),h.y=e*Math.cos(o+S*a),h.z=e*Math.sin(i+N*r)*Math.sin(o+S*a),m.push(h.x,h.y,h.z),d.copy(h).normalize(),_.push(d.x,d.y,d.z),g.push(N+v,1-S),T.push(l++)}u.push(T)}for(let p=0;p<n;p++)for(let T=0;T<t;T++){const S=u[p][T+1],v=u[p][T],P=u[p+1][T],N=u[p+1][T+1];(p!==0||o>0)&&f.push(S,v,N),(p!==n-1||c<Math.PI)&&f.push(v,P,N)}this.setIndex(f),this.setAttribute("position",new oi(m,3)),this.setAttribute("normal",new oi(_,3)),this.setAttribute("uv",new oi(g,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new mp(e.radius,e.widthSegments,e.heightSegments,e.phiStart,e.phiLength,e.thetaStart,e.thetaLength)}}class gM extends Hn{constructor(e){super(),this.isShadowMaterial=!0,this.type="ShadowMaterial",this.color=new De(0),this.transparent=!0,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.fog=e.fog,this}}class zx extends Hn{constructor(e){super(),this.isMeshStandardMaterial=!0,this.type="MeshStandardMaterial",this.defines={STANDARD:""},this.color=new De(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new De(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=qs,this.normalScale=new Ee(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new Mi,this.envMapIntensity=1,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.defines={STANDARD:""},this.color.copy(e.color),this.roughness=e.roughness,this.metalness=e.metalness,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.roughnessMap=e.roughnessMap,this.metalnessMap=e.metalnessMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapRotation.copy(e.envMapRotation),this.envMapIntensity=e.envMapIntensity,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this.fog=e.fog,this}}class _M extends zx{constructor(e){super(),this.isMeshPhysicalMaterial=!0,this.defines={STANDARD:"",PHYSICAL:""},this.type="MeshPhysicalMaterial",this.anisotropyRotation=0,this.anisotropyMap=null,this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new Ee(1,1),this.clearcoatNormalMap=null,this.ior=1.5,Object.defineProperty(this,"reflectivity",{get:function(){return lt(2.5*(this.ior-1)/(this.ior+1),0,1)},set:function(t){this.ior=(1+.4*t)/(1-.4*t)}}),this.iridescenceMap=null,this.iridescenceIOR=1.3,this.iridescenceThicknessRange=[100,400],this.iridescenceThicknessMap=null,this.sheenColor=new De(0),this.sheenColorMap=null,this.sheenRoughness=1,this.sheenRoughnessMap=null,this.transmissionMap=null,this.thickness=0,this.thicknessMap=null,this.attenuationDistance=1/0,this.attenuationColor=new De(1,1,1),this.specularIntensity=1,this.specularIntensityMap=null,this.specularColor=new De(1,1,1),this.specularColorMap=null,this._anisotropy=0,this._clearcoat=0,this._dispersion=0,this._iridescence=0,this._sheen=0,this._transmission=0,this.setValues(e)}get anisotropy(){return this._anisotropy}set anisotropy(e){this._anisotropy>0!=e>0&&this.version++,this._anisotropy=e}get clearcoat(){return this._clearcoat}set clearcoat(e){this._clearcoat>0!=e>0&&this.version++,this._clearcoat=e}get iridescence(){return this._iridescence}set iridescence(e){this._iridescence>0!=e>0&&this.version++,this._iridescence=e}get dispersion(){return this._dispersion}set dispersion(e){this._dispersion>0!=e>0&&this.version++,this._dispersion=e}get sheen(){return this._sheen}set sheen(e){this._sheen>0!=e>0&&this.version++,this._sheen=e}get transmission(){return this._transmission}set transmission(e){this._transmission>0!=e>0&&this.version++,this._transmission=e}copy(e){return super.copy(e),this.defines={STANDARD:"",PHYSICAL:""},this.anisotropy=e.anisotropy,this.anisotropyRotation=e.anisotropyRotation,this.anisotropyMap=e.anisotropyMap,this.clearcoat=e.clearcoat,this.clearcoatMap=e.clearcoatMap,this.clearcoatRoughness=e.clearcoatRoughness,this.clearcoatRoughnessMap=e.clearcoatRoughnessMap,this.clearcoatNormalMap=e.clearcoatNormalMap,this.clearcoatNormalScale.copy(e.clearcoatNormalScale),this.dispersion=e.dispersion,this.ior=e.ior,this.iridescence=e.iridescence,this.iridescenceMap=e.iridescenceMap,this.iridescenceIOR=e.iridescenceIOR,this.iridescenceThicknessRange=[...e.iridescenceThicknessRange],this.iridescenceThicknessMap=e.iridescenceThicknessMap,this.sheen=e.sheen,this.sheenColor.copy(e.sheenColor),this.sheenColorMap=e.sheenColorMap,this.sheenRoughness=e.sheenRoughness,this.sheenRoughnessMap=e.sheenRoughnessMap,this.transmission=e.transmission,this.transmissionMap=e.transmissionMap,this.thickness=e.thickness,this.thicknessMap=e.thicknessMap,this.attenuationDistance=e.attenuationDistance,this.attenuationColor.copy(e.attenuationColor),this.specularIntensity=e.specularIntensity,this.specularIntensityMap=e.specularIntensityMap,this.specularColor.copy(e.specularColor),this.specularColorMap=e.specularColorMap,this}}class xM extends Hn{constructor(e){super(),this.isMeshPhongMaterial=!0,this.type="MeshPhongMaterial",this.color=new De(16777215),this.specular=new De(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new De(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=qs,this.normalScale=new Ee(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new Mi,this.combine=vl,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.specular.copy(e.specular),this.shininess=e.shininess,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapRotation.copy(e.envMapRotation),this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this.fog=e.fog,this}}class yM extends Hn{constructor(e){super(),this.isMeshToonMaterial=!0,this.defines={TOON:""},this.type="MeshToonMaterial",this.color=new De(16777215),this.map=null,this.gradientMap=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new De(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=qs,this.normalScale=new Ee(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.gradientMap=e.gradientMap,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.alphaMap=e.alphaMap,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.fog=e.fog,this}}class vM extends Hn{constructor(e){super(),this.isMeshNormalMaterial=!0,this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=qs,this.normalScale=new Ee(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.flatShading=!1,this.setValues(e)}copy(e){return super.copy(e),this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.flatShading=e.flatShading,this}}class TM extends Hn{constructor(e){super(),this.isMeshLambertMaterial=!0,this.type="MeshLambertMaterial",this.color=new De(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new De(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=qs,this.normalScale=new Ee(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new Mi,this.combine=vl,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapRotation.copy(e.envMapRotation),this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this.fog=e.fog,this}}class SM extends Hn{constructor(e){super(),this.isMeshDepthMaterial=!0,this.type="MeshDepthMaterial",this.depthPacking=ub,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(e)}copy(e){return super.copy(e),this.depthPacking=e.depthPacking,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this}}class bM extends Hn{constructor(e){super(),this.isMeshDistanceMaterial=!0,this.type="MeshDistanceMaterial",this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.setValues(e)}copy(e){return super.copy(e),this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this}}class MM extends Hn{constructor(e){super(),this.isMeshMatcapMaterial=!0,this.defines={MATCAP:""},this.type="MeshMatcapMaterial",this.color=new De(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=qs,this.normalScale=new Ee(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.defines={MATCAP:""},this.color.copy(e.color),this.matcap=e.matcap,this.map=e.map,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.alphaMap=e.alphaMap,this.flatShading=e.flatShading,this.fog=e.fog,this}}class EM extends Vx{constructor(e){super(),this.isLineDashedMaterial=!0,this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(e)}copy(e){return super.copy(e),this.scale=e.scale,this.dashSize=e.dashSize,this.gapSize=e.gapSize,this}}class Eo extends mn{constructor(e,t=1){super(),this.isLight=!0,this.type="Light",this.color=new De(e),this.intensity=t}dispose(){}copy(e,t){return super.copy(e,t),this.color.copy(e.color),this.intensity=e.intensity,this}toJSON(e){const t=super.toJSON(e);return t.object.color=this.color.getHex(),t.object.intensity=this.intensity,this.groundColor!==void 0&&(t.object.groundColor=this.groundColor.getHex()),this.distance!==void 0&&(t.object.distance=this.distance),this.angle!==void 0&&(t.object.angle=this.angle),this.decay!==void 0&&(t.object.decay=this.decay),this.penumbra!==void 0&&(t.object.penumbra=this.penumbra),this.shadow!==void 0&&(t.object.shadow=this.shadow.toJSON()),this.target!==void 0&&(t.object.target=this.target.uuid),t}}class AM extends Eo{constructor(e,t,n){super(e,n),this.isHemisphereLight=!0,this.type="HemisphereLight",this.position.copy(mn.DEFAULT_UP),this.updateMatrix(),this.groundColor=new De(t)}copy(e,t){return super.copy(e,t),this.groundColor.copy(e.groundColor),this}}const ud=new ut,pg=new U,mg=new U;class gp{constructor(e){this.camera=e,this.intensity=1,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new Ee(512,512),this.map=null,this.mapPass=null,this.matrix=new ut,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new dh,this._frameExtents=new Ee(1,1),this._viewportCount=1,this._viewports=[new je(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(e){const t=this.camera,n=this.matrix;pg.setFromMatrixPosition(e.matrixWorld),t.position.copy(pg),mg.setFromMatrixPosition(e.target.matrixWorld),t.lookAt(mg),t.updateMatrixWorld(),ud.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),this._frustum.setFromProjectionMatrix(ud),n.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),n.multiply(ud)}getViewport(e){return this._viewports[e]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(e){return this.camera=e.camera.clone(),this.intensity=e.intensity,this.bias=e.bias,this.radius=e.radius,this.mapSize.copy(e.mapSize),this}clone(){return new this.constructor().copy(this)}toJSON(){const e={};return this.intensity!==1&&(e.intensity=this.intensity),this.bias!==0&&(e.bias=this.bias),this.normalBias!==0&&(e.normalBias=this.normalBias),this.radius!==1&&(e.radius=this.radius),(this.mapSize.x!==512||this.mapSize.y!==512)&&(e.mapSize=this.mapSize.toArray()),e.camera=this.camera.toJSON(!1).object,delete e.camera.matrix,e}}class RM extends gp{constructor(){super(new Yn(50,1,.5,500)),this.isSpotLightShadow=!0,this.focus=1}updateMatrices(e){const t=this.camera,n=qa*2*e.angle*this.focus,i=this.mapSize.width/this.mapSize.height,r=e.distance||t.far;(n!==t.fov||i!==t.aspect||r!==t.far)&&(t.fov=n,t.aspect=i,t.far=r,t.updateProjectionMatrix()),super.updateMatrices(e)}copy(e){return super.copy(e),this.focus=e.focus,this}}class kx extends Eo{constructor(e,t,n=0,i=Math.PI/3,r=0,o=2){super(e,t),this.isSpotLight=!0,this.type="SpotLight",this.position.copy(mn.DEFAULT_UP),this.updateMatrix(),this.target=new mn,this.distance=n,this.angle=i,this.penumbra=r,this.decay=o,this.map=null,this.shadow=new RM}get power(){return this.intensity*Math.PI}set power(e){this.intensity=e/Math.PI}dispose(){this.shadow.dispose()}copy(e,t){return super.copy(e,t),this.distance=e.distance,this.angle=e.angle,this.penumbra=e.penumbra,this.decay=e.decay,this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}const gg=new ut,pc=new U,hd=new U;class wM extends gp{constructor(){super(new Yn(90,1,.5,500)),this.isPointLightShadow=!0,this._frameExtents=new Ee(4,2),this._viewportCount=6,this._viewports=[new je(2,1,1,1),new je(0,1,1,1),new je(3,1,1,1),new je(1,1,1,1),new je(3,0,1,1),new je(1,0,1,1)],this._cubeDirections=[new U(1,0,0),new U(-1,0,0),new U(0,0,1),new U(0,0,-1),new U(0,1,0),new U(0,-1,0)],this._cubeUps=[new U(0,1,0),new U(0,1,0),new U(0,1,0),new U(0,1,0),new U(0,0,1),new U(0,0,-1)]}updateMatrices(e,t=0){const n=this.camera,i=this.matrix,r=e.distance||n.far;r!==n.far&&(n.far=r,n.updateProjectionMatrix()),pc.setFromMatrixPosition(e.matrixWorld),n.position.copy(pc),hd.copy(n.position),hd.add(this._cubeDirections[t]),n.up.copy(this._cubeUps[t]),n.lookAt(hd),n.updateMatrixWorld(),i.makeTranslation(-pc.x,-pc.y,-pc.z),gg.multiplyMatrices(n.projectionMatrix,n.matrixWorldInverse),this._frustum.setFromProjectionMatrix(gg)}}class NM extends Eo{constructor(e,t,n=0,i=2){super(e,t),this.isPointLight=!0,this.type="PointLight",this.distance=n,this.decay=i,this.shadow=new wM}get power(){return this.intensity*4*Math.PI}set power(e){this.intensity=e/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(e,t){return super.copy(e,t),this.distance=e.distance,this.decay=e.decay,this.shadow=e.shadow.clone(),this}}class Ml extends Ix{constructor(e=-1,t=1,n=1,i=-1,r=.1,o=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=e,this.right=t,this.top=n,this.bottom=i,this.near=r,this.far=o,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.left=e.left,this.right=e.right,this.top=e.top,this.bottom=e.bottom,this.near=e.near,this.far=e.far,this.zoom=e.zoom,this.view=e.view===null?null:Object.assign({},e.view),this}setViewOffset(e,t,n,i,r,o){this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=i,this.view.width=r,this.view.height=o,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const e=(this.right-this.left)/(2*this.zoom),t=(this.top-this.bottom)/(2*this.zoom),n=(this.right+this.left)/2,i=(this.top+this.bottom)/2;let r=n-e,o=n+e,a=i+t,c=i-t;if(this.view!==null&&this.view.enabled){const l=(this.right-this.left)/this.view.fullWidth/this.zoom,u=(this.top-this.bottom)/this.view.fullHeight/this.zoom;r+=l*this.view.offsetX,o=r+l*this.view.width,a-=u*this.view.offsetY,c=a-u*this.view.height}this.projectionMatrix.makeOrthographic(r,o,a,c,this.near,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);return t.object.zoom=this.zoom,t.object.left=this.left,t.object.right=this.right,t.object.top=this.top,t.object.bottom=this.bottom,t.object.near=this.near,t.object.far=this.far,this.view!==null&&(t.object.view=Object.assign({},this.view)),t}}class CM extends gp{constructor(){super(new Ml(-5,5,5,-5,.5,500)),this.isDirectionalLightShadow=!0}}class PM extends Eo{constructor(e,t){super(e,t),this.isDirectionalLight=!0,this.type="DirectionalLight",this.position.copy(mn.DEFAULT_UP),this.updateMatrix(),this.target=new mn,this.shadow=new CM}dispose(){this.shadow.dispose()}copy(e){return super.copy(e),this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}class DM extends Eo{constructor(e,t){super(e,t),this.isAmbientLight=!0,this.type="AmbientLight"}}class LM extends Eo{constructor(e,t,n=10,i=10){super(e,t),this.isRectAreaLight=!0,this.type="RectAreaLight",this.width=n,this.height=i}get power(){return this.intensity*this.width*this.height*Math.PI}set power(e){this.intensity=e/(this.width*this.height*Math.PI)}copy(e){return super.copy(e),this.width=e.width,this.height=e.height,this}toJSON(e){const t=super.toJSON(e);return t.object.width=this.width,t.object.height=this.height,t}}class UM{constructor(){this.isSphericalHarmonics3=!0,this.coefficients=[];for(let e=0;e<9;e++)this.coefficients.push(new U)}set(e){for(let t=0;t<9;t++)this.coefficients[t].copy(e[t]);return this}zero(){for(let e=0;e<9;e++)this.coefficients[e].set(0,0,0);return this}getAt(e,t){const n=e.x,i=e.y,r=e.z,o=this.coefficients;return t.copy(o[0]).multiplyScalar(.282095),t.addScaledVector(o[1],.488603*i),t.addScaledVector(o[2],.488603*r),t.addScaledVector(o[3],.488603*n),t.addScaledVector(o[4],1.092548*(n*i)),t.addScaledVector(o[5],1.092548*(i*r)),t.addScaledVector(o[6],.315392*(3*r*r-1)),t.addScaledVector(o[7],1.092548*(n*r)),t.addScaledVector(o[8],.546274*(n*n-i*i)),t}getIrradianceAt(e,t){const n=e.x,i=e.y,r=e.z,o=this.coefficients;return t.copy(o[0]).multiplyScalar(.886227),t.addScaledVector(o[1],2*.511664*i),t.addScaledVector(o[2],2*.511664*r),t.addScaledVector(o[3],2*.511664*n),t.addScaledVector(o[4],2*.429043*n*i),t.addScaledVector(o[5],2*.429043*i*r),t.addScaledVector(o[6],.743125*r*r-.247708),t.addScaledVector(o[7],2*.429043*n*r),t.addScaledVector(o[8],.429043*(n*n-i*i)),t}add(e){for(let t=0;t<9;t++)this.coefficients[t].add(e.coefficients[t]);return this}addScaledSH(e,t){for(let n=0;n<9;n++)this.coefficients[n].addScaledVector(e.coefficients[n],t);return this}scale(e){for(let t=0;t<9;t++)this.coefficients[t].multiplyScalar(e);return this}lerp(e,t){for(let n=0;n<9;n++)this.coefficients[n].lerp(e.coefficients[n],t);return this}equals(e){for(let t=0;t<9;t++)if(!this.coefficients[t].equals(e.coefficients[t]))return!1;return!0}copy(e){return this.set(e.coefficients)}clone(){return new this.constructor().copy(this)}fromArray(e,t=0){const n=this.coefficients;for(let i=0;i<9;i++)n[i].fromArray(e,t+i*3);return this}toArray(e=[],t=0){const n=this.coefficients;for(let i=0;i<9;i++)n[i].toArray(e,t+i*3);return e}static getBasisAt(e,t){const n=e.x,i=e.y,r=e.z;t[0]=.282095,t[1]=.488603*i,t[2]=.488603*r,t[3]=.488603*n,t[4]=1.092548*n*i,t[5]=1.092548*i*r,t[6]=.315392*(3*r*r-1),t[7]=1.092548*n*r,t[8]=.546274*(n*n-i*i)}}class IM extends Eo{constructor(e=new UM,t=1){super(void 0,t),this.isLightProbe=!0,this.sh=e}copy(e){return super.copy(e),this.sh.copy(e.sh),this}fromJSON(e){return this.intensity=e.intensity,this.sh.fromArray(e.sh),this}toJSON(e){const t=super.toJSON(e);return t.object.sh=this.sh.toArray(),t}}class FM extends Yn{constructor(e=[]){super(),this.isArrayCamera=!0,this.cameras=e}}class BM extends Ox{constructor(e,t,n=1){super(e,t),this.isInstancedInterleavedBuffer=!0,this.meshPerAttribute=n}copy(e){return super.copy(e),this.meshPerAttribute=e.meshPerAttribute,this}clone(e){const t=super.clone(e);return t.meshPerAttribute=this.meshPerAttribute,t}toJSON(e){const t=super.toJSON(e);return t.isInstancedInterleavedBuffer=!0,t.meshPerAttribute=this.meshPerAttribute,t}}class _g{constructor(e=1,t=0,n=0){return this.radius=e,this.phi=t,this.theta=n,this}set(e,t,n){return this.radius=e,this.phi=t,this.theta=n,this}copy(e){return this.radius=e.radius,this.phi=e.phi,this.theta=e.theta,this}makeSafe(){return this.phi=lt(this.phi,1e-6,Math.PI-1e-6),this}setFromVector3(e){return this.setFromCartesianCoords(e.x,e.y,e.z)}setFromCartesianCoords(e,t,n){return this.radius=Math.sqrt(e*e+t*t+n*n),this.radius===0?(this.theta=0,this.phi=0):(this.theta=Math.atan2(e,n),this.phi=Math.acos(lt(t/this.radius,-1,1))),this}clone(){return new this.constructor().copy(this)}}class OM extends Zs{constructor(e,t=null){super(),this.object=e,this.domElement=t,this.enabled=!0,this.state=-1,this.keys={},this.mouseButtons={LEFT:null,MIDDLE:null,RIGHT:null},this.touches={ONE:null,TWO:null}}connect(){}disconnect(){}dispose(){}update(){}}function xg(s,e,t,n){const i=VM(n);switch(t){case Kf:return s*e;case Zf:return s*e;case Qf:return s*e*2;case Sl:return s*e/i.components*i.byteLength;case tc:return s*e/i.components*i.byteLength;case So:return s*e*2/i.components*i.byteLength;case nc:return s*e*2/i.components*i.byteLength;case Tl:return s*e*3/i.components*i.byteLength;case Nn:return s*e*4/i.components*i.byteLength;case ic:return s*e*4/i.components*i.byteLength;case ho:case yr:return Math.floor((s+3)/4)*Math.floor((e+3)/4)*8;case vr:case Tr:return Math.floor((s+3)/4)*Math.floor((e+3)/4)*16;case jc:case Zc:return Math.max(s,16)*Math.max(e,8)/4;case Yc:case Kc:return Math.max(s,8)*Math.max(e,8)/2;case Qc:case Pa:return Math.floor((s+3)/4)*Math.floor((e+3)/4)*8;case Da:return Math.floor((s+3)/4)*Math.floor((e+3)/4)*16;case La:return Math.floor((s+3)/4)*Math.floor((e+3)/4)*16;case Ua:return Math.floor((s+4)/5)*Math.floor((e+3)/4)*16;case Ia:return Math.floor((s+4)/5)*Math.floor((e+4)/5)*16;case Fa:return Math.floor((s+5)/6)*Math.floor((e+4)/5)*16;case Ba:return Math.floor((s+5)/6)*Math.floor((e+5)/6)*16;case Oa:return Math.floor((s+7)/8)*Math.floor((e+4)/5)*16;case Va:return Math.floor((s+7)/8)*Math.floor((e+5)/6)*16;case Ga:return Math.floor((s+7)/8)*Math.floor((e+7)/8)*16;case za:return Math.floor((s+9)/10)*Math.floor((e+4)/5)*16;case ka:return Math.floor((s+9)/10)*Math.floor((e+5)/6)*16;case Ha:return Math.floor((s+9)/10)*Math.floor((e+7)/8)*16;case Wa:return Math.floor((s+9)/10)*Math.floor((e+9)/10)*16;case $a:return Math.floor((s+11)/12)*Math.floor((e+9)/10)*16;case Xa:return Math.floor((s+11)/12)*Math.floor((e+11)/12)*16;case fo:case rf:case of:return Math.ceil(s/4)*Math.ceil(e/4)*16;case Jf:case Jc:return Math.ceil(s/4)*Math.ceil(e/4)*8;case el:case tl:return Math.ceil(s/4)*Math.ceil(e/4)*16}throw new Error(`Unable to determine texture byte length for ${t} format.`)}function VM(s){switch(s){case Gn:case lo:return{byteLength:1,components:1};case Yi:case uo:case zn:return{byteLength:2,components:1};case rh:case oh:return{byteLength:2,components:4};case Yt:case Mn:case rn:return{byteLength:4,components:1};case ah:return{byteLength:4,components:3}}throw new Error(`Unknown texture type ${s}.`)}typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:yl}}));typeof window<"u"&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=yl);/**
 * @license
 * Copyright 2010-2024 Three.js Authors
 * SPDX-License-Identifier: MIT
 */function Hx(){let s=null,e=!1,t=null,n=null;function i(r,o){t(r,o),n=s.requestAnimationFrame(i)}return{start:function(){e!==!0&&t!==null&&(n=s.requestAnimationFrame(i),e=!0)},stop:function(){s.cancelAnimationFrame(n),e=!1},setAnimationLoop:function(r){t=r},setContext:function(r){s=r}}}function GM(s){const e=new WeakMap;function t(a,c){const l=a.array,u=a.usage,h=l.byteLength,d=s.createBuffer();s.bindBuffer(c,d),s.bufferData(c,l,u),a.onUploadCallback();let f;if(l instanceof Float32Array)f=s.FLOAT;else if(l instanceof Uint16Array)a.isFloat16BufferAttribute?f=s.HALF_FLOAT:f=s.UNSIGNED_SHORT;else if(l instanceof Int16Array)f=s.SHORT;else if(l instanceof Uint32Array)f=s.UNSIGNED_INT;else if(l instanceof Int32Array)f=s.INT;else if(l instanceof Int8Array)f=s.BYTE;else if(l instanceof Uint8Array)f=s.UNSIGNED_BYTE;else if(l instanceof Uint8ClampedArray)f=s.UNSIGNED_BYTE;else throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+l);return{buffer:d,type:f,bytesPerElement:l.BYTES_PER_ELEMENT,version:a.version,size:h}}function n(a,c,l){const u=c.array,h=c.updateRanges;if(s.bindBuffer(l,a),h.length===0)s.bufferSubData(l,0,u);else{h.sort((f,m)=>f.start-m.start);let d=0;for(let f=1;f<h.length;f++){const m=h[d],_=h[f];_.start<=m.start+m.count+1?m.count=Math.max(m.count,_.start+_.count-m.start):(++d,h[d]=_)}h.length=d+1;for(let f=0,m=h.length;f<m;f++){const _=h[f];s.bufferSubData(l,_.start*u.BYTES_PER_ELEMENT,u,_.start,_.count)}c.clearUpdateRanges()}c.onUploadCallback()}function i(a){return a.isInterleavedBufferAttribute&&(a=a.data),e.get(a)}function r(a){a.isInterleavedBufferAttribute&&(a=a.data);const c=e.get(a);c&&(s.deleteBuffer(c.buffer),e.delete(a))}function o(a,c){if(a.isInterleavedBufferAttribute&&(a=a.data),a.isGLBufferAttribute){const u=e.get(a);(!u||u.version<a.version)&&e.set(a,{buffer:a.buffer,type:a.type,bytesPerElement:a.elementSize,version:a.version});return}const l=e.get(a);if(l===void 0)e.set(a,t(a,c));else if(l.version<a.version){if(l.size!==a.array.byteLength)throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");n(l.buffer,a,c),l.version=a.version}}return{get:i,remove:r,update:o}}var zM=`#ifdef USE_ALPHAHASH
	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;
#endif`,kM=`#ifdef USE_ALPHAHASH
	const float ALPHA_HASH_SCALE = 0.05;
	float hash2D( vec2 value ) {
		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );
	}
	float hash3D( vec3 value ) {
		return hash2D( vec2( hash2D( value.xy ), value.z ) );
	}
	float getAlphaHashThreshold( vec3 position ) {
		float maxDeriv = max(
			length( dFdx( position.xyz ) ),
			length( dFdy( position.xyz ) )
		);
		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );
		vec2 pixScales = vec2(
			exp2( floor( log2( pixScale ) ) ),
			exp2( ceil( log2( pixScale ) ) )
		);
		vec2 alpha = vec2(
			hash3D( floor( pixScales.x * position.xyz ) ),
			hash3D( floor( pixScales.y * position.xyz ) )
		);
		float lerpFactor = fract( log2( pixScale ) );
		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;
		float a = min( lerpFactor, 1.0 - lerpFactor );
		vec3 cases = vec3(
			x * x / ( 2.0 * a * ( 1.0 - a ) ),
			( x - 0.5 * a ) / ( 1.0 - a ),
			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )
		);
		float threshold = ( x < ( 1.0 - a ) )
			? ( ( x < a ) ? cases.x : cases.y )
			: cases.z;
		return clamp( threshold , 1.0e-6, 1.0 );
	}
#endif`,HM=`#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;
#endif`,WM=`#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,$M=`#ifdef USE_ALPHATEST
	#ifdef ALPHA_TO_COVERAGE
	diffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );
	if ( diffuseColor.a == 0.0 ) discard;
	#else
	if ( diffuseColor.a < alphaTest ) discard;
	#endif
#endif`,XM=`#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`,qM=`#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_CLEARCOAT ) 
		clearcoatSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_SHEEN ) 
		sheenSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`,YM=`#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`,jM=`#ifdef USE_BATCHING
	#if ! defined( GL_ANGLE_multi_draw )
	#define gl_DrawID _gl_DrawID
	uniform int _gl_DrawID;
	#endif
	uniform highp sampler2D batchingTexture;
	uniform highp usampler2D batchingIdTexture;
	mat4 getBatchingMatrix( const in float i ) {
		int size = textureSize( batchingTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
	float getIndirectIndex( const in int i ) {
		int size = textureSize( batchingIdTexture, 0 ).x;
		int x = i % size;
		int y = i / size;
		return float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );
	}
#endif
#ifdef USE_BATCHING_COLOR
	uniform sampler2D batchingColorTexture;
	vec3 getBatchingColor( const in float i ) {
		int size = textureSize( batchingColorTexture, 0 ).x;
		int j = int( i );
		int x = j % size;
		int y = j / size;
		return texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;
	}
#endif`,KM=`#ifdef USE_BATCHING
	mat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );
#endif`,ZM=`vec3 transformed = vec3( position );
#ifdef USE_ALPHAHASH
	vPosition = vec3( position );
#endif`,QM=`vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`,JM=`float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
} // validated`,eE=`#ifdef USE_IRIDESCENCE
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {
		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );
	}
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );
	}
	float IorToFresnel0( float transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
	}
	vec3 evalSensitivity( float OPD, vec3 shift ) {
		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;
		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;
	}
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {
		vec3 I;
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {
			return vec3( 1.0 );
		}
		float cosTheta2 = sqrt( cosTheta2Sq );
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );
		vec3 C0 = R12 + Rs;
		I = C0;
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {
			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;
		}
		return max( I, vec3( 0.0 ) );
	}
#endif`,tE=`#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vBumpMapUv );
		vec2 dSTdy = dFdy( vBumpMapUv );
		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );
		vec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`,nE=`#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#ifdef ALPHA_TO_COVERAGE
		float distanceToPlane, distanceGradient;
		float clipOpacity = 1.0;
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
			distanceGradient = fwidth( distanceToPlane ) / 2.0;
			clipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			if ( clipOpacity == 0.0 ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			float unionClipOpacity = 1.0;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
				distanceGradient = fwidth( distanceToPlane ) / 2.0;
				unionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			}
			#pragma unroll_loop_end
			clipOpacity *= 1.0 - unionClipOpacity;
		#endif
		diffuseColor.a *= clipOpacity;
		if ( diffuseColor.a == 0.0 ) discard;
	#else
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			bool clipped = true;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
			}
			#pragma unroll_loop_end
			if ( clipped ) discard;
		#endif
	#endif
#endif`,iE=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`,sE=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`,rE=`#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`,oE=`#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`,aE=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`,cE=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	varying vec3 vColor;
#endif`,lE=`#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif
#ifdef USE_BATCHING_COLOR
	vec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );
	vColor.xyz *= batchingColor.xyz;
#endif`,uE=`#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
#ifdef USE_ALPHAHASH
	varying vec3 vPosition;
#endif
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}
vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
} // validated`,hE=`#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define cubeUV_r0 1.0
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= cubeUV_r1 ) {
			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
		} else if ( roughness >= cubeUV_r4 ) {
			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
		} else if ( roughness >= cubeUV_r5 ) {
			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
		} else if ( roughness >= cubeUV_r6 ) {
			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`,dE=`vec3 transformedNormal = objectNormal;
#ifdef USE_TANGENT
	vec3 transformedTangent = objectTangent;
#endif
#ifdef USE_BATCHING
	mat3 bm = mat3( batchingMatrix );
	transformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );
	transformedNormal = bm * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = bm * transformedTangent;
	#endif
#endif
#ifdef USE_INSTANCING
	mat3 im = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );
	transformedNormal = im * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = im * transformedTangent;
	#endif
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	transformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`,fE=`#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`,pE=`#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );
#endif`,mE=`#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );
	#ifdef DECODE_VIDEO_TEXTURE_EMISSIVE
		emissiveColor = sRGBTransferEOTF( emissiveColor );
	#endif
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`,gE=`#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`,_E="gl_FragColor = linearToOutputTexel( gl_FragColor );",xE=`vec4 LinearTransferOETF( in vec4 value ) {
	return value;
}
vec4 sRGBTransferEOTF( in vec4 value ) {
	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );
}
vec4 sRGBTransferOETF( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}`,yE=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`,vE=`#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	uniform mat3 envMapRotation;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`,TE=`#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`,SE=`#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`,bE=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`,ME=`#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`,EE=`#ifdef USE_FOG
	varying float vFogDepth;
#endif`,AE=`#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`,RE=`#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`,wE=`#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );
	#endif
}`,NE=`#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`,CE=`LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;`,PE=`varying vec3 vViewPosition;
struct LambertMaterial {
	vec3 diffuseColor;
	float specularStrength;
};
void RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert`,DE=`uniform bool receiveShadow;
uniform vec3 ambientLightColor;
#if defined( USE_LIGHT_PROBES )
	uniform vec3 lightProbe[ 9 ];
#endif
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
	if ( cutoffDistance > 0.0 ) {
		distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
	}
	return distanceFalloff;
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`,LE=`#ifdef USE_ENVMAP
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	#ifdef USE_ANISOTROPY
		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {
			#ifdef ENVMAP_TYPE_CUBE_UV
				vec3 bentNormal = cross( bitangent, viewDir );
				bentNormal = normalize( cross( bentNormal, bitangent ) );
				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );
				return getIBLRadiance( viewDir, bentNormal, roughness );
			#else
				return vec3( 0.0 );
			#endif
		}
	#endif
#endif`,UE=`ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`,IE=`varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon`,FE=`BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`,BE=`varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong`,OE=`PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	material.ior = ior;
	#ifdef USE_SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULAR_COLORMAP
			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;
		#endif
		#ifdef USE_SPECULAR_INTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_DISPERSION
	material.dispersion = dispersion;
#endif
#ifdef USE_IRIDESCENCE
	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;
	#ifdef USE_IRIDESCENCEMAP
		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;
	#endif
	#ifdef USE_IRIDESCENCE_THICKNESSMAP
		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;
	#else
		material.iridescenceThickness = iridescenceThicknessMaximum;
	#endif
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEEN_COLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEEN_ROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;
	#endif
#endif
#ifdef USE_ANISOTROPY
	#ifdef USE_ANISOTROPYMAP
		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );
		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;
		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;
	#else
		vec2 anisotropyV = anisotropyVector;
	#endif
	material.anisotropy = length( anisotropyV );
	if( material.anisotropy == 0.0 ) {
		anisotropyV = vec2( 1.0, 0.0 );
	} else {
		anisotropyV /= material.anisotropy;
		material.anisotropy = saturate( material.anisotropy );
	}
	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );
	material.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;
	material.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;
#endif`,VE=`struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	float dispersion;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
	#ifdef IOR
		float ior;
	#endif
	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif
	#ifdef USE_ANISOTROPY
		float anisotropy;
		float alphaT;
		vec3 anisotropyT;
		vec3 anisotropyB;
	#endif
};
vec3 clearcoatSpecularDirect = vec3( 0.0 );
vec3 clearcoatSpecularIndirect = vec3( 0.0 );
vec3 sheenSpecularDirect = vec3( 0.0 );
vec3 sheenSpecularIndirect = vec3(0.0 );
vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );
    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
#ifdef USE_ANISOTROPY
	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {
		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );
		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );
		float v = 0.5 / ( gv + gl );
		return saturate(v);
	}
	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {
		float a2 = alphaT * alphaB;
		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );
		highp float v2 = dot( v, v );
		float w2 = a2 / v2;
		return RECIPROCAL_PI * a2 * pow2 ( w2 );
	}
#endif
#ifdef USE_CLEARCOAT
	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {
		vec3 f0 = material.clearcoatF0;
		float f90 = material.clearcoatF90;
		float roughness = material.clearcoatRoughness;
		float alpha = pow2( roughness );
		vec3 halfDir = normalize( lightDir + viewDir );
		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );
		vec3 F = F_Schlick( f0, f90, dotVH );
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
		return F * ( V * D );
	}
#endif
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {
	vec3 f0 = material.specularColor;
	float f90 = material.specularF90;
	float roughness = material.roughness;
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	#ifdef USE_IRIDESCENCE
		F = mix( F, material.iridescenceFresnel, material.iridescence );
	#endif
	#ifdef USE_ANISOTROPY
		float dotTL = dot( material.anisotropyT, lightDir );
		float dotTV = dot( material.anisotropyT, viewDir );
		float dotTH = dot( material.anisotropyT, halfDir );
		float dotBL = dot( material.anisotropyB, lightDir );
		float dotBV = dot( material.anisotropyB, viewDir );
		float dotBH = dot( material.anisotropyB, halfDir );
		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );
		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );
	#else
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
	#endif
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	#ifdef USE_IRIDESCENCE
		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );
	#else
		vec3 Fr = specularColor;
	#endif
	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometryNormal;
		vec3 viewDir = geometryViewDir;
		vec3 position = geometryPosition;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );
	#endif
	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	#ifdef USE_IRIDESCENCE
		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );
	#else
		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	#endif
	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`,GE=`
vec3 geometryPosition = - vViewPosition;
vec3 geometryNormal = normal;
vec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
vec3 geometryClearcoatNormal = vec3( 0.0 );
#ifdef USE_CLEARCOAT
	geometryClearcoatNormal = clearcoatNormal;
#endif
#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometryViewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometryPosition, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometryPosition, directLight );
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	#if defined( USE_LIGHT_PROBES )
		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );
	#endif
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`,zE=`#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometryNormal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	#ifdef USE_ANISOTROPY
		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );
	#else
		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );
	#endif
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`,kE=`#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif`,HE=`#if defined( USE_LOGDEPTHBUF )
	gl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`,WE=`#if defined( USE_LOGDEPTHBUF )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,$E=`#ifdef USE_LOGDEPTHBUF
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,XE=`#ifdef USE_LOGDEPTHBUF
	vFragDepth = 1.0 + gl_Position.w;
	vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
#endif`,qE=`#ifdef USE_MAP
	vec4 sampledDiffuseColor = texture2D( map, vMapUv );
	#ifdef DECODE_VIDEO_TEXTURE
		sampledDiffuseColor = sRGBTransferEOTF( sampledDiffuseColor );
	#endif
	diffuseColor *= sampledDiffuseColor;
#endif`,YE=`#ifdef USE_MAP
	uniform sampler2D map;
#endif`,jE=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	#if defined( USE_POINTS_UV )
		vec2 uv = vUv;
	#else
		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
	#endif
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`,KE=`#if defined( USE_POINTS_UV )
	varying vec2 vUv;
#else
	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
		uniform mat3 uvTransform;
	#endif
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,ZE=`float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );
	metalnessFactor *= texelMetalness.b;
#endif`,QE=`#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`,JE=`#ifdef USE_INSTANCING_MORPH
	float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	float morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		morphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;
	}
#endif`,eA=`#if defined( USE_MORPHCOLORS )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`,tA=`#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
	}
#endif`,nA=`#ifdef USE_MORPHTARGETS
	#ifndef USE_INSTANCING_MORPH
		uniform float morphTargetBaseInfluence;
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	#endif
	uniform sampler2DArray morphTargetsTexture;
	uniform ivec2 morphTargetsTextureSize;
	vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
		int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
		int y = texelIndex / morphTargetsTextureSize.x;
		int x = texelIndex - y * morphTargetsTextureSize.x;
		ivec3 morphUV = ivec3( x, y, morphTargetIndex );
		return texelFetch( morphTargetsTexture, morphUV, 0 );
	}
#endif`,iA=`#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
	}
#endif`,sA=`float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = dFdx( vViewPosition );
	vec3 fdy = dFdy( vViewPosition );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal *= faceDirection;
	#endif
#endif
#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )
	#ifdef USE_TANGENT
		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn = getTangentFrame( - vViewPosition, normal,
		#if defined( USE_NORMALMAP )
			vNormalMapUv
		#elif defined( USE_CLEARCOAT_NORMALMAP )
			vClearcoatNormalMapUv
		#else
			vUv
		#endif
		);
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn[0] *= faceDirection;
		tbn[1] *= faceDirection;
	#endif
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	#ifdef USE_TANGENT
		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn2[0] *= faceDirection;
		tbn2[1] *= faceDirection;
	#endif
#endif
vec3 nonPerturbedNormal = normal;`,rA=`#ifdef USE_NORMALMAP_OBJECTSPACE
	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( USE_NORMALMAP_TANGENTSPACE )
	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	normal = normalize( tbn * mapN );
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`,oA=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,aA=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,cA=`#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`,lA=`#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef USE_NORMALMAP_OBJECTSPACE
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )
	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {
		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( uv.st );
		vec2 st1 = dFdy( uv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );
		return mat3( T * scale, B * scale, N );
	}
#endif`,uA=`#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = nonPerturbedNormal;
#endif`,hA=`#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	clearcoatNormal = normalize( tbn2 * clearcoatMapN );
#endif`,dA=`#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif`,fA=`#ifdef USE_IRIDESCENCEMAP
	uniform sampler2D iridescenceMap;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform sampler2D iridescenceThicknessMap;
#endif`,pA=`#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`,mA=`vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;const float ShiftRight8 = 1. / 256.;
const float Inv255 = 1. / 255.;
const vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );
const vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 / PackFactors.g );
const vec3 UnpackFactors3 = vec3( UnpackDownscale / PackFactors.rg, 1.0 / PackFactors.b );
const vec4 UnpackFactors4 = vec4( UnpackDownscale / PackFactors.rgb, 1.0 / PackFactors.a );
vec4 packDepthToRGBA( const in float v ) {
	if( v <= 0.0 )
		return vec4( 0., 0., 0., 0. );
	if( v >= 1.0 )
		return vec4( 1., 1., 1., 1. );
	float vuf;
	float af = modf( v * PackFactors.a, vuf );
	float bf = modf( vuf * ShiftRight8, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );
}
vec3 packDepthToRGB( const in float v ) {
	if( v <= 0.0 )
		return vec3( 0., 0., 0. );
	if( v >= 1.0 )
		return vec3( 1., 1., 1. );
	float vuf;
	float bf = modf( v * PackFactors.b, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec3( vuf * Inv255, gf * PackUpscale, bf );
}
vec2 packDepthToRG( const in float v ) {
	if( v <= 0.0 )
		return vec2( 0., 0. );
	if( v >= 1.0 )
		return vec2( 1., 1. );
	float vuf;
	float gf = modf( v * 256., vuf );
	return vec2( vuf * Inv255, gf );
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors4 );
}
float unpackRGBToDepth( const in vec3 v ) {
	return dot( v, UnpackFactors3 );
}
float unpackRGToDepth( const in vec2 v ) {
	return v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;
}
vec4 pack2HalfToRGBA( const in vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( const in vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return depth * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * depth - far );
}`,gA=`#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`,_A=`vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_BATCHING
	mvPosition = batchingMatrix * mvPosition;
#endif
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`,xA=`#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`,yA=`#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`,vA=`float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );
	roughnessFactor *= texelRoughness.g;
#endif`,TA=`#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`,SA=`#if NUM_SPOT_LIGHT_COORDS > 0
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#if NUM_SPOT_LIGHT_MAPS > 0
	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;
		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		float shadow = 1.0;
		vec3 lightToPosition = shadowCoord.xyz;
		
		float lightToPositionLength = length( lightToPosition );
		if ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {
			float dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );			dp += shadowBias;
			vec3 bd3D = normalize( lightToPosition );
			vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
			#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
				vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
				shadow = (
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
				) * ( 1.0 / 9.0 );
			#else
				shadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
			#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
#endif`,bA=`#if NUM_SPOT_LIGHT_COORDS > 0
	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`,MA=`#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )
	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
	vec4 shadowWorldPosition;
#endif
#if defined( USE_SHADOWMAP )
	#if NUM_DIR_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
#endif
#if NUM_SPOT_LIGHT_COORDS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {
		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
#endif`,EA=`float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`,AA=`#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`,RA=`#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	uniform highp sampler2D boneTexture;
	mat4 getBoneMatrix( const in float i ) {
		int size = textureSize( boneTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
#endif`,wA=`#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`,NA=`#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`,CA=`float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`,PA=`#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`,DA=`#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`,LA=`#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return saturate( toneMappingExposure * color );
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 CineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
const mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(
	vec3( 1.6605, - 0.1246, - 0.0182 ),
	vec3( - 0.5876, 1.1329, - 0.1006 ),
	vec3( - 0.0728, - 0.0083, 1.1187 )
);
const mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(
	vec3( 0.6274, 0.0691, 0.0164 ),
	vec3( 0.3293, 0.9195, 0.0880 ),
	vec3( 0.0433, 0.0113, 0.8956 )
);
vec3 agxDefaultContrastApprox( vec3 x ) {
	vec3 x2 = x * x;
	vec3 x4 = x2 * x2;
	return + 15.5 * x4 * x2
		- 40.14 * x4 * x
		+ 31.96 * x4
		- 6.868 * x2 * x
		+ 0.4298 * x2
		+ 0.1191 * x
		- 0.00232;
}
vec3 AgXToneMapping( vec3 color ) {
	const mat3 AgXInsetMatrix = mat3(
		vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),
		vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),
		vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )
	);
	const mat3 AgXOutsetMatrix = mat3(
		vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),
		vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),
		vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )
	);
	const float AgxMinEv = - 12.47393;	const float AgxMaxEv = 4.026069;
	color *= toneMappingExposure;
	color = LINEAR_SRGB_TO_LINEAR_REC2020 * color;
	color = AgXInsetMatrix * color;
	color = max( color, 1e-10 );	color = log2( color );
	color = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );
	color = clamp( color, 0.0, 1.0 );
	color = agxDefaultContrastApprox( color );
	color = AgXOutsetMatrix * color;
	color = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );
	color = LINEAR_REC2020_TO_LINEAR_SRGB * color;
	color = clamp( color, 0.0, 1.0 );
	return color;
}
vec3 NeutralToneMapping( vec3 color ) {
	const float StartCompression = 0.8 - 0.04;
	const float Desaturation = 0.15;
	color *= toneMappingExposure;
	float x = min( color.r, min( color.g, color.b ) );
	float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;
	color -= offset;
	float peak = max( color.r, max( color.g, color.b ) );
	if ( peak < StartCompression ) return color;
	float d = 1. - StartCompression;
	float newPeak = 1. - d * d / ( peak + d - StartCompression );
	color *= newPeak / peak;
	float g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );
	return mix( color, vec3( newPeak ), g );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`,UA=`#ifdef USE_TRANSMISSION
	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmitted = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );
	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );
	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );
#endif`,IA=`#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	float w0( float a ) {
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );
	}
	float w1( float a ) {
		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );
	}
	float w2( float a ){
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );
	}
	float w3( float a ) {
		return ( 1.0 / 6.0 ) * ( a * a * a );
	}
	float g0( float a ) {
		return w0( a ) + w1( a );
	}
	float g1( float a ) {
		return w2( a ) + w3( a );
	}
	float h0( float a ) {
		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );
	}
	float h1( float a ) {
		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );
	}
	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {
		uv = uv * texelSize.zw + 0.5;
		vec2 iuv = floor( uv );
		vec2 fuv = fract( uv );
		float g0x = g0( fuv.x );
		float g1x = g1( fuv.x );
		float h0x = h0( fuv.x );
		float h1x = h1( fuv.x );
		float h0y = h0( fuv.y );
		float h1y = h1( fuv.y );
		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +
			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );
	}
	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {
		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );
		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );
		vec2 fLodSizeInv = 1.0 / fLodSize;
		vec2 cLodSizeInv = 1.0 / cLodSize;
		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );
		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );
		return mix( fSample, cSample, fract( lod ) );
	}
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );
	}
	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( isinf( attenuationDistance ) ) {
			return vec3( 1.0 );
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec4 transmittedLight;
		vec3 transmittance;
		#ifdef USE_DISPERSION
			float halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;
			vec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );
			for ( int i = 0; i < 3; i ++ ) {
				vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );
				vec3 refractedRayExit = position + transmissionRay;
				vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
				vec2 refractionCoords = ndcPos.xy / ndcPos.w;
				refractionCoords += 1.0;
				refractionCoords /= 2.0;
				vec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );
				transmittedLight[ i ] = transmissionSample[ i ];
				transmittedLight.a += transmissionSample.a;
				transmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];
			}
			transmittedLight.a /= 3.0;
		#else
			vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
			vec3 refractedRayExit = position + transmissionRay;
			vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
			vec2 refractionCoords = ndcPos.xy / ndcPos.w;
			refractionCoords += 1.0;
			refractionCoords /= 2.0;
			transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
			transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );
		#endif
		vec3 attenuatedColor = transmittance * transmittedLight.rgb;
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;
		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );
	}
#endif`,FA=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_SPECULARMAP
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,BA=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	uniform mat3 mapTransform;
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	uniform mat3 alphaMapTransform;
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	uniform mat3 lightMapTransform;
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	uniform mat3 aoMapTransform;
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	uniform mat3 bumpMapTransform;
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	uniform mat3 normalMapTransform;
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_DISPLACEMENTMAP
	uniform mat3 displacementMapTransform;
	varying vec2 vDisplacementMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	uniform mat3 emissiveMapTransform;
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	uniform mat3 metalnessMapTransform;
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	uniform mat3 roughnessMapTransform;
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	uniform mat3 anisotropyMapTransform;
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	uniform mat3 clearcoatMapTransform;
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform mat3 clearcoatNormalMapTransform;
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform mat3 clearcoatRoughnessMapTransform;
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	uniform mat3 sheenColorMapTransform;
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	uniform mat3 sheenRoughnessMapTransform;
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	uniform mat3 iridescenceMapTransform;
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform mat3 iridescenceThicknessMapTransform;
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SPECULARMAP
	uniform mat3 specularMapTransform;
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	uniform mat3 specularColorMapTransform;
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	uniform mat3 specularIntensityMapTransform;
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,OA=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	vUv = vec3( uv, 1 ).xy;
#endif
#ifdef USE_MAP
	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ALPHAMAP
	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_LIGHTMAP
	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_AOMAP
	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_BUMPMAP
	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_NORMALMAP
	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_DISPLACEMENTMAP
	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_EMISSIVEMAP
	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_METALNESSMAP
	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ROUGHNESSMAP
	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ANISOTROPYMAP
	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOATMAP
	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCEMAP
	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_COLORMAP
	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULARMAP
	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_COLORMAP
	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_TRANSMISSIONMAP
	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_THICKNESSMAP
	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;
#endif`,VA=`#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_BATCHING
		worldPosition = batchingMatrix * worldPosition;
	#endif
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`;const GA=`varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`,zA=`uniform sampler2D t2D;
uniform float backgroundIntensity;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,kA=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,HA=`#ifdef ENVMAP_TYPE_CUBE
	uniform samplerCube envMap;
#elif defined( ENVMAP_TYPE_CUBE_UV )
	uniform sampler2D envMap;
#endif
uniform float flipEnvMap;
uniform float backgroundBlurriness;
uniform float backgroundIntensity;
uniform mat3 backgroundRotation;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	#ifdef ENVMAP_TYPE_CUBE
		vec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );
	#else
		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,WA=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,$A=`uniform samplerCube tCube;
uniform float tFlip;
uniform float opacity;
varying vec3 vWorldDirection;
void main() {
	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );
	gl_FragColor = texColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,XA=`#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`,qA=`#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#elif DEPTH_PACKING == 3202
		gl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );
	#elif DEPTH_PACKING == 3203
		gl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );
	#endif
}`,YA=`#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`,jA=`#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`,KA=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`,ZA=`uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,QA=`uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,JA=`uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,eR=`#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`,tR=`uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,nR=`#define LAMBERT
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,iR=`#define LAMBERT
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,sR=`#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`,rR=`#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,oR=`#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	vViewPosition = - mvPosition.xyz;
#endif
}`,aR=`#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`,cR=`#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,lR=`#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,uR=`#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`,hR=`#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define USE_SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef USE_SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULAR_COLORMAP
		uniform sampler2D specularColorMap;
	#endif
	#ifdef USE_SPECULAR_INTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_DISPERSION
	uniform float dispersion;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEEN_COLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEEN_ROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
#ifdef USE_ANISOTROPY
	uniform vec2 anisotropyVector;
	#ifdef USE_ANISOTROPYMAP
		uniform sampler2D anisotropyMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;
	#endif
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,dR=`#define TOON
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,fR=`#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,pR=`uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
#ifdef USE_POINTS_UV
	varying vec2 vUv;
	uniform mat3 uvTransform;
#endif
void main() {
	#ifdef USE_POINTS_UV
		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	#endif
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`,mR=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,gR=`#include <common>
#include <batching_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,_R=`uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <logdepthbuf_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	#include <logdepthbuf_fragment>
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`,xR=`uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix[ 3 ];
	vec2 scale = vec2( length( modelMatrix[ 0 ].xyz ), length( modelMatrix[ 1 ].xyz ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,yR=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`,ct={alphahash_fragment:zM,alphahash_pars_fragment:kM,alphamap_fragment:HM,alphamap_pars_fragment:WM,alphatest_fragment:$M,alphatest_pars_fragment:XM,aomap_fragment:qM,aomap_pars_fragment:YM,batching_pars_vertex:jM,batching_vertex:KM,begin_vertex:ZM,beginnormal_vertex:QM,bsdfs:JM,iridescence_fragment:eE,bumpmap_pars_fragment:tE,clipping_planes_fragment:nE,clipping_planes_pars_fragment:iE,clipping_planes_pars_vertex:sE,clipping_planes_vertex:rE,color_fragment:oE,color_pars_fragment:aE,color_pars_vertex:cE,color_vertex:lE,common:uE,cube_uv_reflection_fragment:hE,defaultnormal_vertex:dE,displacementmap_pars_vertex:fE,displacementmap_vertex:pE,emissivemap_fragment:mE,emissivemap_pars_fragment:gE,colorspace_fragment:_E,colorspace_pars_fragment:xE,envmap_fragment:yE,envmap_common_pars_fragment:vE,envmap_pars_fragment:TE,envmap_pars_vertex:SE,envmap_physical_pars_fragment:LE,envmap_vertex:bE,fog_vertex:ME,fog_pars_vertex:EE,fog_fragment:AE,fog_pars_fragment:RE,gradientmap_pars_fragment:wE,lightmap_pars_fragment:NE,lights_lambert_fragment:CE,lights_lambert_pars_fragment:PE,lights_pars_begin:DE,lights_toon_fragment:UE,lights_toon_pars_fragment:IE,lights_phong_fragment:FE,lights_phong_pars_fragment:BE,lights_physical_fragment:OE,lights_physical_pars_fragment:VE,lights_fragment_begin:GE,lights_fragment_maps:zE,lights_fragment_end:kE,logdepthbuf_fragment:HE,logdepthbuf_pars_fragment:WE,logdepthbuf_pars_vertex:$E,logdepthbuf_vertex:XE,map_fragment:qE,map_pars_fragment:YE,map_particle_fragment:jE,map_particle_pars_fragment:KE,metalnessmap_fragment:ZE,metalnessmap_pars_fragment:QE,morphinstance_vertex:JE,morphcolor_vertex:eA,morphnormal_vertex:tA,morphtarget_pars_vertex:nA,morphtarget_vertex:iA,normal_fragment_begin:sA,normal_fragment_maps:rA,normal_pars_fragment:oA,normal_pars_vertex:aA,normal_vertex:cA,normalmap_pars_fragment:lA,clearcoat_normal_fragment_begin:uA,clearcoat_normal_fragment_maps:hA,clearcoat_pars_fragment:dA,iridescence_pars_fragment:fA,opaque_fragment:pA,packing:mA,premultiplied_alpha_fragment:gA,project_vertex:_A,dithering_fragment:xA,dithering_pars_fragment:yA,roughnessmap_fragment:vA,roughnessmap_pars_fragment:TA,shadowmap_pars_fragment:SA,shadowmap_pars_vertex:bA,shadowmap_vertex:MA,shadowmask_pars_fragment:EA,skinbase_vertex:AA,skinning_pars_vertex:RA,skinning_vertex:wA,skinnormal_vertex:NA,specularmap_fragment:CA,specularmap_pars_fragment:PA,tonemapping_fragment:DA,tonemapping_pars_fragment:LA,transmission_fragment:UA,transmission_pars_fragment:IA,uv_pars_fragment:FA,uv_pars_vertex:BA,uv_vertex:OA,worldpos_vertex:VA,background_vert:GA,background_frag:zA,backgroundCube_vert:kA,backgroundCube_frag:HA,cube_vert:WA,cube_frag:$A,depth_vert:XA,depth_frag:qA,distanceRGBA_vert:YA,distanceRGBA_frag:jA,equirect_vert:KA,equirect_frag:ZA,linedashed_vert:QA,linedashed_frag:JA,meshbasic_vert:eR,meshbasic_frag:tR,meshlambert_vert:nR,meshlambert_frag:iR,meshmatcap_vert:sR,meshmatcap_frag:rR,meshnormal_vert:oR,meshnormal_frag:aR,meshphong_vert:cR,meshphong_frag:lR,meshphysical_vert:uR,meshphysical_frag:hR,meshtoon_vert:dR,meshtoon_frag:fR,points_vert:pR,points_frag:mR,shadow_vert:gR,shadow_frag:_R,sprite_vert:xR,sprite_frag:yR},ge={common:{diffuse:{value:new De(16777215)},opacity:{value:1},map:{value:null},mapTransform:{value:new qe},alphaMap:{value:null},alphaMapTransform:{value:new qe},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:new qe}},envmap:{envMap:{value:null},envMapRotation:{value:new qe},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:new qe}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:new qe}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:new qe},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:new qe},normalScale:{value:new Ee(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:new qe},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:new qe}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:new qe}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:new qe}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new De(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new De(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaMapTransform:{value:new qe},alphaTest:{value:0},uvTransform:{value:new qe}},sprite:{diffuse:{value:new De(16777215)},opacity:{value:1},center:{value:new Ee(.5,.5)},rotation:{value:0},map:{value:null},mapTransform:{value:new qe},alphaMap:{value:null},alphaMapTransform:{value:new qe},alphaTest:{value:0}}},os={basic:{uniforms:qn([ge.common,ge.specularmap,ge.envmap,ge.aomap,ge.lightmap,ge.fog]),vertexShader:ct.meshbasic_vert,fragmentShader:ct.meshbasic_frag},lambert:{uniforms:qn([ge.common,ge.specularmap,ge.envmap,ge.aomap,ge.lightmap,ge.emissivemap,ge.bumpmap,ge.normalmap,ge.displacementmap,ge.fog,ge.lights,{emissive:{value:new De(0)}}]),vertexShader:ct.meshlambert_vert,fragmentShader:ct.meshlambert_frag},phong:{uniforms:qn([ge.common,ge.specularmap,ge.envmap,ge.aomap,ge.lightmap,ge.emissivemap,ge.bumpmap,ge.normalmap,ge.displacementmap,ge.fog,ge.lights,{emissive:{value:new De(0)},specular:{value:new De(1118481)},shininess:{value:30}}]),vertexShader:ct.meshphong_vert,fragmentShader:ct.meshphong_frag},standard:{uniforms:qn([ge.common,ge.envmap,ge.aomap,ge.lightmap,ge.emissivemap,ge.bumpmap,ge.normalmap,ge.displacementmap,ge.roughnessmap,ge.metalnessmap,ge.fog,ge.lights,{emissive:{value:new De(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:ct.meshphysical_vert,fragmentShader:ct.meshphysical_frag},toon:{uniforms:qn([ge.common,ge.aomap,ge.lightmap,ge.emissivemap,ge.bumpmap,ge.normalmap,ge.displacementmap,ge.gradientmap,ge.fog,ge.lights,{emissive:{value:new De(0)}}]),vertexShader:ct.meshtoon_vert,fragmentShader:ct.meshtoon_frag},matcap:{uniforms:qn([ge.common,ge.bumpmap,ge.normalmap,ge.displacementmap,ge.fog,{matcap:{value:null}}]),vertexShader:ct.meshmatcap_vert,fragmentShader:ct.meshmatcap_frag},points:{uniforms:qn([ge.points,ge.fog]),vertexShader:ct.points_vert,fragmentShader:ct.points_frag},dashed:{uniforms:qn([ge.common,ge.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:ct.linedashed_vert,fragmentShader:ct.linedashed_frag},depth:{uniforms:qn([ge.common,ge.displacementmap]),vertexShader:ct.depth_vert,fragmentShader:ct.depth_frag},normal:{uniforms:qn([ge.common,ge.bumpmap,ge.normalmap,ge.displacementmap,{opacity:{value:1}}]),vertexShader:ct.meshnormal_vert,fragmentShader:ct.meshnormal_frag},sprite:{uniforms:qn([ge.sprite,ge.fog]),vertexShader:ct.sprite_vert,fragmentShader:ct.sprite_frag},background:{uniforms:{uvTransform:{value:new qe},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:ct.background_vert,fragmentShader:ct.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1},backgroundRotation:{value:new qe}},vertexShader:ct.backgroundCube_vert,fragmentShader:ct.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:ct.cube_vert,fragmentShader:ct.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:ct.equirect_vert,fragmentShader:ct.equirect_frag},distanceRGBA:{uniforms:qn([ge.common,ge.displacementmap,{referencePosition:{value:new U},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:ct.distanceRGBA_vert,fragmentShader:ct.distanceRGBA_frag},shadow:{uniforms:qn([ge.lights,ge.fog,{color:{value:new De(0)},opacity:{value:1}}]),vertexShader:ct.shadow_vert,fragmentShader:ct.shadow_frag}};os.physical={uniforms:qn([os.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:new qe},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:new qe},clearcoatNormalScale:{value:new Ee(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:new qe},dispersion:{value:0},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:new qe},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:new qe},sheen:{value:0},sheenColor:{value:new De(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:new qe},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:new qe},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:new qe},transmissionSamplerSize:{value:new Ee},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:new qe},attenuationDistance:{value:0},attenuationColor:{value:new De(0)},specularColor:{value:new De(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:new qe},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:new qe},anisotropyVector:{value:new Ee},anisotropyMap:{value:null},anisotropyMapTransform:{value:new qe}}]),vertexShader:ct.meshphysical_vert,fragmentShader:ct.meshphysical_frag};const au={r:0,b:0,g:0},Gr=new Mi,vR=new ut;function TR(s,e,t,n,i,r,o){const a=new De(0);let c=r===!0?0:1,l,u,h=null,d=0,f=null;function m(S){let v=S.isScene===!0?S.background:null;return v&&v.isTexture&&(v=(S.backgroundBlurriness>0?t:e).get(v)),v}function _(S){let v=!1;const P=m(S);P===null?p(a,c):P&&P.isColor&&(p(P,1),v=!0);const N=s.xr.getEnvironmentBlendMode();N==="additive"?n.buffers.color.setClear(0,0,0,1,o):N==="alpha-blend"&&n.buffers.color.setClear(0,0,0,0,o),(s.autoClear||v)&&(n.buffers.depth.setTest(!0),n.buffers.depth.setMask(!0),n.buffers.color.setMask(!0),s.clear(s.autoClearColor,s.autoClearDepth,s.autoClearStencil))}function g(S,v){const P=m(v);P&&(P.isCubeTexture||P.mapping===yo)?(u===void 0&&(u=new On(new Pr(1,1,1),new Rr({name:"BackgroundCubeMaterial",uniforms:Ya(os.backgroundCube.uniforms),vertexShader:os.backgroundCube.vertexShader,fragmentShader:os.backgroundCube.fragmentShader,side:Wt,depthTest:!1,depthWrite:!1,fog:!1})),u.geometry.deleteAttribute("normal"),u.geometry.deleteAttribute("uv"),u.onBeforeRender=function(N,w,F){this.matrixWorld.copyPosition(F.matrixWorld)},Object.defineProperty(u.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),i.update(u)),Gr.copy(v.backgroundRotation),Gr.x*=-1,Gr.y*=-1,Gr.z*=-1,P.isCubeTexture&&P.isRenderTargetTexture===!1&&(Gr.y*=-1,Gr.z*=-1),u.material.uniforms.envMap.value=P,u.material.uniforms.flipEnvMap.value=P.isCubeTexture&&P.isRenderTargetTexture===!1?-1:1,u.material.uniforms.backgroundBlurriness.value=v.backgroundBlurriness,u.material.uniforms.backgroundIntensity.value=v.backgroundIntensity,u.material.uniforms.backgroundRotation.value.setFromMatrix4(vR.makeRotationFromEuler(Gr)),u.material.toneMapped=rt.getTransfer(P.colorSpace)!==Nt,(h!==P||d!==P.version||f!==s.toneMapping)&&(u.material.needsUpdate=!0,h=P,d=P.version,f=s.toneMapping),u.layers.enableAll(),S.unshift(u,u.geometry,u.material,0,0,null)):P&&P.isTexture&&(l===void 0&&(l=new On(new fh(2,2),new Rr({name:"BackgroundMaterial",uniforms:Ya(os.background.uniforms),vertexShader:os.background.vertexShader,fragmentShader:os.background.fragmentShader,side:Ki,depthTest:!1,depthWrite:!1,fog:!1})),l.geometry.deleteAttribute("normal"),Object.defineProperty(l.material,"map",{get:function(){return this.uniforms.t2D.value}}),i.update(l)),l.material.uniforms.t2D.value=P,l.material.uniforms.backgroundIntensity.value=v.backgroundIntensity,l.material.toneMapped=rt.getTransfer(P.colorSpace)!==Nt,P.matrixAutoUpdate===!0&&P.updateMatrix(),l.material.uniforms.uvTransform.value.copy(P.matrix),(h!==P||d!==P.version||f!==s.toneMapping)&&(l.material.needsUpdate=!0,h=P,d=P.version,f=s.toneMapping),l.layers.enableAll(),S.unshift(l,l.geometry,l.material,0,0,null))}function p(S,v){S.getRGB(au,Ux(s)),n.buffers.color.setClear(au.r,au.g,au.b,v,o)}function T(){u!==void 0&&(u.geometry.dispose(),u.material.dispose()),l!==void 0&&(l.geometry.dispose(),l.material.dispose())}return{getClearColor:function(){return a},setClearColor:function(S,v=1){a.set(S),c=v,p(a,c)},getClearAlpha:function(){return c},setClearAlpha:function(S){c=S,p(a,c)},render:_,addToRenderList:g,dispose:T}}function SR(s,e){const t=s.getParameter(s.MAX_VERTEX_ATTRIBS),n={},i=d(null);let r=i,o=!1;function a(M,D,Z,$,ne){let oe=!1;const re=h($,Z,D);r!==re&&(r=re,l(r.object)),oe=f(M,$,Z,ne),oe&&m(M,$,Z,ne),ne!==null&&e.update(ne,s.ELEMENT_ARRAY_BUFFER),(oe||o)&&(o=!1,v(M,D,Z,$),ne!==null&&s.bindBuffer(s.ELEMENT_ARRAY_BUFFER,e.get(ne).buffer))}function c(){return s.createVertexArray()}function l(M){return s.bindVertexArray(M)}function u(M){return s.deleteVertexArray(M)}function h(M,D,Z){const $=Z.wireframe===!0;let ne=n[M.id];ne===void 0&&(ne={},n[M.id]=ne);let oe=ne[D.id];oe===void 0&&(oe={},ne[D.id]=oe);let re=oe[$];return re===void 0&&(re=d(c()),oe[$]=re),re}function d(M){const D=[],Z=[],$=[];for(let ne=0;ne<t;ne++)D[ne]=0,Z[ne]=0,$[ne]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:D,enabledAttributes:Z,attributeDivisors:$,object:M,attributes:{},index:null}}function f(M,D,Z,$){const ne=r.attributes,oe=D.attributes;let re=0;const ue=Z.getAttributes();for(const Q in ue)if(ue[Q].location>=0){const Re=ne[Q];let Ge=oe[Q];if(Ge===void 0&&(Q==="instanceMatrix"&&M.instanceMatrix&&(Ge=M.instanceMatrix),Q==="instanceColor"&&M.instanceColor&&(Ge=M.instanceColor)),Re===void 0||Re.attribute!==Ge||Ge&&Re.data!==Ge.data)return!0;re++}return r.attributesNum!==re||r.index!==$}function m(M,D,Z,$){const ne={},oe=D.attributes;let re=0;const ue=Z.getAttributes();for(const Q in ue)if(ue[Q].location>=0){let Re=oe[Q];Re===void 0&&(Q==="instanceMatrix"&&M.instanceMatrix&&(Re=M.instanceMatrix),Q==="instanceColor"&&M.instanceColor&&(Re=M.instanceColor));const Ge={};Ge.attribute=Re,Re&&Re.data&&(Ge.data=Re.data),ne[Q]=Ge,re++}r.attributes=ne,r.attributesNum=re,r.index=$}function _(){const M=r.newAttributes;for(let D=0,Z=M.length;D<Z;D++)M[D]=0}function g(M){p(M,0)}function p(M,D){const Z=r.newAttributes,$=r.enabledAttributes,ne=r.attributeDivisors;Z[M]=1,$[M]===0&&(s.enableVertexAttribArray(M),$[M]=1),ne[M]!==D&&(s.vertexAttribDivisor(M,D),ne[M]=D)}function T(){const M=r.newAttributes,D=r.enabledAttributes;for(let Z=0,$=D.length;Z<$;Z++)D[Z]!==M[Z]&&(s.disableVertexAttribArray(Z),D[Z]=0)}function S(M,D,Z,$,ne,oe,re){re===!0?s.vertexAttribIPointer(M,D,Z,ne,oe):s.vertexAttribPointer(M,D,Z,$,ne,oe)}function v(M,D,Z,$){_();const ne=$.attributes,oe=Z.getAttributes(),re=D.defaultAttributeValues;for(const ue in oe){const Q=oe[ue];if(Q.location>=0){let ye=ne[ue];if(ye===void 0&&(ue==="instanceMatrix"&&M.instanceMatrix&&(ye=M.instanceMatrix),ue==="instanceColor"&&M.instanceColor&&(ye=M.instanceColor)),ye!==void 0){const Re=ye.normalized,Ge=ye.itemSize,dt=e.get(ye);if(dt===void 0)continue;const Ut=dt.buffer,ie=dt.type,pe=dt.bytesPerElement,Le=ie===s.INT||ie===s.UNSIGNED_INT||ye.gpuType===Mn;if(ye.isInterleavedBufferAttribute){const ve=ye.data,Xe=ve.stride,et=ye.offset;if(ve.isInstancedInterleavedBuffer){for(let ft=0;ft<Q.locationSize;ft++)p(Q.location+ft,ve.meshPerAttribute);M.isInstancedMesh!==!0&&$._maxInstanceCount===void 0&&($._maxInstanceCount=ve.meshPerAttribute*ve.count)}else for(let ft=0;ft<Q.locationSize;ft++)g(Q.location+ft);s.bindBuffer(s.ARRAY_BUFFER,Ut);for(let ft=0;ft<Q.locationSize;ft++)S(Q.location+ft,Ge/Q.locationSize,ie,Re,Xe*pe,(et+Ge/Q.locationSize*ft)*pe,Le)}else{if(ye.isInstancedBufferAttribute){for(let ve=0;ve<Q.locationSize;ve++)p(Q.location+ve,ye.meshPerAttribute);M.isInstancedMesh!==!0&&$._maxInstanceCount===void 0&&($._maxInstanceCount=ye.meshPerAttribute*ye.count)}else for(let ve=0;ve<Q.locationSize;ve++)g(Q.location+ve);s.bindBuffer(s.ARRAY_BUFFER,Ut);for(let ve=0;ve<Q.locationSize;ve++)S(Q.location+ve,Ge/Q.locationSize,ie,Re,Ge*pe,Ge/Q.locationSize*ve*pe,Le)}}else if(re!==void 0){const Re=re[ue];if(Re!==void 0)switch(Re.length){case 2:s.vertexAttrib2fv(Q.location,Re);break;case 3:s.vertexAttrib3fv(Q.location,Re);break;case 4:s.vertexAttrib4fv(Q.location,Re);break;default:s.vertexAttrib1fv(Q.location,Re)}}}}T()}function P(){F();for(const M in n){const D=n[M];for(const Z in D){const $=D[Z];for(const ne in $)u($[ne].object),delete $[ne];delete D[Z]}delete n[M]}}function N(M){if(n[M.id]===void 0)return;const D=n[M.id];for(const Z in D){const $=D[Z];for(const ne in $)u($[ne].object),delete $[ne];delete D[Z]}delete n[M.id]}function w(M){for(const D in n){const Z=n[D];if(Z[M.id]===void 0)continue;const $=Z[M.id];for(const ne in $)u($[ne].object),delete $[ne];delete Z[M.id]}}function F(){E(),o=!0,r!==i&&(r=i,l(r.object))}function E(){i.geometry=null,i.program=null,i.wireframe=!1}return{setup:a,reset:F,resetDefaultState:E,dispose:P,releaseStatesOfGeometry:N,releaseStatesOfProgram:w,initAttributes:_,enableAttribute:g,disableUnusedAttributes:T}}function bR(s,e,t){let n;function i(l){n=l}function r(l,u){s.drawArrays(n,l,u),t.update(u,n,1)}function o(l,u,h){h!==0&&(s.drawArraysInstanced(n,l,u,h),t.update(u,n,h))}function a(l,u,h){if(h===0)return;e.get("WEBGL_multi_draw").multiDrawArraysWEBGL(n,l,0,u,0,h);let f=0;for(let m=0;m<h;m++)f+=u[m];t.update(f,n,1)}function c(l,u,h,d){if(h===0)return;const f=e.get("WEBGL_multi_draw");if(f===null)for(let m=0;m<l.length;m++)o(l[m],u[m],d[m]);else{f.multiDrawArraysInstancedWEBGL(n,l,0,u,0,d,0,h);let m=0;for(let _=0;_<h;_++)m+=u[_]*d[_];t.update(m,n,1)}}this.setMode=i,this.render=r,this.renderInstances=o,this.renderMultiDraw=a,this.renderMultiDrawInstances=c}function MR(s,e,t,n){let i;function r(){if(i!==void 0)return i;if(e.has("EXT_texture_filter_anisotropic")===!0){const w=e.get("EXT_texture_filter_anisotropic");i=s.getParameter(w.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else i=0;return i}function o(w){return!(w!==Nn&&n.convert(w)!==s.getParameter(s.IMPLEMENTATION_COLOR_READ_FORMAT))}function a(w){const F=w===zn&&(e.has("EXT_color_buffer_half_float")||e.has("EXT_color_buffer_float"));return!(w!==Gn&&n.convert(w)!==s.getParameter(s.IMPLEMENTATION_COLOR_READ_TYPE)&&w!==rn&&!F)}function c(w){if(w==="highp"){if(s.getShaderPrecisionFormat(s.VERTEX_SHADER,s.HIGH_FLOAT).precision>0&&s.getShaderPrecisionFormat(s.FRAGMENT_SHADER,s.HIGH_FLOAT).precision>0)return"highp";w="mediump"}return w==="mediump"&&s.getShaderPrecisionFormat(s.VERTEX_SHADER,s.MEDIUM_FLOAT).precision>0&&s.getShaderPrecisionFormat(s.FRAGMENT_SHADER,s.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}let l=t.precision!==void 0?t.precision:"highp";const u=c(l);u!==l&&(console.warn("THREE.WebGLRenderer:",l,"not supported, using",u,"instead."),l=u);const h=t.logarithmicDepthBuffer===!0,d=t.reverseDepthBuffer===!0&&e.has("EXT_clip_control"),f=s.getParameter(s.MAX_TEXTURE_IMAGE_UNITS),m=s.getParameter(s.MAX_VERTEX_TEXTURE_IMAGE_UNITS),_=s.getParameter(s.MAX_TEXTURE_SIZE),g=s.getParameter(s.MAX_CUBE_MAP_TEXTURE_SIZE),p=s.getParameter(s.MAX_VERTEX_ATTRIBS),T=s.getParameter(s.MAX_VERTEX_UNIFORM_VECTORS),S=s.getParameter(s.MAX_VARYING_VECTORS),v=s.getParameter(s.MAX_FRAGMENT_UNIFORM_VECTORS),P=m>0,N=s.getParameter(s.MAX_SAMPLES);return{isWebGL2:!0,getMaxAnisotropy:r,getMaxPrecision:c,textureFormatReadable:o,textureTypeReadable:a,precision:l,logarithmicDepthBuffer:h,reverseDepthBuffer:d,maxTextures:f,maxVertexTextures:m,maxTextureSize:_,maxCubemapSize:g,maxAttributes:p,maxVertexUniforms:T,maxVaryings:S,maxFragmentUniforms:v,vertexTextures:P,maxSamples:N}}function ER(s){const e=this;let t=null,n=0,i=!1,r=!1;const o=new ei,a=new qe,c={value:null,needsUpdate:!1};this.uniform=c,this.numPlanes=0,this.numIntersection=0,this.init=function(h,d){const f=h.length!==0||d||n!==0||i;return i=d,n=h.length,f},this.beginShadows=function(){r=!0,u(null)},this.endShadows=function(){r=!1},this.setGlobalState=function(h,d){t=u(h,d,0)},this.setState=function(h,d,f){const m=h.clippingPlanes,_=h.clipIntersection,g=h.clipShadows,p=s.get(h);if(!i||m===null||m.length===0||r&&!g)r?u(null):l();else{const T=r?0:n,S=T*4;let v=p.clippingState||null;c.value=v,v=u(m,d,S,f);for(let P=0;P!==S;++P)v[P]=t[P];p.clippingState=v,this.numIntersection=_?this.numPlanes:0,this.numPlanes+=T}};function l(){c.value!==t&&(c.value=t,c.needsUpdate=n>0),e.numPlanes=n,e.numIntersection=0}function u(h,d,f,m){const _=h!==null?h.length:0;let g=null;if(_!==0){if(g=c.value,m!==!0||g===null){const p=f+_*4,T=d.matrixWorldInverse;a.getNormalMatrix(T),(g===null||g.length<p)&&(g=new Float32Array(p));for(let S=0,v=f;S!==_;++S,v+=4)o.copy(h[S]).applyMatrix4(T,a),o.normal.toArray(g,v),g[v+3]=o.constant}c.value=g,c.needsUpdate=!0}return e.numPlanes=_,e.numIntersection=0,g}}function AR(s){let e=new WeakMap;function t(o,a){return a===Mr?o.mapping=Fi:a===Er&&(o.mapping=Bi),o}function n(o){if(o&&o.isTexture){const a=o.mapping;if(a===Mr||a===Er)if(e.has(o)){const c=e.get(o).texture;return t(c,o.mapping)}else{const c=o.image;if(c&&c.height>0){const l=new Bx(c.height);return l.fromEquirectangularTexture(s,o),e.set(o,l),o.addEventListener("dispose",i),t(l.texture,o.mapping)}else return null}}return o}function i(o){const a=o.target;a.removeEventListener("dispose",i);const c=e.get(a);c!==void 0&&(e.delete(a),c.dispose())}function r(){e=new WeakMap}return{get:n,dispose:r}}const sa=4,yg=[.125,.215,.35,.446,.526,.582],Kr=20,dd=new Ml,vg=new De;let fd=null,pd=0,md=0,gd=!1;const qr=(1+Math.sqrt(5))/2,$o=1/qr,Tg=[new U(-qr,$o,0),new U(qr,$o,0),new U(-$o,0,qr),new U($o,0,qr),new U(0,qr,-$o),new U(0,qr,$o),new U(-1,1,-1),new U(1,1,-1),new U(-1,1,1),new U(1,1,1)];let Sg=class{constructor(e){this._renderer=e,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(e,t=0,n=.1,i=100){fd=this._renderer.getRenderTarget(),pd=this._renderer.getActiveCubeFace(),md=this._renderer.getActiveMipmapLevel(),gd=this._renderer.xr.enabled,this._renderer.xr.enabled=!1,this._setSize(256);const r=this._allocateTargets();return r.depthBuffer=!0,this._sceneToCubeUV(e,n,i,r),t>0&&this._blur(r,0,0,t),this._applyPMREM(r),this._cleanup(r),r}fromEquirectangular(e,t=null){return this._fromTexture(e,t)}fromCubemap(e,t=null){return this._fromTexture(e,t)}compileCubemapShader(){this._cubemapMaterial===null&&(this._cubemapMaterial=Eg(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){this._equirectMaterial===null&&(this._equirectMaterial=Mg(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),this._cubemapMaterial!==null&&this._cubemapMaterial.dispose(),this._equirectMaterial!==null&&this._equirectMaterial.dispose()}_setSize(e){this._lodMax=Math.floor(Math.log2(e)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){this._blurMaterial!==null&&this._blurMaterial.dispose(),this._pingPongRenderTarget!==null&&this._pingPongRenderTarget.dispose();for(let e=0;e<this._lodPlanes.length;e++)this._lodPlanes[e].dispose()}_cleanup(e){this._renderer.setRenderTarget(fd,pd,md),this._renderer.xr.enabled=gd,e.scissorTest=!1,cu(e,0,0,e.width,e.height)}_fromTexture(e,t){e.mapping===Fi||e.mapping===Bi?this._setSize(e.image.length===0?16:e.image[0].width||e.image[0].image.width):this._setSize(e.image.width/4),fd=this._renderer.getRenderTarget(),pd=this._renderer.getActiveCubeFace(),md=this._renderer.getActiveMipmapLevel(),gd=this._renderer.xr.enabled,this._renderer.xr.enabled=!1;const n=t||this._allocateTargets();return this._textureToCubeUV(e,n),this._applyPMREM(n),this._cleanup(n),n}_allocateTargets(){const e=3*Math.max(this._cubeSize,112),t=4*this._cubeSize,n={magFilter:yn,minFilter:yn,generateMipmaps:!1,type:zn,format:Nn,colorSpace:bi,depthBuffer:!1},i=bg(e,t,n);if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==e||this._pingPongRenderTarget.height!==t){this._pingPongRenderTarget!==null&&this._dispose(),this._pingPongRenderTarget=bg(e,t,n);const{_lodMax:r}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=RR(r)),this._blurMaterial=wR(r,e,t)}return i}_compileMaterial(e){const t=new On(this._lodPlanes[0],e);this._renderer.compile(t,dd)}_sceneToCubeUV(e,t,n,i){const a=new Yn(90,1,t,n),c=[1,-1,1,1,1,1],l=[1,1,1,-1,-1,-1],u=this._renderer,h=u.autoClear,d=u.toneMapping;u.getClearColor(vg),u.toneMapping=ri,u.autoClear=!1;const f=new uh({name:"PMREM.Background",side:Wt,depthWrite:!1,depthTest:!1}),m=new On(new Pr,f);let _=!1;const g=e.background;g?g.isColor&&(f.color.copy(g),e.background=null,_=!0):(f.color.copy(vg),_=!0);for(let p=0;p<6;p++){const T=p%3;T===0?(a.up.set(0,c[p],0),a.lookAt(l[p],0,0)):T===1?(a.up.set(0,0,c[p]),a.lookAt(0,l[p],0)):(a.up.set(0,c[p],0),a.lookAt(0,0,l[p]));const S=this._cubeSize;cu(i,T*S,p>2?S:0,S,S),u.setRenderTarget(i),_&&u.render(m,a),u.render(e,a)}m.geometry.dispose(),m.material.dispose(),u.toneMapping=d,u.autoClear=h,e.background=g}_textureToCubeUV(e,t){const n=this._renderer,i=e.mapping===Fi||e.mapping===Bi;i?(this._cubemapMaterial===null&&(this._cubemapMaterial=Eg()),this._cubemapMaterial.uniforms.flipEnvMap.value=e.isRenderTargetTexture===!1?-1:1):this._equirectMaterial===null&&(this._equirectMaterial=Mg());const r=i?this._cubemapMaterial:this._equirectMaterial,o=new On(this._lodPlanes[0],r),a=r.uniforms;a.envMap.value=e;const c=this._cubeSize;cu(t,0,0,3*c,2*c),n.setRenderTarget(t),n.render(o,dd)}_applyPMREM(e){const t=this._renderer,n=t.autoClear;t.autoClear=!1;const i=this._lodPlanes.length;for(let r=1;r<i;r++){const o=Math.sqrt(this._sigmas[r]*this._sigmas[r]-this._sigmas[r-1]*this._sigmas[r-1]),a=Tg[(i-r-1)%Tg.length];this._blur(e,r-1,r,o,a)}t.autoClear=n}_blur(e,t,n,i,r){const o=this._pingPongRenderTarget;this._halfBlur(e,o,t,n,i,"latitudinal",r),this._halfBlur(o,e,n,n,i,"longitudinal",r)}_halfBlur(e,t,n,i,r,o,a){const c=this._renderer,l=this._blurMaterial;o!=="latitudinal"&&o!=="longitudinal"&&console.error("blur direction must be either latitudinal or longitudinal!");const u=3,h=new On(this._lodPlanes[i],l),d=l.uniforms,f=this._sizeLods[n]-1,m=isFinite(r)?Math.PI/(2*f):2*Math.PI/(2*Kr-1),_=r/m,g=isFinite(r)?1+Math.floor(u*_):Kr;g>Kr&&console.warn(`sigmaRadians, ${r}, is too large and will clip, as it requested ${g} samples when the maximum is set to ${Kr}`);const p=[];let T=0;for(let w=0;w<Kr;++w){const F=w/_,E=Math.exp(-F*F/2);p.push(E),w===0?T+=E:w<g&&(T+=2*E)}for(let w=0;w<p.length;w++)p[w]=p[w]/T;d.envMap.value=e.texture,d.samples.value=g,d.weights.value=p,d.latitudinal.value=o==="latitudinal",a&&(d.poleAxis.value=a);const{_lodMax:S}=this;d.dTheta.value=m,d.mipInt.value=S-n;const v=this._sizeLods[i],P=3*v*(i>S-sa?i-S+sa:0),N=4*(this._cubeSize-v);cu(t,P,N,3*v,2*v),c.setRenderTarget(t),c.render(h,dd)}};function RR(s){const e=[],t=[],n=[];let i=s;const r=s-sa+1+yg.length;for(let o=0;o<r;o++){const a=Math.pow(2,i);t.push(a);let c=1/a;o>s-sa?c=yg[o-s+sa-1]:o===0&&(c=0),n.push(c);const l=1/(a-2),u=-l,h=1+l,d=[u,u,h,u,h,h,u,u,h,h,u,h],f=6,m=6,_=3,g=2,p=1,T=new Float32Array(_*m*f),S=new Float32Array(g*m*f),v=new Float32Array(p*m*f);for(let N=0;N<f;N++){const w=N%3*2/3-1,F=N>2?0:-1,E=[w,F,0,w+2/3,F,0,w+2/3,F+1,0,w,F,0,w+2/3,F+1,0,w,F+1,0];T.set(E,_*m*N),S.set(d,g*m*N);const M=[N,N,N,N,N,N];v.set(M,p*m*N)}const P=new Qi;P.setAttribute("position",new Pn(T,_)),P.setAttribute("uv",new Pn(S,g)),P.setAttribute("faceIndex",new Pn(v,p)),e.push(P),i>sa&&i--}return{lodPlanes:e,sizeLods:t,sigmas:n}}function bg(s,e,t){const n=new bo(s,e,t);return n.texture.mapping=yo,n.texture.name="PMREM.cubeUv",n.scissorTest=!0,n}function cu(s,e,t,n,i){s.viewport.set(e,t,n,i),s.scissor.set(e,t,n,i)}function wR(s,e,t){const n=new Float32Array(Kr),i=new U(0,1,0);return new Rr({name:"SphericalGaussianBlur",defines:{n:Kr,CUBEUV_TEXEL_WIDTH:1/e,CUBEUV_TEXEL_HEIGHT:1/t,CUBEUV_MAX_MIP:`${s}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:n},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:i}},vertexShader:_p(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,blending:Si,depthTest:!1,depthWrite:!1})}function Mg(){return new Rr({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:_p(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,blending:Si,depthTest:!1,depthWrite:!1})}function Eg(){return new Rr({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:_p(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,blending:Si,depthTest:!1,depthWrite:!1})}function _p(){return`

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`}function NR(s){let e=new WeakMap,t=null;function n(a){if(a&&a.isTexture){const c=a.mapping,l=c===Mr||c===Er,u=c===Fi||c===Bi;if(l||u){let h=e.get(a);const d=h!==void 0?h.texture.pmremVersion:0;if(a.isRenderTargetTexture&&a.pmremVersion!==d)return t===null&&(t=new Sg(s)),h=l?t.fromEquirectangular(a,h):t.fromCubemap(a,h),h.texture.pmremVersion=a.pmremVersion,e.set(a,h),h.texture;if(h!==void 0)return h.texture;{const f=a.image;return l&&f&&f.height>0||u&&f&&i(f)?(t===null&&(t=new Sg(s)),h=l?t.fromEquirectangular(a):t.fromCubemap(a),h.texture.pmremVersion=a.pmremVersion,e.set(a,h),a.addEventListener("dispose",r),h.texture):null}}}return a}function i(a){let c=0;const l=6;for(let u=0;u<l;u++)a[u]!==void 0&&c++;return c===l}function r(a){const c=a.target;c.removeEventListener("dispose",r);const l=e.get(c);l!==void 0&&(e.delete(c),l.dispose())}function o(){e=new WeakMap,t!==null&&(t.dispose(),t=null)}return{get:n,dispose:o}}function CR(s){const e={};function t(n){if(e[n]!==void 0)return e[n];let i;switch(n){case"WEBGL_depth_texture":i=s.getExtension("WEBGL_depth_texture")||s.getExtension("MOZ_WEBGL_depth_texture")||s.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":i=s.getExtension("EXT_texture_filter_anisotropic")||s.getExtension("MOZ_EXT_texture_filter_anisotropic")||s.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":i=s.getExtension("WEBGL_compressed_texture_s3tc")||s.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||s.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":i=s.getExtension("WEBGL_compressed_texture_pvrtc")||s.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:i=s.getExtension(n)}return e[n]=i,i}return{has:function(n){return t(n)!==null},init:function(){t("EXT_color_buffer_float"),t("WEBGL_clip_cull_distance"),t("OES_texture_float_linear"),t("EXT_color_buffer_half_float"),t("WEBGL_multisampled_render_to_texture"),t("WEBGL_render_shared_exponent")},get:function(n){const i=t(n);return i===null&&jr("THREE.WebGLRenderer: "+n+" extension not supported."),i}}}function PR(s,e,t,n){const i={},r=new WeakMap;function o(h){const d=h.target;d.index!==null&&e.remove(d.index);for(const m in d.attributes)e.remove(d.attributes[m]);d.removeEventListener("dispose",o),delete i[d.id];const f=r.get(d);f&&(e.remove(f),r.delete(d)),n.releaseStatesOfGeometry(d),d.isInstancedBufferGeometry===!0&&delete d._maxInstanceCount,t.memory.geometries--}function a(h,d){return i[d.id]===!0||(d.addEventListener("dispose",o),i[d.id]=!0,t.memory.geometries++),d}function c(h){const d=h.attributes;for(const f in d)e.update(d[f],s.ARRAY_BUFFER)}function l(h){const d=[],f=h.index,m=h.attributes.position;let _=0;if(f!==null){const T=f.array;_=f.version;for(let S=0,v=T.length;S<v;S+=3){const P=T[S+0],N=T[S+1],w=T[S+2];d.push(P,N,N,w,w,P)}}else if(m!==void 0){const T=m.array;_=m.version;for(let S=0,v=T.length/3-1;S<v;S+=3){const P=S+0,N=S+1,w=S+2;d.push(P,N,N,w,w,P)}}else return;const g=new(Rx(d)?hp:up)(d,1);g.version=_;const p=r.get(h);p&&e.remove(p),r.set(h,g)}function u(h){const d=r.get(h);if(d){const f=h.index;f!==null&&d.version<f.version&&l(h)}else l(h);return r.get(h)}return{get:a,update:c,getWireframeAttribute:u}}function DR(s,e,t){let n;function i(d){n=d}let r,o;function a(d){r=d.type,o=d.bytesPerElement}function c(d,f){s.drawElements(n,f,r,d*o),t.update(f,n,1)}function l(d,f,m){m!==0&&(s.drawElementsInstanced(n,f,r,d*o,m),t.update(f,n,m))}function u(d,f,m){if(m===0)return;e.get("WEBGL_multi_draw").multiDrawElementsWEBGL(n,f,0,r,d,0,m);let g=0;for(let p=0;p<m;p++)g+=f[p];t.update(g,n,1)}function h(d,f,m,_){if(m===0)return;const g=e.get("WEBGL_multi_draw");if(g===null)for(let p=0;p<d.length;p++)l(d[p]/o,f[p],_[p]);else{g.multiDrawElementsInstancedWEBGL(n,f,0,r,d,0,_,0,m);let p=0;for(let T=0;T<m;T++)p+=f[T]*_[T];t.update(p,n,1)}}this.setMode=i,this.setIndex=a,this.render=c,this.renderInstances=l,this.renderMultiDraw=u,this.renderMultiDrawInstances=h}function LR(s){const e={geometries:0,textures:0},t={frame:0,calls:0,triangles:0,points:0,lines:0};function n(r,o,a){switch(t.calls++,o){case s.TRIANGLES:t.triangles+=a*(r/3);break;case s.LINES:t.lines+=a*(r/2);break;case s.LINE_STRIP:t.lines+=a*(r-1);break;case s.LINE_LOOP:t.lines+=a*r;break;case s.POINTS:t.points+=a*r;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",o);break}}function i(){t.calls=0,t.triangles=0,t.points=0,t.lines=0}return{memory:e,render:t,programs:null,autoReset:!0,reset:i,update:n}}function UR(s,e,t){const n=new WeakMap,i=new je;function r(o,a,c){const l=o.morphTargetInfluences,u=a.morphAttributes.position||a.morphAttributes.normal||a.morphAttributes.color,h=u!==void 0?u.length:0;let d=n.get(a);if(d===void 0||d.count!==h){let M=function(){F.dispose(),n.delete(a),a.removeEventListener("dispose",M)};var f=M;d!==void 0&&d.texture.dispose();const m=a.morphAttributes.position!==void 0,_=a.morphAttributes.normal!==void 0,g=a.morphAttributes.color!==void 0,p=a.morphAttributes.position||[],T=a.morphAttributes.normal||[],S=a.morphAttributes.color||[];let v=0;m===!0&&(v=1),_===!0&&(v=2),g===!0&&(v=3);let P=a.attributes.position.count*v,N=1;P>e.maxTextureSize&&(N=Math.ceil(P/e.maxTextureSize),P=e.maxTextureSize);const w=new Float32Array(P*N*4*h),F=new cp(w,P,N,h);F.type=rn,F.needsUpdate=!0;const E=v*4;for(let D=0;D<h;D++){const Z=p[D],$=T[D],ne=S[D],oe=P*N*4*D;for(let re=0;re<Z.count;re++){const ue=re*E;m===!0&&(i.fromBufferAttribute(Z,re),w[oe+ue+0]=i.x,w[oe+ue+1]=i.y,w[oe+ue+2]=i.z,w[oe+ue+3]=0),_===!0&&(i.fromBufferAttribute($,re),w[oe+ue+4]=i.x,w[oe+ue+5]=i.y,w[oe+ue+6]=i.z,w[oe+ue+7]=0),g===!0&&(i.fromBufferAttribute(ne,re),w[oe+ue+8]=i.x,w[oe+ue+9]=i.y,w[oe+ue+10]=i.z,w[oe+ue+11]=ne.itemSize===4?i.w:1)}}d={count:h,texture:F,size:new Ee(P,N)},n.set(a,d),a.addEventListener("dispose",M)}if(o.isInstancedMesh===!0&&o.morphTexture!==null)c.getUniforms().setValue(s,"morphTexture",o.morphTexture,t);else{let m=0;for(let g=0;g<l.length;g++)m+=l[g];const _=a.morphTargetsRelative?1:1-m;c.getUniforms().setValue(s,"morphTargetBaseInfluence",_),c.getUniforms().setValue(s,"morphTargetInfluences",l)}c.getUniforms().setValue(s,"morphTargetsTexture",d.texture,t),c.getUniforms().setValue(s,"morphTargetsTextureSize",d.size)}return{update:r}}function IR(s,e,t,n){let i=new WeakMap;function r(c){const l=n.render.frame,u=c.geometry,h=e.get(c,u);if(i.get(h)!==l&&(e.update(h),i.set(h,l)),c.isInstancedMesh&&(c.hasEventListener("dispose",a)===!1&&c.addEventListener("dispose",a),i.get(c)!==l&&(t.update(c.instanceMatrix,s.ARRAY_BUFFER),c.instanceColor!==null&&t.update(c.instanceColor,s.ARRAY_BUFFER),i.set(c,l))),c.isSkinnedMesh){const d=c.skeleton;i.get(d)!==l&&(d.update(),i.set(d,l))}return h}function o(){i=new WeakMap}function a(c){const l=c.target;l.removeEventListener("dispose",a),t.remove(l.instanceMatrix),l.instanceColor!==null&&t.remove(l.instanceColor)}return{update:r,dispose:o}}const Wx=new En,Ag=new Qs(1,1),$x=new cp,Xx=new jb,qx=new hh,Rg=[],wg=[],Ng=new Float32Array(16),Cg=new Float32Array(9),Pg=new Float32Array(4);function sc(s,e,t){const n=s[0];if(n<=0||n>0)return s;const i=e*t;let r=Rg[i];if(r===void 0&&(r=new Float32Array(i),Rg[i]=r),e!==0){n.toArray(r,0);for(let o=1,a=0;o!==e;++o)a+=t,s[o].toArray(r,a)}return r}function vn(s,e){if(s.length!==e.length)return!1;for(let t=0,n=s.length;t<n;t++)if(s[t]!==e[t])return!1;return!0}function Tn(s,e){for(let t=0,n=e.length;t<n;t++)s[t]=e[t]}function ph(s,e){let t=wg[e];t===void 0&&(t=new Int32Array(e),wg[e]=t);for(let n=0;n!==e;++n)t[n]=s.allocateTextureUnit();return t}function FR(s,e){const t=this.cache;t[0]!==e&&(s.uniform1f(this.addr,e),t[0]=e)}function BR(s,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y)&&(s.uniform2f(this.addr,e.x,e.y),t[0]=e.x,t[1]=e.y);else{if(vn(t,e))return;s.uniform2fv(this.addr,e),Tn(t,e)}}function OR(s,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z)&&(s.uniform3f(this.addr,e.x,e.y,e.z),t[0]=e.x,t[1]=e.y,t[2]=e.z);else if(e.r!==void 0)(t[0]!==e.r||t[1]!==e.g||t[2]!==e.b)&&(s.uniform3f(this.addr,e.r,e.g,e.b),t[0]=e.r,t[1]=e.g,t[2]=e.b);else{if(vn(t,e))return;s.uniform3fv(this.addr,e),Tn(t,e)}}function VR(s,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w)&&(s.uniform4f(this.addr,e.x,e.y,e.z,e.w),t[0]=e.x,t[1]=e.y,t[2]=e.z,t[3]=e.w);else{if(vn(t,e))return;s.uniform4fv(this.addr,e),Tn(t,e)}}function GR(s,e){const t=this.cache,n=e.elements;if(n===void 0){if(vn(t,e))return;s.uniformMatrix2fv(this.addr,!1,e),Tn(t,e)}else{if(vn(t,n))return;Pg.set(n),s.uniformMatrix2fv(this.addr,!1,Pg),Tn(t,n)}}function zR(s,e){const t=this.cache,n=e.elements;if(n===void 0){if(vn(t,e))return;s.uniformMatrix3fv(this.addr,!1,e),Tn(t,e)}else{if(vn(t,n))return;Cg.set(n),s.uniformMatrix3fv(this.addr,!1,Cg),Tn(t,n)}}function kR(s,e){const t=this.cache,n=e.elements;if(n===void 0){if(vn(t,e))return;s.uniformMatrix4fv(this.addr,!1,e),Tn(t,e)}else{if(vn(t,n))return;Ng.set(n),s.uniformMatrix4fv(this.addr,!1,Ng),Tn(t,n)}}function HR(s,e){const t=this.cache;t[0]!==e&&(s.uniform1i(this.addr,e),t[0]=e)}function WR(s,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y)&&(s.uniform2i(this.addr,e.x,e.y),t[0]=e.x,t[1]=e.y);else{if(vn(t,e))return;s.uniform2iv(this.addr,e),Tn(t,e)}}function $R(s,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z)&&(s.uniform3i(this.addr,e.x,e.y,e.z),t[0]=e.x,t[1]=e.y,t[2]=e.z);else{if(vn(t,e))return;s.uniform3iv(this.addr,e),Tn(t,e)}}function XR(s,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w)&&(s.uniform4i(this.addr,e.x,e.y,e.z,e.w),t[0]=e.x,t[1]=e.y,t[2]=e.z,t[3]=e.w);else{if(vn(t,e))return;s.uniform4iv(this.addr,e),Tn(t,e)}}function qR(s,e){const t=this.cache;t[0]!==e&&(s.uniform1ui(this.addr,e),t[0]=e)}function YR(s,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y)&&(s.uniform2ui(this.addr,e.x,e.y),t[0]=e.x,t[1]=e.y);else{if(vn(t,e))return;s.uniform2uiv(this.addr,e),Tn(t,e)}}function jR(s,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z)&&(s.uniform3ui(this.addr,e.x,e.y,e.z),t[0]=e.x,t[1]=e.y,t[2]=e.z);else{if(vn(t,e))return;s.uniform3uiv(this.addr,e),Tn(t,e)}}function KR(s,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w)&&(s.uniform4ui(this.addr,e.x,e.y,e.z,e.w),t[0]=e.x,t[1]=e.y,t[2]=e.z,t[3]=e.w);else{if(vn(t,e))return;s.uniform4uiv(this.addr,e),Tn(t,e)}}function ZR(s,e,t){const n=this.cache,i=t.allocateTextureUnit();n[0]!==i&&(s.uniform1i(this.addr,i),n[0]=i);let r;this.type===s.SAMPLER_2D_SHADOW?(Ag.compareFunction=lh,r=Ag):r=Wx,t.setTexture2D(e||r,i)}function QR(s,e,t){const n=this.cache,i=t.allocateTextureUnit();n[0]!==i&&(s.uniform1i(this.addr,i),n[0]=i),t.setTexture3D(e||Xx,i)}function JR(s,e,t){const n=this.cache,i=t.allocateTextureUnit();n[0]!==i&&(s.uniform1i(this.addr,i),n[0]=i),t.setTextureCube(e||qx,i)}function ew(s,e,t){const n=this.cache,i=t.allocateTextureUnit();n[0]!==i&&(s.uniform1i(this.addr,i),n[0]=i),t.setTexture2DArray(e||$x,i)}function tw(s){switch(s){case 5126:return FR;case 35664:return BR;case 35665:return OR;case 35666:return VR;case 35674:return GR;case 35675:return zR;case 35676:return kR;case 5124:case 35670:return HR;case 35667:case 35671:return WR;case 35668:case 35672:return $R;case 35669:case 35673:return XR;case 5125:return qR;case 36294:return YR;case 36295:return jR;case 36296:return KR;case 35678:case 36198:case 36298:case 36306:case 35682:return ZR;case 35679:case 36299:case 36307:return QR;case 35680:case 36300:case 36308:case 36293:return JR;case 36289:case 36303:case 36311:case 36292:return ew}}function nw(s,e){s.uniform1fv(this.addr,e)}function iw(s,e){const t=sc(e,this.size,2);s.uniform2fv(this.addr,t)}function sw(s,e){const t=sc(e,this.size,3);s.uniform3fv(this.addr,t)}function rw(s,e){const t=sc(e,this.size,4);s.uniform4fv(this.addr,t)}function ow(s,e){const t=sc(e,this.size,4);s.uniformMatrix2fv(this.addr,!1,t)}function aw(s,e){const t=sc(e,this.size,9);s.uniformMatrix3fv(this.addr,!1,t)}function cw(s,e){const t=sc(e,this.size,16);s.uniformMatrix4fv(this.addr,!1,t)}function lw(s,e){s.uniform1iv(this.addr,e)}function uw(s,e){s.uniform2iv(this.addr,e)}function hw(s,e){s.uniform3iv(this.addr,e)}function dw(s,e){s.uniform4iv(this.addr,e)}function fw(s,e){s.uniform1uiv(this.addr,e)}function pw(s,e){s.uniform2uiv(this.addr,e)}function mw(s,e){s.uniform3uiv(this.addr,e)}function gw(s,e){s.uniform4uiv(this.addr,e)}function _w(s,e,t){const n=this.cache,i=e.length,r=ph(t,i);vn(n,r)||(s.uniform1iv(this.addr,r),Tn(n,r));for(let o=0;o!==i;++o)t.setTexture2D(e[o]||Wx,r[o])}function xw(s,e,t){const n=this.cache,i=e.length,r=ph(t,i);vn(n,r)||(s.uniform1iv(this.addr,r),Tn(n,r));for(let o=0;o!==i;++o)t.setTexture3D(e[o]||Xx,r[o])}function yw(s,e,t){const n=this.cache,i=e.length,r=ph(t,i);vn(n,r)||(s.uniform1iv(this.addr,r),Tn(n,r));for(let o=0;o!==i;++o)t.setTextureCube(e[o]||qx,r[o])}function vw(s,e,t){const n=this.cache,i=e.length,r=ph(t,i);vn(n,r)||(s.uniform1iv(this.addr,r),Tn(n,r));for(let o=0;o!==i;++o)t.setTexture2DArray(e[o]||$x,r[o])}function Tw(s){switch(s){case 5126:return nw;case 35664:return iw;case 35665:return sw;case 35666:return rw;case 35674:return ow;case 35675:return aw;case 35676:return cw;case 5124:case 35670:return lw;case 35667:case 35671:return uw;case 35668:case 35672:return hw;case 35669:case 35673:return dw;case 5125:return fw;case 36294:return pw;case 36295:return mw;case 36296:return gw;case 35678:case 36198:case 36298:case 36306:case 35682:return _w;case 35679:case 36299:case 36307:return xw;case 35680:case 36300:case 36308:case 36293:return yw;case 36289:case 36303:case 36311:case 36292:return vw}}class Sw{constructor(e,t,n){this.id=e,this.addr=n,this.cache=[],this.type=t.type,this.setValue=tw(t.type)}}class bw{constructor(e,t,n){this.id=e,this.addr=n,this.cache=[],this.type=t.type,this.size=t.size,this.setValue=Tw(t.type)}}class Mw{constructor(e){this.id=e,this.seq=[],this.map={}}setValue(e,t,n){const i=this.seq;for(let r=0,o=i.length;r!==o;++r){const a=i[r];a.setValue(e,t[a.id],n)}}}const _d=/(\w+)(\])?(\[|\.)?/g;function Dg(s,e){s.seq.push(e),s.map[e.id]=e}function Ew(s,e,t){const n=s.name,i=n.length;for(_d.lastIndex=0;;){const r=_d.exec(n),o=_d.lastIndex;let a=r[1];const c=r[2]==="]",l=r[3];if(c&&(a=a|0),l===void 0||l==="["&&o+2===i){Dg(t,l===void 0?new Sw(a,s,e):new bw(a,s,e));break}else{let h=t.map[a];h===void 0&&(h=new Mw(a),Dg(t,h)),t=h}}}class Nu{constructor(e,t){this.seq=[],this.map={};const n=e.getProgramParameter(t,e.ACTIVE_UNIFORMS);for(let i=0;i<n;++i){const r=e.getActiveUniform(t,i),o=e.getUniformLocation(t,r.name);Ew(r,o,this)}}setValue(e,t,n,i){const r=this.map[t];r!==void 0&&r.setValue(e,n,i)}setOptional(e,t,n){const i=t[n];i!==void 0&&this.setValue(e,n,i)}static upload(e,t,n,i){for(let r=0,o=t.length;r!==o;++r){const a=t[r],c=n[a.id];c.needsUpdate!==!1&&a.setValue(e,c.value,i)}}static seqWithValue(e,t){const n=[];for(let i=0,r=e.length;i!==r;++i){const o=e[i];o.id in t&&n.push(o)}return n}}function Lg(s,e,t){const n=s.createShader(e);return s.shaderSource(n,t),s.compileShader(n),n}const Aw=37297;let Rw=0;function ww(s,e){const t=s.split(`
`),n=[],i=Math.max(e-6,0),r=Math.min(e+6,t.length);for(let o=i;o<r;o++){const a=o+1;n.push(`${a===e?">":" "} ${a}: ${t[o]}`)}return n.join(`
`)}const Ug=new qe;function Nw(s){rt._getMatrix(Ug,rt.workingColorSpace,s);const e=`mat3( ${Ug.elements.map(t=>t.toFixed(4))} )`;switch(rt.getTransfer(s)){case Gu:return[e,"LinearTransferOETF"];case Nt:return[e,"sRGBTransferOETF"];default:return console.warn("THREE.WebGLProgram: Unsupported color space: ",s),[e,"LinearTransferOETF"]}}function Ig(s,e,t){const n=s.getShaderParameter(e,s.COMPILE_STATUS),i=s.getShaderInfoLog(e).trim();if(n&&i==="")return"";const r=/ERROR: 0:(\d+)/.exec(i);if(r){const o=parseInt(r[1]);return t.toUpperCase()+`

`+i+`

`+ww(s.getShaderSource(e),o)}else return i}function Cw(s,e){const t=Nw(e);return[`vec4 ${s}( vec4 value ) {`,`	return ${t[1]}( vec4( value.rgb * ${t[0]}, value.a ) );`,"}"].join(`
`)}function Pw(s,e){let t;switch(e){case Tx:t="Linear";break;case Sx:t="Reinhard";break;case bx:t="Cineon";break;case Mx:t="ACESFilmic";break;case Ex:t="AgX";break;case Yf:t="Neutral";break;case ab:t="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",e),t="Linear"}return"vec3 "+s+"( vec3 color ) { return "+t+"ToneMapping( color ); }"}const lu=new U;function Dw(){rt.getLuminanceCoefficients(lu);const s=lu.x.toFixed(4),e=lu.y.toFixed(4),t=lu.z.toFixed(4);return["float luminance( const in vec3 rgb ) {",`	const vec3 weights = vec3( ${s}, ${e}, ${t} );`,"	return dot( weights, rgb );","}"].join(`
`)}function Lw(s){return[s.extensionClipCullDistance?"#extension GL_ANGLE_clip_cull_distance : require":"",s.extensionMultiDraw?"#extension GL_ANGLE_multi_draw : require":""].filter(Ac).join(`
`)}function Uw(s){const e=[];for(const t in s){const n=s[t];n!==!1&&e.push("#define "+t+" "+n)}return e.join(`
`)}function Iw(s,e){const t={},n=s.getProgramParameter(e,s.ACTIVE_ATTRIBUTES);for(let i=0;i<n;i++){const r=s.getActiveAttrib(e,i),o=r.name;let a=1;r.type===s.FLOAT_MAT2&&(a=2),r.type===s.FLOAT_MAT3&&(a=3),r.type===s.FLOAT_MAT4&&(a=4),t[o]={type:r.type,location:s.getAttribLocation(e,o),locationSize:a}}return t}function Ac(s){return s!==""}function Fg(s,e){const t=e.numSpotLightShadows+e.numSpotLightMaps-e.numSpotLightShadowsWithMaps;return s.replace(/NUM_DIR_LIGHTS/g,e.numDirLights).replace(/NUM_SPOT_LIGHTS/g,e.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,e.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,t).replace(/NUM_RECT_AREA_LIGHTS/g,e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,e.numPointLights).replace(/NUM_HEMI_LIGHTS/g,e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,e.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,e.numPointLightShadows)}function Bg(s,e){return s.replace(/NUM_CLIPPING_PLANES/g,e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,e.numClippingPlanes-e.numClipIntersection)}const Fw=/^[ \t]*#include +<([\w\d./]+)>/gm;function cf(s){return s.replace(Fw,Ow)}const Bw=new Map;function Ow(s,e){let t=ct[e];if(t===void 0){const n=Bw.get(e);if(n!==void 0)t=ct[n],console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.',e,n);else throw new Error("Can not resolve #include <"+e+">")}return cf(t)}const Vw=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function Og(s){return s.replace(Vw,Gw)}function Gw(s,e,t,n){let i="";for(let r=parseInt(e);r<parseInt(t);r++)i+=n.replace(/\[\s*i\s*\]/g,"[ "+r+" ]").replace(/UNROLLED_LOOP_INDEX/g,r);return i}function Vg(s){let e=`precision ${s.precision} float;
	precision ${s.precision} int;
	precision ${s.precision} sampler2D;
	precision ${s.precision} samplerCube;
	precision ${s.precision} sampler3D;
	precision ${s.precision} sampler2DArray;
	precision ${s.precision} sampler2DShadow;
	precision ${s.precision} samplerCubeShadow;
	precision ${s.precision} sampler2DArrayShadow;
	precision ${s.precision} isampler2D;
	precision ${s.precision} isampler3D;
	precision ${s.precision} isamplerCube;
	precision ${s.precision} isampler2DArray;
	precision ${s.precision} usampler2D;
	precision ${s.precision} usampler3D;
	precision ${s.precision} usamplerCube;
	precision ${s.precision} usampler2DArray;
	`;return s.precision==="highp"?e+=`
#define HIGH_PRECISION`:s.precision==="mediump"?e+=`
#define MEDIUM_PRECISION`:s.precision==="lowp"&&(e+=`
#define LOW_PRECISION`),e}function zw(s){let e="SHADOWMAP_TYPE_BASIC";return s.shadowMapType===If?e="SHADOWMAP_TYPE_PCF":s.shadowMapType===nb?e="SHADOWMAP_TYPE_PCF_SOFT":s.shadowMapType===_i&&(e="SHADOWMAP_TYPE_VSM"),e}function kw(s){let e="ENVMAP_TYPE_CUBE";if(s.envMap)switch(s.envMapMode){case Fi:case Bi:e="ENVMAP_TYPE_CUBE";break;case yo:e="ENVMAP_TYPE_CUBE_UV";break}return e}function Hw(s){let e="ENVMAP_MODE_REFLECTION";if(s.envMap)switch(s.envMapMode){case Bi:e="ENVMAP_MODE_REFRACTION";break}return e}function Ww(s){let e="ENVMAP_BLENDING_NONE";if(s.envMap)switch(s.combine){case vl:e="ENVMAP_BLENDING_MULTIPLY";break;case yx:e="ENVMAP_BLENDING_MIX";break;case vx:e="ENVMAP_BLENDING_ADD";break}return e}function $w(s){const e=s.envMapCubeUVHeight;if(e===null)return null;const t=Math.log2(e)-2,n=1/e;return{texelWidth:1/(3*Math.max(Math.pow(2,t),7*16)),texelHeight:n,maxMip:t}}function Xw(s,e,t,n){const i=s.getContext(),r=t.defines;let o=t.vertexShader,a=t.fragmentShader;const c=zw(t),l=kw(t),u=Hw(t),h=Ww(t),d=$w(t),f=Lw(t),m=Uw(r),_=i.createProgram();let g,p,T=t.glslVersion?"#version "+t.glslVersion+`
`:"";t.isRawShaderMaterial?(g=["#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,m].filter(Ac).join(`
`),g.length>0&&(g+=`
`),p=["#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,m].filter(Ac).join(`
`),p.length>0&&(p+=`
`)):(g=[Vg(t),"#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,m,t.extensionClipCullDistance?"#define USE_CLIP_DISTANCE":"",t.batching?"#define USE_BATCHING":"",t.batchingColor?"#define USE_BATCHING_COLOR":"",t.instancing?"#define USE_INSTANCING":"",t.instancingColor?"#define USE_INSTANCING_COLOR":"",t.instancingMorph?"#define USE_INSTANCING_MORPH":"",t.useFog&&t.fog?"#define USE_FOG":"",t.useFog&&t.fogExp2?"#define FOG_EXP2":"",t.map?"#define USE_MAP":"",t.envMap?"#define USE_ENVMAP":"",t.envMap?"#define "+u:"",t.lightMap?"#define USE_LIGHTMAP":"",t.aoMap?"#define USE_AOMAP":"",t.bumpMap?"#define USE_BUMPMAP":"",t.normalMap?"#define USE_NORMALMAP":"",t.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",t.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",t.displacementMap?"#define USE_DISPLACEMENTMAP":"",t.emissiveMap?"#define USE_EMISSIVEMAP":"",t.anisotropy?"#define USE_ANISOTROPY":"",t.anisotropyMap?"#define USE_ANISOTROPYMAP":"",t.clearcoatMap?"#define USE_CLEARCOATMAP":"",t.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",t.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",t.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",t.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",t.specularMap?"#define USE_SPECULARMAP":"",t.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",t.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",t.roughnessMap?"#define USE_ROUGHNESSMAP":"",t.metalnessMap?"#define USE_METALNESSMAP":"",t.alphaMap?"#define USE_ALPHAMAP":"",t.alphaHash?"#define USE_ALPHAHASH":"",t.transmission?"#define USE_TRANSMISSION":"",t.transmissionMap?"#define USE_TRANSMISSIONMAP":"",t.thicknessMap?"#define USE_THICKNESSMAP":"",t.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",t.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",t.mapUv?"#define MAP_UV "+t.mapUv:"",t.alphaMapUv?"#define ALPHAMAP_UV "+t.alphaMapUv:"",t.lightMapUv?"#define LIGHTMAP_UV "+t.lightMapUv:"",t.aoMapUv?"#define AOMAP_UV "+t.aoMapUv:"",t.emissiveMapUv?"#define EMISSIVEMAP_UV "+t.emissiveMapUv:"",t.bumpMapUv?"#define BUMPMAP_UV "+t.bumpMapUv:"",t.normalMapUv?"#define NORMALMAP_UV "+t.normalMapUv:"",t.displacementMapUv?"#define DISPLACEMENTMAP_UV "+t.displacementMapUv:"",t.metalnessMapUv?"#define METALNESSMAP_UV "+t.metalnessMapUv:"",t.roughnessMapUv?"#define ROUGHNESSMAP_UV "+t.roughnessMapUv:"",t.anisotropyMapUv?"#define ANISOTROPYMAP_UV "+t.anisotropyMapUv:"",t.clearcoatMapUv?"#define CLEARCOATMAP_UV "+t.clearcoatMapUv:"",t.clearcoatNormalMapUv?"#define CLEARCOAT_NORMALMAP_UV "+t.clearcoatNormalMapUv:"",t.clearcoatRoughnessMapUv?"#define CLEARCOAT_ROUGHNESSMAP_UV "+t.clearcoatRoughnessMapUv:"",t.iridescenceMapUv?"#define IRIDESCENCEMAP_UV "+t.iridescenceMapUv:"",t.iridescenceThicknessMapUv?"#define IRIDESCENCE_THICKNESSMAP_UV "+t.iridescenceThicknessMapUv:"",t.sheenColorMapUv?"#define SHEEN_COLORMAP_UV "+t.sheenColorMapUv:"",t.sheenRoughnessMapUv?"#define SHEEN_ROUGHNESSMAP_UV "+t.sheenRoughnessMapUv:"",t.specularMapUv?"#define SPECULARMAP_UV "+t.specularMapUv:"",t.specularColorMapUv?"#define SPECULAR_COLORMAP_UV "+t.specularColorMapUv:"",t.specularIntensityMapUv?"#define SPECULAR_INTENSITYMAP_UV "+t.specularIntensityMapUv:"",t.transmissionMapUv?"#define TRANSMISSIONMAP_UV "+t.transmissionMapUv:"",t.thicknessMapUv?"#define THICKNESSMAP_UV "+t.thicknessMapUv:"",t.vertexTangents&&t.flatShading===!1?"#define USE_TANGENT":"",t.vertexColors?"#define USE_COLOR":"",t.vertexAlphas?"#define USE_COLOR_ALPHA":"",t.vertexUv1s?"#define USE_UV1":"",t.vertexUv2s?"#define USE_UV2":"",t.vertexUv3s?"#define USE_UV3":"",t.pointsUvs?"#define USE_POINTS_UV":"",t.flatShading?"#define FLAT_SHADED":"",t.skinning?"#define USE_SKINNING":"",t.morphTargets?"#define USE_MORPHTARGETS":"",t.morphNormals&&t.flatShading===!1?"#define USE_MORPHNORMALS":"",t.morphColors?"#define USE_MORPHCOLORS":"",t.morphTargetsCount>0?"#define MORPHTARGETS_TEXTURE_STRIDE "+t.morphTextureStride:"",t.morphTargetsCount>0?"#define MORPHTARGETS_COUNT "+t.morphTargetsCount:"",t.doubleSided?"#define DOUBLE_SIDED":"",t.flipSided?"#define FLIP_SIDED":"",t.shadowMapEnabled?"#define USE_SHADOWMAP":"",t.shadowMapEnabled?"#define "+c:"",t.sizeAttenuation?"#define USE_SIZEATTENUATION":"",t.numLightProbes>0?"#define USE_LIGHT_PROBES":"",t.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",t.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","	attribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","	attribute vec3 instanceColor;","#endif","#ifdef USE_INSTANCING_MORPH","	uniform sampler2D morphTexture;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_UV1","	attribute vec2 uv1;","#endif","#ifdef USE_UV2","	attribute vec2 uv2;","#endif","#ifdef USE_UV3","	attribute vec2 uv3;","#endif","#ifdef USE_TANGENT","	attribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","	attribute vec4 color;","#elif defined( USE_COLOR )","	attribute vec3 color;","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif",`
`].filter(Ac).join(`
`),p=[Vg(t),"#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,m,t.useFog&&t.fog?"#define USE_FOG":"",t.useFog&&t.fogExp2?"#define FOG_EXP2":"",t.alphaToCoverage?"#define ALPHA_TO_COVERAGE":"",t.map?"#define USE_MAP":"",t.matcap?"#define USE_MATCAP":"",t.envMap?"#define USE_ENVMAP":"",t.envMap?"#define "+l:"",t.envMap?"#define "+u:"",t.envMap?"#define "+h:"",d?"#define CUBEUV_TEXEL_WIDTH "+d.texelWidth:"",d?"#define CUBEUV_TEXEL_HEIGHT "+d.texelHeight:"",d?"#define CUBEUV_MAX_MIP "+d.maxMip+".0":"",t.lightMap?"#define USE_LIGHTMAP":"",t.aoMap?"#define USE_AOMAP":"",t.bumpMap?"#define USE_BUMPMAP":"",t.normalMap?"#define USE_NORMALMAP":"",t.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",t.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",t.emissiveMap?"#define USE_EMISSIVEMAP":"",t.anisotropy?"#define USE_ANISOTROPY":"",t.anisotropyMap?"#define USE_ANISOTROPYMAP":"",t.clearcoat?"#define USE_CLEARCOAT":"",t.clearcoatMap?"#define USE_CLEARCOATMAP":"",t.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",t.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",t.dispersion?"#define USE_DISPERSION":"",t.iridescence?"#define USE_IRIDESCENCE":"",t.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",t.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",t.specularMap?"#define USE_SPECULARMAP":"",t.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",t.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",t.roughnessMap?"#define USE_ROUGHNESSMAP":"",t.metalnessMap?"#define USE_METALNESSMAP":"",t.alphaMap?"#define USE_ALPHAMAP":"",t.alphaTest?"#define USE_ALPHATEST":"",t.alphaHash?"#define USE_ALPHAHASH":"",t.sheen?"#define USE_SHEEN":"",t.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",t.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",t.transmission?"#define USE_TRANSMISSION":"",t.transmissionMap?"#define USE_TRANSMISSIONMAP":"",t.thicknessMap?"#define USE_THICKNESSMAP":"",t.vertexTangents&&t.flatShading===!1?"#define USE_TANGENT":"",t.vertexColors||t.instancingColor||t.batchingColor?"#define USE_COLOR":"",t.vertexAlphas?"#define USE_COLOR_ALPHA":"",t.vertexUv1s?"#define USE_UV1":"",t.vertexUv2s?"#define USE_UV2":"",t.vertexUv3s?"#define USE_UV3":"",t.pointsUvs?"#define USE_POINTS_UV":"",t.gradientMap?"#define USE_GRADIENTMAP":"",t.flatShading?"#define FLAT_SHADED":"",t.doubleSided?"#define DOUBLE_SIDED":"",t.flipSided?"#define FLIP_SIDED":"",t.shadowMapEnabled?"#define USE_SHADOWMAP":"",t.shadowMapEnabled?"#define "+c:"",t.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",t.numLightProbes>0?"#define USE_LIGHT_PROBES":"",t.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",t.decodeVideoTextureEmissive?"#define DECODE_VIDEO_TEXTURE_EMISSIVE":"",t.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",t.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",t.toneMapping!==ri?"#define TONE_MAPPING":"",t.toneMapping!==ri?ct.tonemapping_pars_fragment:"",t.toneMapping!==ri?Pw("toneMapping",t.toneMapping):"",t.dithering?"#define DITHERING":"",t.opaque?"#define OPAQUE":"",ct.colorspace_pars_fragment,Cw("linearToOutputTexel",t.outputColorSpace),Dw(),t.useDepthPacking?"#define DEPTH_PACKING "+t.depthPacking:"",`
`].filter(Ac).join(`
`)),o=cf(o),o=Fg(o,t),o=Bg(o,t),a=cf(a),a=Fg(a,t),a=Bg(a,t),o=Og(o),a=Og(a),t.isRawShaderMaterial!==!0&&(T=`#version 300 es
`,g=[f,"#define attribute in","#define varying out","#define texture2D texture"].join(`
`)+`
`+g,p=["#define varying in",t.glslVersion===jm?"":"layout(location = 0) out highp vec4 pc_fragColor;",t.glslVersion===jm?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join(`
`)+`
`+p);const S=T+g+o,v=T+p+a,P=Lg(i,i.VERTEX_SHADER,S),N=Lg(i,i.FRAGMENT_SHADER,v);i.attachShader(_,P),i.attachShader(_,N),t.index0AttributeName!==void 0?i.bindAttribLocation(_,0,t.index0AttributeName):t.morphTargets===!0&&i.bindAttribLocation(_,0,"position"),i.linkProgram(_);function w(D){if(s.debug.checkShaderErrors){const Z=i.getProgramInfoLog(_).trim(),$=i.getShaderInfoLog(P).trim(),ne=i.getShaderInfoLog(N).trim();let oe=!0,re=!0;if(i.getProgramParameter(_,i.LINK_STATUS)===!1)if(oe=!1,typeof s.debug.onShaderError=="function")s.debug.onShaderError(i,_,P,N);else{const ue=Ig(i,P,"vertex"),Q=Ig(i,N,"fragment");console.error("THREE.WebGLProgram: Shader Error "+i.getError()+" - VALIDATE_STATUS "+i.getProgramParameter(_,i.VALIDATE_STATUS)+`

Material Name: `+D.name+`
Material Type: `+D.type+`

Program Info Log: `+Z+`
`+ue+`
`+Q)}else Z!==""?console.warn("THREE.WebGLProgram: Program Info Log:",Z):($===""||ne==="")&&(re=!1);re&&(D.diagnostics={runnable:oe,programLog:Z,vertexShader:{log:$,prefix:g},fragmentShader:{log:ne,prefix:p}})}i.deleteShader(P),i.deleteShader(N),F=new Nu(i,_),E=Iw(i,_)}let F;this.getUniforms=function(){return F===void 0&&w(this),F};let E;this.getAttributes=function(){return E===void 0&&w(this),E};let M=t.rendererExtensionParallelShaderCompile===!1;return this.isReady=function(){return M===!1&&(M=i.getProgramParameter(_,Aw)),M},this.destroy=function(){n.releaseStatesOfProgram(this),i.deleteProgram(_),this.program=void 0},this.type=t.shaderType,this.name=t.shaderName,this.id=Rw++,this.cacheKey=e,this.usedTimes=1,this.program=_,this.vertexShader=P,this.fragmentShader=N,this}let qw=0;class Yw{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(e){const t=e.vertexShader,n=e.fragmentShader,i=this._getShaderStage(t),r=this._getShaderStage(n),o=this._getShaderCacheForMaterial(e);return o.has(i)===!1&&(o.add(i),i.usedTimes++),o.has(r)===!1&&(o.add(r),r.usedTimes++),this}remove(e){const t=this.materialCache.get(e);for(const n of t)n.usedTimes--,n.usedTimes===0&&this.shaderCache.delete(n.code);return this.materialCache.delete(e),this}getVertexShaderID(e){return this._getShaderStage(e.vertexShader).id}getFragmentShaderID(e){return this._getShaderStage(e.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(e){const t=this.materialCache;let n=t.get(e);return n===void 0&&(n=new Set,t.set(e,n)),n}_getShaderStage(e){const t=this.shaderCache;let n=t.get(e);return n===void 0&&(n=new jw(e),t.set(e,n)),n}}class jw{constructor(e){this.id=qw++,this.code=e,this.usedTimes=0}}function Kw(s,e,t,n,i,r,o){const a=new Px,c=new Yw,l=new Set,u=[],h=i.logarithmicDepthBuffer,d=i.vertexTextures;let f=i.precision;const m={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function _(E){return l.add(E),E===0?"uv":`uv${E}`}function g(E,M,D,Z,$){const ne=Z.fog,oe=$.geometry,re=E.isMeshStandardMaterial?Z.environment:null,ue=(E.isMeshStandardMaterial?t:e).get(E.envMap||re),Q=ue&&ue.mapping===yo?ue.image.height:null,ye=m[E.type];E.precision!==null&&(f=i.getMaxPrecision(E.precision),f!==E.precision&&console.warn("THREE.WebGLProgram.getParameters:",E.precision,"not supported, using",f,"instead."));const Re=oe.morphAttributes.position||oe.morphAttributes.normal||oe.morphAttributes.color,Ge=Re!==void 0?Re.length:0;let dt=0;oe.morphAttributes.position!==void 0&&(dt=1),oe.morphAttributes.normal!==void 0&&(dt=2),oe.morphAttributes.color!==void 0&&(dt=3);let Ut,ie,pe,Le;if(ye){const Dt=os[ye];Ut=Dt.vertexShader,ie=Dt.fragmentShader}else Ut=E.vertexShader,ie=E.fragmentShader,c.update(E),pe=c.getVertexShaderID(E),Le=c.getFragmentShaderID(E);const ve=s.getRenderTarget(),Xe=s.state.buffers.depth.getReversed(),et=$.isInstancedMesh===!0,ft=$.isBatchedMesh===!0,qt=!!E.map,xt=!!E.matcap,nn=!!ue,B=!!E.aoMap,Ei=!!E.lightMap,mt=!!E.bumpMap,gt=!!E.normalMap,ze=!!E.displacementMap,Ot=!!E.emissiveMap,Be=!!E.metalnessMap,R=!!E.roughnessMap,y=E.anisotropy>0,H=E.clearcoat>0,ae=E.dispersion>0,le=E.iridescence>0,te=E.sheen>0,Fe=E.transmission>0,Te=y&&!!E.anisotropyMap,we=H&&!!E.clearcoatMap,yt=H&&!!E.clearcoatNormalMap,fe=H&&!!E.clearcoatRoughnessMap,Ne=le&&!!E.iridescenceMap,$e=le&&!!E.iridescenceThicknessMap,Ze=te&&!!E.sheenColorMap,Ce=te&&!!E.sheenRoughnessMap,_t=!!E.specularMap,at=!!E.specularColorMap,Bt=!!E.specularIntensityMap,O=Fe&&!!E.transmissionMap,_e=Fe&&!!E.thicknessMap,K=!!E.gradientMap,ce=!!E.alphaMap,be=E.alphaTest>0,Se=!!E.alphaHash,ot=!!E.extensions;let jt=ri;E.toneMapped&&(ve===null||ve.isXRRenderTarget===!0)&&(jt=s.toneMapping);const Ln={shaderID:ye,shaderType:E.type,shaderName:E.name,vertexShader:Ut,fragmentShader:ie,defines:E.defines,customVertexShaderID:pe,customFragmentShaderID:Le,isRawShaderMaterial:E.isRawShaderMaterial===!0,glslVersion:E.glslVersion,precision:f,batching:ft,batchingColor:ft&&$._colorsTexture!==null,instancing:et,instancingColor:et&&$.instanceColor!==null,instancingMorph:et&&$.morphTexture!==null,supportsVertexTextures:d,outputColorSpace:ve===null?s.outputColorSpace:ve.isXRRenderTarget===!0?ve.texture.colorSpace:bi,alphaToCoverage:!!E.alphaToCoverage,map:qt,matcap:xt,envMap:nn,envMapMode:nn&&ue.mapping,envMapCubeUVHeight:Q,aoMap:B,lightMap:Ei,bumpMap:mt,normalMap:gt,displacementMap:d&&ze,emissiveMap:Ot,normalMapObjectSpace:gt&&E.normalMapType===Ax,normalMapTangentSpace:gt&&E.normalMapType===qs,metalnessMap:Be,roughnessMap:R,anisotropy:y,anisotropyMap:Te,clearcoat:H,clearcoatMap:we,clearcoatNormalMap:yt,clearcoatRoughnessMap:fe,dispersion:ae,iridescence:le,iridescenceMap:Ne,iridescenceThicknessMap:$e,sheen:te,sheenColorMap:Ze,sheenRoughnessMap:Ce,specularMap:_t,specularColorMap:at,specularIntensityMap:Bt,transmission:Fe,transmissionMap:O,thicknessMap:_e,gradientMap:K,opaque:E.transparent===!1&&E.blending===Ui&&E.alphaToCoverage===!1,alphaMap:ce,alphaTest:be,alphaHash:Se,combine:E.combine,mapUv:qt&&_(E.map.channel),aoMapUv:B&&_(E.aoMap.channel),lightMapUv:Ei&&_(E.lightMap.channel),bumpMapUv:mt&&_(E.bumpMap.channel),normalMapUv:gt&&_(E.normalMap.channel),displacementMapUv:ze&&_(E.displacementMap.channel),emissiveMapUv:Ot&&_(E.emissiveMap.channel),metalnessMapUv:Be&&_(E.metalnessMap.channel),roughnessMapUv:R&&_(E.roughnessMap.channel),anisotropyMapUv:Te&&_(E.anisotropyMap.channel),clearcoatMapUv:we&&_(E.clearcoatMap.channel),clearcoatNormalMapUv:yt&&_(E.clearcoatNormalMap.channel),clearcoatRoughnessMapUv:fe&&_(E.clearcoatRoughnessMap.channel),iridescenceMapUv:Ne&&_(E.iridescenceMap.channel),iridescenceThicknessMapUv:$e&&_(E.iridescenceThicknessMap.channel),sheenColorMapUv:Ze&&_(E.sheenColorMap.channel),sheenRoughnessMapUv:Ce&&_(E.sheenRoughnessMap.channel),specularMapUv:_t&&_(E.specularMap.channel),specularColorMapUv:at&&_(E.specularColorMap.channel),specularIntensityMapUv:Bt&&_(E.specularIntensityMap.channel),transmissionMapUv:O&&_(E.transmissionMap.channel),thicknessMapUv:_e&&_(E.thicknessMap.channel),alphaMapUv:ce&&_(E.alphaMap.channel),vertexTangents:!!oe.attributes.tangent&&(gt||y),vertexColors:E.vertexColors,vertexAlphas:E.vertexColors===!0&&!!oe.attributes.color&&oe.attributes.color.itemSize===4,pointsUvs:$.isPoints===!0&&!!oe.attributes.uv&&(qt||ce),fog:!!ne,useFog:E.fog===!0,fogExp2:!!ne&&ne.isFogExp2,flatShading:E.flatShading===!0,sizeAttenuation:E.sizeAttenuation===!0,logarithmicDepthBuffer:h,reverseDepthBuffer:Xe,skinning:$.isSkinnedMesh===!0,morphTargets:oe.morphAttributes.position!==void 0,morphNormals:oe.morphAttributes.normal!==void 0,morphColors:oe.morphAttributes.color!==void 0,morphTargetsCount:Ge,morphTextureStride:dt,numDirLights:M.directional.length,numPointLights:M.point.length,numSpotLights:M.spot.length,numSpotLightMaps:M.spotLightMap.length,numRectAreaLights:M.rectArea.length,numHemiLights:M.hemi.length,numDirLightShadows:M.directionalShadowMap.length,numPointLightShadows:M.pointShadowMap.length,numSpotLightShadows:M.spotShadowMap.length,numSpotLightShadowsWithMaps:M.numSpotLightShadowsWithMaps,numLightProbes:M.numLightProbes,numClippingPlanes:o.numPlanes,numClipIntersection:o.numIntersection,dithering:E.dithering,shadowMapEnabled:s.shadowMap.enabled&&D.length>0,shadowMapType:s.shadowMap.type,toneMapping:jt,decodeVideoTexture:qt&&E.map.isVideoTexture===!0&&rt.getTransfer(E.map.colorSpace)===Nt,decodeVideoTextureEmissive:Ot&&E.emissiveMap.isVideoTexture===!0&&rt.getTransfer(E.emissiveMap.colorSpace)===Nt,premultipliedAlpha:E.premultipliedAlpha,doubleSided:E.side===Bn,flipSided:E.side===Wt,useDepthPacking:E.depthPacking>=0,depthPacking:E.depthPacking||0,index0AttributeName:E.index0AttributeName,extensionClipCullDistance:ot&&E.extensions.clipCullDistance===!0&&n.has("WEBGL_clip_cull_distance"),extensionMultiDraw:(ot&&E.extensions.multiDraw===!0||ft)&&n.has("WEBGL_multi_draw"),rendererExtensionParallelShaderCompile:n.has("KHR_parallel_shader_compile"),customProgramCacheKey:E.customProgramCacheKey()};return Ln.vertexUv1s=l.has(1),Ln.vertexUv2s=l.has(2),Ln.vertexUv3s=l.has(3),l.clear(),Ln}function p(E){const M=[];if(E.shaderID?M.push(E.shaderID):(M.push(E.customVertexShaderID),M.push(E.customFragmentShaderID)),E.defines!==void 0)for(const D in E.defines)M.push(D),M.push(E.defines[D]);return E.isRawShaderMaterial===!1&&(T(M,E),S(M,E),M.push(s.outputColorSpace)),M.push(E.customProgramCacheKey),M.join()}function T(E,M){E.push(M.precision),E.push(M.outputColorSpace),E.push(M.envMapMode),E.push(M.envMapCubeUVHeight),E.push(M.mapUv),E.push(M.alphaMapUv),E.push(M.lightMapUv),E.push(M.aoMapUv),E.push(M.bumpMapUv),E.push(M.normalMapUv),E.push(M.displacementMapUv),E.push(M.emissiveMapUv),E.push(M.metalnessMapUv),E.push(M.roughnessMapUv),E.push(M.anisotropyMapUv),E.push(M.clearcoatMapUv),E.push(M.clearcoatNormalMapUv),E.push(M.clearcoatRoughnessMapUv),E.push(M.iridescenceMapUv),E.push(M.iridescenceThicknessMapUv),E.push(M.sheenColorMapUv),E.push(M.sheenRoughnessMapUv),E.push(M.specularMapUv),E.push(M.specularColorMapUv),E.push(M.specularIntensityMapUv),E.push(M.transmissionMapUv),E.push(M.thicknessMapUv),E.push(M.combine),E.push(M.fogExp2),E.push(M.sizeAttenuation),E.push(M.morphTargetsCount),E.push(M.morphAttributeCount),E.push(M.numDirLights),E.push(M.numPointLights),E.push(M.numSpotLights),E.push(M.numSpotLightMaps),E.push(M.numHemiLights),E.push(M.numRectAreaLights),E.push(M.numDirLightShadows),E.push(M.numPointLightShadows),E.push(M.numSpotLightShadows),E.push(M.numSpotLightShadowsWithMaps),E.push(M.numLightProbes),E.push(M.shadowMapType),E.push(M.toneMapping),E.push(M.numClippingPlanes),E.push(M.numClipIntersection),E.push(M.depthPacking)}function S(E,M){a.disableAll(),M.supportsVertexTextures&&a.enable(0),M.instancing&&a.enable(1),M.instancingColor&&a.enable(2),M.instancingMorph&&a.enable(3),M.matcap&&a.enable(4),M.envMap&&a.enable(5),M.normalMapObjectSpace&&a.enable(6),M.normalMapTangentSpace&&a.enable(7),M.clearcoat&&a.enable(8),M.iridescence&&a.enable(9),M.alphaTest&&a.enable(10),M.vertexColors&&a.enable(11),M.vertexAlphas&&a.enable(12),M.vertexUv1s&&a.enable(13),M.vertexUv2s&&a.enable(14),M.vertexUv3s&&a.enable(15),M.vertexTangents&&a.enable(16),M.anisotropy&&a.enable(17),M.alphaHash&&a.enable(18),M.batching&&a.enable(19),M.dispersion&&a.enable(20),M.batchingColor&&a.enable(21),E.push(a.mask),a.disableAll(),M.fog&&a.enable(0),M.useFog&&a.enable(1),M.flatShading&&a.enable(2),M.logarithmicDepthBuffer&&a.enable(3),M.reverseDepthBuffer&&a.enable(4),M.skinning&&a.enable(5),M.morphTargets&&a.enable(6),M.morphNormals&&a.enable(7),M.morphColors&&a.enable(8),M.premultipliedAlpha&&a.enable(9),M.shadowMapEnabled&&a.enable(10),M.doubleSided&&a.enable(11),M.flipSided&&a.enable(12),M.useDepthPacking&&a.enable(13),M.dithering&&a.enable(14),M.transmission&&a.enable(15),M.sheen&&a.enable(16),M.opaque&&a.enable(17),M.pointsUvs&&a.enable(18),M.decodeVideoTexture&&a.enable(19),M.decodeVideoTextureEmissive&&a.enable(20),M.alphaToCoverage&&a.enable(21),E.push(a.mask)}function v(E){const M=m[E.type];let D;if(M){const Z=os[M];D=cM.clone(Z.uniforms)}else D=E.uniforms;return D}function P(E,M){let D;for(let Z=0,$=u.length;Z<$;Z++){const ne=u[Z];if(ne.cacheKey===M){D=ne,++D.usedTimes;break}}return D===void 0&&(D=new Xw(s,M,E,r),u.push(D)),D}function N(E){if(--E.usedTimes===0){const M=u.indexOf(E);u[M]=u[u.length-1],u.pop(),E.destroy()}}function w(E){c.remove(E)}function F(){c.dispose()}return{getParameters:g,getProgramCacheKey:p,getUniforms:v,acquireProgram:P,releaseProgram:N,releaseShaderCache:w,programs:u,dispose:F}}function Zw(){let s=new WeakMap;function e(o){return s.has(o)}function t(o){let a=s.get(o);return a===void 0&&(a={},s.set(o,a)),a}function n(o){s.delete(o)}function i(o,a,c){s.get(o)[a]=c}function r(){s=new WeakMap}return{has:e,get:t,remove:n,update:i,dispose:r}}function Qw(s,e){return s.groupOrder!==e.groupOrder?s.groupOrder-e.groupOrder:s.renderOrder!==e.renderOrder?s.renderOrder-e.renderOrder:s.material.id!==e.material.id?s.material.id-e.material.id:s.z!==e.z?s.z-e.z:s.id-e.id}function Gg(s,e){return s.groupOrder!==e.groupOrder?s.groupOrder-e.groupOrder:s.renderOrder!==e.renderOrder?s.renderOrder-e.renderOrder:s.z!==e.z?e.z-s.z:s.id-e.id}function zg(){const s=[];let e=0;const t=[],n=[],i=[];function r(){e=0,t.length=0,n.length=0,i.length=0}function o(h,d,f,m,_,g){let p=s[e];return p===void 0?(p={id:h.id,object:h,geometry:d,material:f,groupOrder:m,renderOrder:h.renderOrder,z:_,group:g},s[e]=p):(p.id=h.id,p.object=h,p.geometry=d,p.material=f,p.groupOrder=m,p.renderOrder=h.renderOrder,p.z=_,p.group=g),e++,p}function a(h,d,f,m,_,g){const p=o(h,d,f,m,_,g);f.transmission>0?n.push(p):f.transparent===!0?i.push(p):t.push(p)}function c(h,d,f,m,_,g){const p=o(h,d,f,m,_,g);f.transmission>0?n.unshift(p):f.transparent===!0?i.unshift(p):t.unshift(p)}function l(h,d){t.length>1&&t.sort(h||Qw),n.length>1&&n.sort(d||Gg),i.length>1&&i.sort(d||Gg)}function u(){for(let h=e,d=s.length;h<d;h++){const f=s[h];if(f.id===null)break;f.id=null,f.object=null,f.geometry=null,f.material=null,f.group=null}}return{opaque:t,transmissive:n,transparent:i,init:r,push:a,unshift:c,finish:u,sort:l}}function Jw(){let s=new WeakMap;function e(n,i){const r=s.get(n);let o;return r===void 0?(o=new zg,s.set(n,[o])):i>=r.length?(o=new zg,r.push(o)):o=r[i],o}function t(){s=new WeakMap}return{get:e,dispose:t}}function eN(){const s={};return{get:function(e){if(s[e.id]!==void 0)return s[e.id];let t;switch(e.type){case"DirectionalLight":t={direction:new U,color:new De};break;case"SpotLight":t={position:new U,direction:new U,color:new De,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":t={position:new U,color:new De,distance:0,decay:0};break;case"HemisphereLight":t={direction:new U,skyColor:new De,groundColor:new De};break;case"RectAreaLight":t={color:new De,position:new U,halfWidth:new U,halfHeight:new U};break}return s[e.id]=t,t}}}function tN(){const s={};return{get:function(e){if(s[e.id]!==void 0)return s[e.id];let t;switch(e.type){case"DirectionalLight":t={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Ee};break;case"SpotLight":t={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Ee};break;case"PointLight":t={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Ee,shadowCameraNear:1,shadowCameraFar:1e3};break}return s[e.id]=t,t}}}let nN=0;function iN(s,e){return(e.castShadow?2:0)-(s.castShadow?2:0)+(e.map?1:0)-(s.map?1:0)}function sN(s){const e=new eN,t=tN(),n={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1,numLightProbes:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0,numLightProbes:0};for(let l=0;l<9;l++)n.probe.push(new U);const i=new U,r=new ut,o=new ut;function a(l){let u=0,h=0,d=0;for(let E=0;E<9;E++)n.probe[E].set(0,0,0);let f=0,m=0,_=0,g=0,p=0,T=0,S=0,v=0,P=0,N=0,w=0;l.sort(iN);for(let E=0,M=l.length;E<M;E++){const D=l[E],Z=D.color,$=D.intensity,ne=D.distance,oe=D.shadow&&D.shadow.map?D.shadow.map.texture:null;if(D.isAmbientLight)u+=Z.r*$,h+=Z.g*$,d+=Z.b*$;else if(D.isLightProbe){for(let re=0;re<9;re++)n.probe[re].addScaledVector(D.sh.coefficients[re],$);w++}else if(D.isDirectionalLight){const re=e.get(D);if(re.color.copy(D.color).multiplyScalar(D.intensity),D.castShadow){const ue=D.shadow,Q=t.get(D);Q.shadowIntensity=ue.intensity,Q.shadowBias=ue.bias,Q.shadowNormalBias=ue.normalBias,Q.shadowRadius=ue.radius,Q.shadowMapSize=ue.mapSize,n.directionalShadow[f]=Q,n.directionalShadowMap[f]=oe,n.directionalShadowMatrix[f]=D.shadow.matrix,T++}n.directional[f]=re,f++}else if(D.isSpotLight){const re=e.get(D);re.position.setFromMatrixPosition(D.matrixWorld),re.color.copy(Z).multiplyScalar($),re.distance=ne,re.coneCos=Math.cos(D.angle),re.penumbraCos=Math.cos(D.angle*(1-D.penumbra)),re.decay=D.decay,n.spot[_]=re;const ue=D.shadow;if(D.map&&(n.spotLightMap[P]=D.map,P++,ue.updateMatrices(D),D.castShadow&&N++),n.spotLightMatrix[_]=ue.matrix,D.castShadow){const Q=t.get(D);Q.shadowIntensity=ue.intensity,Q.shadowBias=ue.bias,Q.shadowNormalBias=ue.normalBias,Q.shadowRadius=ue.radius,Q.shadowMapSize=ue.mapSize,n.spotShadow[_]=Q,n.spotShadowMap[_]=oe,v++}_++}else if(D.isRectAreaLight){const re=e.get(D);re.color.copy(Z).multiplyScalar($),re.halfWidth.set(D.width*.5,0,0),re.halfHeight.set(0,D.height*.5,0),n.rectArea[g]=re,g++}else if(D.isPointLight){const re=e.get(D);if(re.color.copy(D.color).multiplyScalar(D.intensity),re.distance=D.distance,re.decay=D.decay,D.castShadow){const ue=D.shadow,Q=t.get(D);Q.shadowIntensity=ue.intensity,Q.shadowBias=ue.bias,Q.shadowNormalBias=ue.normalBias,Q.shadowRadius=ue.radius,Q.shadowMapSize=ue.mapSize,Q.shadowCameraNear=ue.camera.near,Q.shadowCameraFar=ue.camera.far,n.pointShadow[m]=Q,n.pointShadowMap[m]=oe,n.pointShadowMatrix[m]=D.shadow.matrix,S++}n.point[m]=re,m++}else if(D.isHemisphereLight){const re=e.get(D);re.skyColor.copy(D.color).multiplyScalar($),re.groundColor.copy(D.groundColor).multiplyScalar($),n.hemi[p]=re,p++}}g>0&&(s.has("OES_texture_float_linear")===!0?(n.rectAreaLTC1=ge.LTC_FLOAT_1,n.rectAreaLTC2=ge.LTC_FLOAT_2):(n.rectAreaLTC1=ge.LTC_HALF_1,n.rectAreaLTC2=ge.LTC_HALF_2)),n.ambient[0]=u,n.ambient[1]=h,n.ambient[2]=d;const F=n.hash;(F.directionalLength!==f||F.pointLength!==m||F.spotLength!==_||F.rectAreaLength!==g||F.hemiLength!==p||F.numDirectionalShadows!==T||F.numPointShadows!==S||F.numSpotShadows!==v||F.numSpotMaps!==P||F.numLightProbes!==w)&&(n.directional.length=f,n.spot.length=_,n.rectArea.length=g,n.point.length=m,n.hemi.length=p,n.directionalShadow.length=T,n.directionalShadowMap.length=T,n.pointShadow.length=S,n.pointShadowMap.length=S,n.spotShadow.length=v,n.spotShadowMap.length=v,n.directionalShadowMatrix.length=T,n.pointShadowMatrix.length=S,n.spotLightMatrix.length=v+P-N,n.spotLightMap.length=P,n.numSpotLightShadowsWithMaps=N,n.numLightProbes=w,F.directionalLength=f,F.pointLength=m,F.spotLength=_,F.rectAreaLength=g,F.hemiLength=p,F.numDirectionalShadows=T,F.numPointShadows=S,F.numSpotShadows=v,F.numSpotMaps=P,F.numLightProbes=w,n.version=nN++)}function c(l,u){let h=0,d=0,f=0,m=0,_=0;const g=u.matrixWorldInverse;for(let p=0,T=l.length;p<T;p++){const S=l[p];if(S.isDirectionalLight){const v=n.directional[h];v.direction.setFromMatrixPosition(S.matrixWorld),i.setFromMatrixPosition(S.target.matrixWorld),v.direction.sub(i),v.direction.transformDirection(g),h++}else if(S.isSpotLight){const v=n.spot[f];v.position.setFromMatrixPosition(S.matrixWorld),v.position.applyMatrix4(g),v.direction.setFromMatrixPosition(S.matrixWorld),i.setFromMatrixPosition(S.target.matrixWorld),v.direction.sub(i),v.direction.transformDirection(g),f++}else if(S.isRectAreaLight){const v=n.rectArea[m];v.position.setFromMatrixPosition(S.matrixWorld),v.position.applyMatrix4(g),o.identity(),r.copy(S.matrixWorld),r.premultiply(g),o.extractRotation(r),v.halfWidth.set(S.width*.5,0,0),v.halfHeight.set(0,S.height*.5,0),v.halfWidth.applyMatrix4(o),v.halfHeight.applyMatrix4(o),m++}else if(S.isPointLight){const v=n.point[d];v.position.setFromMatrixPosition(S.matrixWorld),v.position.applyMatrix4(g),d++}else if(S.isHemisphereLight){const v=n.hemi[_];v.direction.setFromMatrixPosition(S.matrixWorld),v.direction.transformDirection(g),_++}}}return{setup:a,setupView:c,state:n}}function kg(s){const e=new sN(s),t=[],n=[];function i(u){l.camera=u,t.length=0,n.length=0}function r(u){t.push(u)}function o(u){n.push(u)}function a(){e.setup(t)}function c(u){e.setupView(t,u)}const l={lightsArray:t,shadowsArray:n,camera:null,lights:e,transmissionRenderTarget:{}};return{init:i,state:l,setupLights:a,setupLightsView:c,pushLight:r,pushShadow:o}}function rN(s){let e=new WeakMap;function t(i,r=0){const o=e.get(i);let a;return o===void 0?(a=new kg(s),e.set(i,[a])):r>=o.length?(a=new kg(s),o.push(a)):a=o[r],a}function n(){e=new WeakMap}return{get:t,dispose:n}}const oN=`void main() {
	gl_Position = vec4( position, 1.0 );
}`,aN=`uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;function cN(s,e,t){let n=new dh;const i=new Ee,r=new Ee,o=new je,a=new SM({depthPacking:hb}),c=new bM,l={},u=t.maxTextureSize,h={[Ki]:Wt,[Wt]:Ki,[Bn]:Bn},d=new Rr({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new Ee},radius:{value:4}},vertexShader:oN,fragmentShader:aN}),f=d.clone();f.defines.HORIZONTAL_PASS=1;const m=new Qi;m.setAttribute("position",new Pn(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const _=new On(m,d),g=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=If;let p=this.type;this.render=function(N,w,F){if(g.enabled===!1||g.autoUpdate===!1&&g.needsUpdate===!1||N.length===0)return;const E=s.getRenderTarget(),M=s.getActiveCubeFace(),D=s.getActiveMipmapLevel(),Z=s.state;Z.setBlending(Si),Z.buffers.color.setClear(1,1,1,1),Z.buffers.depth.setTest(!0),Z.setScissorTest(!1);const $=p!==_i&&this.type===_i,ne=p===_i&&this.type!==_i;for(let oe=0,re=N.length;oe<re;oe++){const ue=N[oe],Q=ue.shadow;if(Q===void 0){console.warn("THREE.WebGLShadowMap:",ue,"has no shadow.");continue}if(Q.autoUpdate===!1&&Q.needsUpdate===!1)continue;i.copy(Q.mapSize);const ye=Q.getFrameExtents();if(i.multiply(ye),r.copy(Q.mapSize),(i.x>u||i.y>u)&&(i.x>u&&(r.x=Math.floor(u/ye.x),i.x=r.x*ye.x,Q.mapSize.x=r.x),i.y>u&&(r.y=Math.floor(u/ye.y),i.y=r.y*ye.y,Q.mapSize.y=r.y)),Q.map===null||$===!0||ne===!0){const Ge=this.type!==_i?{minFilter:zt,magFilter:zt}:{};Q.map!==null&&Q.map.dispose(),Q.map=new bo(i.x,i.y,Ge),Q.map.texture.name=ue.name+".shadowMap",Q.camera.updateProjectionMatrix()}s.setRenderTarget(Q.map),s.clear();const Re=Q.getViewportCount();for(let Ge=0;Ge<Re;Ge++){const dt=Q.getViewport(Ge);o.set(r.x*dt.x,r.y*dt.y,r.x*dt.z,r.y*dt.w),Z.viewport(o),Q.updateMatrices(ue,Ge),n=Q.getFrustum(),v(w,F,Q.camera,ue,this.type)}Q.isPointLightShadow!==!0&&this.type===_i&&T(Q,F),Q.needsUpdate=!1}p=this.type,g.needsUpdate=!1,s.setRenderTarget(E,M,D)};function T(N,w){const F=e.update(_);d.defines.VSM_SAMPLES!==N.blurSamples&&(d.defines.VSM_SAMPLES=N.blurSamples,f.defines.VSM_SAMPLES=N.blurSamples,d.needsUpdate=!0,f.needsUpdate=!0),N.mapPass===null&&(N.mapPass=new bo(i.x,i.y)),d.uniforms.shadow_pass.value=N.map.texture,d.uniforms.resolution.value=N.mapSize,d.uniforms.radius.value=N.radius,s.setRenderTarget(N.mapPass),s.clear(),s.renderBufferDirect(w,null,F,d,_,null),f.uniforms.shadow_pass.value=N.mapPass.texture,f.uniforms.resolution.value=N.mapSize,f.uniforms.radius.value=N.radius,s.setRenderTarget(N.map),s.clear(),s.renderBufferDirect(w,null,F,f,_,null)}function S(N,w,F,E){let M=null;const D=F.isPointLight===!0?N.customDistanceMaterial:N.customDepthMaterial;if(D!==void 0)M=D;else if(M=F.isPointLight===!0?c:a,s.localClippingEnabled&&w.clipShadows===!0&&Array.isArray(w.clippingPlanes)&&w.clippingPlanes.length!==0||w.displacementMap&&w.displacementScale!==0||w.alphaMap&&w.alphaTest>0||w.map&&w.alphaTest>0){const Z=M.uuid,$=w.uuid;let ne=l[Z];ne===void 0&&(ne={},l[Z]=ne);let oe=ne[$];oe===void 0&&(oe=M.clone(),ne[$]=oe,w.addEventListener("dispose",P)),M=oe}if(M.visible=w.visible,M.wireframe=w.wireframe,E===_i?M.side=w.shadowSide!==null?w.shadowSide:w.side:M.side=w.shadowSide!==null?w.shadowSide:h[w.side],M.alphaMap=w.alphaMap,M.alphaTest=w.alphaTest,M.map=w.map,M.clipShadows=w.clipShadows,M.clippingPlanes=w.clippingPlanes,M.clipIntersection=w.clipIntersection,M.displacementMap=w.displacementMap,M.displacementScale=w.displacementScale,M.displacementBias=w.displacementBias,M.wireframeLinewidth=w.wireframeLinewidth,M.linewidth=w.linewidth,F.isPointLight===!0&&M.isMeshDistanceMaterial===!0){const Z=s.properties.get(M);Z.light=F}return M}function v(N,w,F,E,M){if(N.visible===!1)return;if(N.layers.test(w.layers)&&(N.isMesh||N.isLine||N.isPoints)&&(N.castShadow||N.receiveShadow&&M===_i)&&(!N.frustumCulled||n.intersectsObject(N))){N.modelViewMatrix.multiplyMatrices(F.matrixWorldInverse,N.matrixWorld);const $=e.update(N),ne=N.material;if(Array.isArray(ne)){const oe=$.groups;for(let re=0,ue=oe.length;re<ue;re++){const Q=oe[re],ye=ne[Q.materialIndex];if(ye&&ye.visible){const Re=S(N,ye,E,M);N.onBeforeShadow(s,N,w,F,$,Re,Q),s.renderBufferDirect(F,null,$,Re,N,Q),N.onAfterShadow(s,N,w,F,$,Re,Q)}}}else if(ne.visible){const oe=S(N,ne,E,M);N.onBeforeShadow(s,N,w,F,$,oe,null),s.renderBufferDirect(F,null,$,oe,N,null),N.onAfterShadow(s,N,w,F,$,oe,null)}}const Z=N.children;for(let $=0,ne=Z.length;$<ne;$++)v(Z[$],w,F,E,M)}function P(N){N.target.removeEventListener("dispose",P);for(const F in l){const E=l[F],M=N.target.uuid;M in E&&(E[M].dispose(),delete E[M])}}}const lN={[zc]:kc,[Hc]:Xc,[Wc]:qc,[br]:$c,[kc]:zc,[Xc]:Hc,[qc]:Wc,[$c]:br};function uN(s,e){function t(){let O=!1;const _e=new je;let K=null;const ce=new je(0,0,0,0);return{setMask:function(be){K!==be&&!O&&(s.colorMask(be,be,be,be),K=be)},setLocked:function(be){O=be},setClear:function(be,Se,ot,jt,Ln){Ln===!0&&(be*=jt,Se*=jt,ot*=jt),_e.set(be,Se,ot,jt),ce.equals(_e)===!1&&(s.clearColor(be,Se,ot,jt),ce.copy(_e))},reset:function(){O=!1,K=null,ce.set(-1,0,0,0)}}}function n(){let O=!1,_e=!1,K=null,ce=null,be=null;return{setReversed:function(Se){if(_e!==Se){const ot=e.get("EXT_clip_control");_e?ot.clipControlEXT(ot.LOWER_LEFT_EXT,ot.ZERO_TO_ONE_EXT):ot.clipControlEXT(ot.LOWER_LEFT_EXT,ot.NEGATIVE_ONE_TO_ONE_EXT);const jt=be;be=null,this.setClear(jt)}_e=Se},getReversed:function(){return _e},setTest:function(Se){Se?ve(s.DEPTH_TEST):Xe(s.DEPTH_TEST)},setMask:function(Se){K!==Se&&!O&&(s.depthMask(Se),K=Se)},setFunc:function(Se){if(_e&&(Se=lN[Se]),ce!==Se){switch(Se){case zc:s.depthFunc(s.NEVER);break;case kc:s.depthFunc(s.ALWAYS);break;case Hc:s.depthFunc(s.LESS);break;case br:s.depthFunc(s.LEQUAL);break;case Wc:s.depthFunc(s.EQUAL);break;case $c:s.depthFunc(s.GEQUAL);break;case Xc:s.depthFunc(s.GREATER);break;case qc:s.depthFunc(s.NOTEQUAL);break;default:s.depthFunc(s.LEQUAL)}ce=Se}},setLocked:function(Se){O=Se},setClear:function(Se){be!==Se&&(_e&&(Se=1-Se),s.clearDepth(Se),be=Se)},reset:function(){O=!1,K=null,ce=null,be=null,_e=!1}}}function i(){let O=!1,_e=null,K=null,ce=null,be=null,Se=null,ot=null,jt=null,Ln=null;return{setTest:function(Dt){O||(Dt?ve(s.STENCIL_TEST):Xe(s.STENCIL_TEST))},setMask:function(Dt){_e!==Dt&&!O&&(s.stencilMask(Dt),_e=Dt)},setFunc:function(Dt,Vi,As){(K!==Dt||ce!==Vi||be!==As)&&(s.stencilFunc(Dt,Vi,As),K=Dt,ce=Vi,be=As)},setOp:function(Dt,Vi,As){(Se!==Dt||ot!==Vi||jt!==As)&&(s.stencilOp(Dt,Vi,As),Se=Dt,ot=Vi,jt=As)},setLocked:function(Dt){O=Dt},setClear:function(Dt){Ln!==Dt&&(s.clearStencil(Dt),Ln=Dt)},reset:function(){O=!1,_e=null,K=null,ce=null,be=null,Se=null,ot=null,jt=null,Ln=null}}}const r=new t,o=new n,a=new i,c=new WeakMap,l=new WeakMap;let u={},h={},d=new WeakMap,f=[],m=null,_=!1,g=null,p=null,T=null,S=null,v=null,P=null,N=null,w=new De(0,0,0),F=0,E=!1,M=null,D=null,Z=null,$=null,ne=null;const oe=s.getParameter(s.MAX_COMBINED_TEXTURE_IMAGE_UNITS);let re=!1,ue=0;const Q=s.getParameter(s.VERSION);Q.indexOf("WebGL")!==-1?(ue=parseFloat(/^WebGL (\d)/.exec(Q)[1]),re=ue>=1):Q.indexOf("OpenGL ES")!==-1&&(ue=parseFloat(/^OpenGL ES (\d)/.exec(Q)[1]),re=ue>=2);let ye=null,Re={};const Ge=s.getParameter(s.SCISSOR_BOX),dt=s.getParameter(s.VIEWPORT),Ut=new je().fromArray(Ge),ie=new je().fromArray(dt);function pe(O,_e,K,ce){const be=new Uint8Array(4),Se=s.createTexture();s.bindTexture(O,Se),s.texParameteri(O,s.TEXTURE_MIN_FILTER,s.NEAREST),s.texParameteri(O,s.TEXTURE_MAG_FILTER,s.NEAREST);for(let ot=0;ot<K;ot++)O===s.TEXTURE_3D||O===s.TEXTURE_2D_ARRAY?s.texImage3D(_e,0,s.RGBA,1,1,ce,0,s.RGBA,s.UNSIGNED_BYTE,be):s.texImage2D(_e+ot,0,s.RGBA,1,1,0,s.RGBA,s.UNSIGNED_BYTE,be);return Se}const Le={};Le[s.TEXTURE_2D]=pe(s.TEXTURE_2D,s.TEXTURE_2D,1),Le[s.TEXTURE_CUBE_MAP]=pe(s.TEXTURE_CUBE_MAP,s.TEXTURE_CUBE_MAP_POSITIVE_X,6),Le[s.TEXTURE_2D_ARRAY]=pe(s.TEXTURE_2D_ARRAY,s.TEXTURE_2D_ARRAY,1,1),Le[s.TEXTURE_3D]=pe(s.TEXTURE_3D,s.TEXTURE_3D,1,1),r.setClear(0,0,0,1),o.setClear(1),a.setClear(0),ve(s.DEPTH_TEST),o.setFunc(br),mt(!1),gt(sf),ve(s.CULL_FACE),B(Si);function ve(O){u[O]!==!0&&(s.enable(O),u[O]=!0)}function Xe(O){u[O]!==!1&&(s.disable(O),u[O]=!1)}function et(O,_e){return h[O]!==_e?(s.bindFramebuffer(O,_e),h[O]=_e,O===s.DRAW_FRAMEBUFFER&&(h[s.FRAMEBUFFER]=_e),O===s.FRAMEBUFFER&&(h[s.DRAW_FRAMEBUFFER]=_e),!0):!1}function ft(O,_e){let K=f,ce=!1;if(O){K=d.get(_e),K===void 0&&(K=[],d.set(_e,K));const be=O.textures;if(K.length!==be.length||K[0]!==s.COLOR_ATTACHMENT0){for(let Se=0,ot=be.length;Se<ot;Se++)K[Se]=s.COLOR_ATTACHMENT0+Se;K.length=be.length,ce=!0}}else K[0]!==s.BACK&&(K[0]=s.BACK,ce=!0);ce&&s.drawBuffers(K)}function qt(O){return m!==O?(s.useProgram(O),m=O,!0):!1}const xt={[vi]:s.FUNC_ADD,[Bf]:s.FUNC_SUBTRACT,[Of]:s.FUNC_REVERSE_SUBTRACT};xt[_x]=s.MIN,xt[xx]=s.MAX;const nn={[Vf]:s.ZERO,[Gf]:s.ONE,[zf]:s.SRC_COLOR,[Vc]:s.SRC_ALPHA,[qf]:s.SRC_ALPHA_SATURATE,[$f]:s.DST_COLOR,[Hf]:s.DST_ALPHA,[kf]:s.ONE_MINUS_SRC_COLOR,[Gc]:s.ONE_MINUS_SRC_ALPHA,[Xf]:s.ONE_MINUS_DST_COLOR,[Wf]:s.ONE_MINUS_DST_ALPHA,[ib]:s.CONSTANT_COLOR,[sb]:s.ONE_MINUS_CONSTANT_COLOR,[rb]:s.CONSTANT_ALPHA,[ob]:s.ONE_MINUS_CONSTANT_ALPHA};function B(O,_e,K,ce,be,Se,ot,jt,Ln,Dt){if(O===Si){_===!0&&(Xe(s.BLEND),_=!1);return}if(_===!1&&(ve(s.BLEND),_=!0),O!==Ff){if(O!==g||Dt!==E){if((p!==vi||v!==vi)&&(s.blendEquation(s.FUNC_ADD),p=vi,v=vi),Dt)switch(O){case Ui:s.blendFuncSeparate(s.ONE,s.ONE_MINUS_SRC_ALPHA,s.ONE,s.ONE_MINUS_SRC_ALPHA);break;case wa:s.blendFunc(s.ONE,s.ONE);break;case Na:s.blendFuncSeparate(s.ZERO,s.ONE_MINUS_SRC_COLOR,s.ZERO,s.ONE);break;case Ca:s.blendFuncSeparate(s.ZERO,s.SRC_COLOR,s.ZERO,s.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",O);break}else switch(O){case Ui:s.blendFuncSeparate(s.SRC_ALPHA,s.ONE_MINUS_SRC_ALPHA,s.ONE,s.ONE_MINUS_SRC_ALPHA);break;case wa:s.blendFunc(s.SRC_ALPHA,s.ONE);break;case Na:s.blendFuncSeparate(s.ZERO,s.ONE_MINUS_SRC_COLOR,s.ZERO,s.ONE);break;case Ca:s.blendFunc(s.ZERO,s.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",O);break}T=null,S=null,P=null,N=null,w.set(0,0,0),F=0,g=O,E=Dt}return}be=be||_e,Se=Se||K,ot=ot||ce,(_e!==p||be!==v)&&(s.blendEquationSeparate(xt[_e],xt[be]),p=_e,v=be),(K!==T||ce!==S||Se!==P||ot!==N)&&(s.blendFuncSeparate(nn[K],nn[ce],nn[Se],nn[ot]),T=K,S=ce,P=Se,N=ot),(jt.equals(w)===!1||Ln!==F)&&(s.blendColor(jt.r,jt.g,jt.b,Ln),w.copy(jt),F=Ln),g=O,E=!1}function Ei(O,_e){O.side===Bn?Xe(s.CULL_FACE):ve(s.CULL_FACE);let K=O.side===Wt;_e&&(K=!K),mt(K),O.blending===Ui&&O.transparent===!1?B(Si):B(O.blending,O.blendEquation,O.blendSrc,O.blendDst,O.blendEquationAlpha,O.blendSrcAlpha,O.blendDstAlpha,O.blendColor,O.blendAlpha,O.premultipliedAlpha),o.setFunc(O.depthFunc),o.setTest(O.depthTest),o.setMask(O.depthWrite),r.setMask(O.colorWrite);const ce=O.stencilWrite;a.setTest(ce),ce&&(a.setMask(O.stencilWriteMask),a.setFunc(O.stencilFunc,O.stencilRef,O.stencilFuncMask),a.setOp(O.stencilFail,O.stencilZFail,O.stencilZPass)),Ot(O.polygonOffset,O.polygonOffsetFactor,O.polygonOffsetUnits),O.alphaToCoverage===!0?ve(s.SAMPLE_ALPHA_TO_COVERAGE):Xe(s.SAMPLE_ALPHA_TO_COVERAGE)}function mt(O){M!==O&&(O?s.frontFace(s.CW):s.frontFace(s.CCW),M=O)}function gt(O){O!==mx?(ve(s.CULL_FACE),O!==D&&(O===sf?s.cullFace(s.BACK):O===gx?s.cullFace(s.FRONT):s.cullFace(s.FRONT_AND_BACK))):Xe(s.CULL_FACE),D=O}function ze(O){O!==Z&&(re&&s.lineWidth(O),Z=O)}function Ot(O,_e,K){O?(ve(s.POLYGON_OFFSET_FILL),($!==_e||ne!==K)&&(s.polygonOffset(_e,K),$=_e,ne=K)):Xe(s.POLYGON_OFFSET_FILL)}function Be(O){O?ve(s.SCISSOR_TEST):Xe(s.SCISSOR_TEST)}function R(O){O===void 0&&(O=s.TEXTURE0+oe-1),ye!==O&&(s.activeTexture(O),ye=O)}function y(O,_e,K){K===void 0&&(ye===null?K=s.TEXTURE0+oe-1:K=ye);let ce=Re[K];ce===void 0&&(ce={type:void 0,texture:void 0},Re[K]=ce),(ce.type!==O||ce.texture!==_e)&&(ye!==K&&(s.activeTexture(K),ye=K),s.bindTexture(O,_e||Le[O]),ce.type=O,ce.texture=_e)}function H(){const O=Re[ye];O!==void 0&&O.type!==void 0&&(s.bindTexture(O.type,null),O.type=void 0,O.texture=void 0)}function ae(){try{s.compressedTexImage2D.apply(s,arguments)}catch(O){console.error("THREE.WebGLState:",O)}}function le(){try{s.compressedTexImage3D.apply(s,arguments)}catch(O){console.error("THREE.WebGLState:",O)}}function te(){try{s.texSubImage2D.apply(s,arguments)}catch(O){console.error("THREE.WebGLState:",O)}}function Fe(){try{s.texSubImage3D.apply(s,arguments)}catch(O){console.error("THREE.WebGLState:",O)}}function Te(){try{s.compressedTexSubImage2D.apply(s,arguments)}catch(O){console.error("THREE.WebGLState:",O)}}function we(){try{s.compressedTexSubImage3D.apply(s,arguments)}catch(O){console.error("THREE.WebGLState:",O)}}function yt(){try{s.texStorage2D.apply(s,arguments)}catch(O){console.error("THREE.WebGLState:",O)}}function fe(){try{s.texStorage3D.apply(s,arguments)}catch(O){console.error("THREE.WebGLState:",O)}}function Ne(){try{s.texImage2D.apply(s,arguments)}catch(O){console.error("THREE.WebGLState:",O)}}function $e(){try{s.texImage3D.apply(s,arguments)}catch(O){console.error("THREE.WebGLState:",O)}}function Ze(O){Ut.equals(O)===!1&&(s.scissor(O.x,O.y,O.z,O.w),Ut.copy(O))}function Ce(O){ie.equals(O)===!1&&(s.viewport(O.x,O.y,O.z,O.w),ie.copy(O))}function _t(O,_e){let K=l.get(_e);K===void 0&&(K=new WeakMap,l.set(_e,K));let ce=K.get(O);ce===void 0&&(ce=s.getUniformBlockIndex(_e,O.name),K.set(O,ce))}function at(O,_e){const ce=l.get(_e).get(O);c.get(_e)!==ce&&(s.uniformBlockBinding(_e,ce,O.__bindingPointIndex),c.set(_e,ce))}function Bt(){s.disable(s.BLEND),s.disable(s.CULL_FACE),s.disable(s.DEPTH_TEST),s.disable(s.POLYGON_OFFSET_FILL),s.disable(s.SCISSOR_TEST),s.disable(s.STENCIL_TEST),s.disable(s.SAMPLE_ALPHA_TO_COVERAGE),s.blendEquation(s.FUNC_ADD),s.blendFunc(s.ONE,s.ZERO),s.blendFuncSeparate(s.ONE,s.ZERO,s.ONE,s.ZERO),s.blendColor(0,0,0,0),s.colorMask(!0,!0,!0,!0),s.clearColor(0,0,0,0),s.depthMask(!0),s.depthFunc(s.LESS),o.setReversed(!1),s.clearDepth(1),s.stencilMask(4294967295),s.stencilFunc(s.ALWAYS,0,4294967295),s.stencilOp(s.KEEP,s.KEEP,s.KEEP),s.clearStencil(0),s.cullFace(s.BACK),s.frontFace(s.CCW),s.polygonOffset(0,0),s.activeTexture(s.TEXTURE0),s.bindFramebuffer(s.FRAMEBUFFER,null),s.bindFramebuffer(s.DRAW_FRAMEBUFFER,null),s.bindFramebuffer(s.READ_FRAMEBUFFER,null),s.useProgram(null),s.lineWidth(1),s.scissor(0,0,s.canvas.width,s.canvas.height),s.viewport(0,0,s.canvas.width,s.canvas.height),u={},ye=null,Re={},h={},d=new WeakMap,f=[],m=null,_=!1,g=null,p=null,T=null,S=null,v=null,P=null,N=null,w=new De(0,0,0),F=0,E=!1,M=null,D=null,Z=null,$=null,ne=null,Ut.set(0,0,s.canvas.width,s.canvas.height),ie.set(0,0,s.canvas.width,s.canvas.height),r.reset(),o.reset(),a.reset()}return{buffers:{color:r,depth:o,stencil:a},enable:ve,disable:Xe,bindFramebuffer:et,drawBuffers:ft,useProgram:qt,setBlending:B,setMaterial:Ei,setFlipSided:mt,setCullFace:gt,setLineWidth:ze,setPolygonOffset:Ot,setScissorTest:Be,activeTexture:R,bindTexture:y,unbindTexture:H,compressedTexImage2D:ae,compressedTexImage3D:le,texImage2D:Ne,texImage3D:$e,updateUBOMapping:_t,uniformBlockBinding:at,texStorage2D:yt,texStorage3D:fe,texSubImage2D:te,texSubImage3D:Fe,compressedTexSubImage2D:Te,compressedTexSubImage3D:we,scissor:Ze,viewport:Ce,reset:Bt}}function hN(s,e,t,n,i,r,o){const a=e.has("WEBGL_multisampled_render_to_texture")?e.get("WEBGL_multisampled_render_to_texture"):null,c=typeof navigator>"u"?!1:/OculusBrowser/g.test(navigator.userAgent),l=new Ee,u=new WeakMap;let h;const d=new WeakMap;let f=!1;try{f=typeof OffscreenCanvas<"u"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch{}function m(R,y){return f?new OffscreenCanvas(R,y):ku("canvas")}function _(R,y,H){let ae=1;const le=Be(R);if((le.width>H||le.height>H)&&(ae=H/Math.max(le.width,le.height)),ae<1)if(typeof HTMLImageElement<"u"&&R instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&R instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&R instanceof ImageBitmap||typeof VideoFrame<"u"&&R instanceof VideoFrame){const te=Math.floor(ae*le.width),Fe=Math.floor(ae*le.height);h===void 0&&(h=m(te,Fe));const Te=y?m(te,Fe):h;return Te.width=te,Te.height=Fe,Te.getContext("2d").drawImage(R,0,0,te,Fe),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+le.width+"x"+le.height+") to ("+te+"x"+Fe+")."),Te}else return"data"in R&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+le.width+"x"+le.height+")."),R;return R}function g(R){return R.generateMipmaps}function p(R){s.generateMipmap(R)}function T(R){return R.isWebGLCubeRenderTarget?s.TEXTURE_CUBE_MAP:R.isWebGL3DRenderTarget?s.TEXTURE_3D:R.isWebGLArrayRenderTarget||R.isCompressedArrayTexture?s.TEXTURE_2D_ARRAY:s.TEXTURE_2D}function S(R,y,H,ae,le=!1){if(R!==null){if(s[R]!==void 0)return s[R];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+R+"'")}let te=y;if(y===s.RED&&(H===s.FLOAT&&(te=s.R32F),H===s.HALF_FLOAT&&(te=s.R16F),H===s.UNSIGNED_BYTE&&(te=s.R8)),y===s.RED_INTEGER&&(H===s.UNSIGNED_BYTE&&(te=s.R8UI),H===s.UNSIGNED_SHORT&&(te=s.R16UI),H===s.UNSIGNED_INT&&(te=s.R32UI),H===s.BYTE&&(te=s.R8I),H===s.SHORT&&(te=s.R16I),H===s.INT&&(te=s.R32I)),y===s.RG&&(H===s.FLOAT&&(te=s.RG32F),H===s.HALF_FLOAT&&(te=s.RG16F),H===s.UNSIGNED_BYTE&&(te=s.RG8)),y===s.RG_INTEGER&&(H===s.UNSIGNED_BYTE&&(te=s.RG8UI),H===s.UNSIGNED_SHORT&&(te=s.RG16UI),H===s.UNSIGNED_INT&&(te=s.RG32UI),H===s.BYTE&&(te=s.RG8I),H===s.SHORT&&(te=s.RG16I),H===s.INT&&(te=s.RG32I)),y===s.RGB_INTEGER&&(H===s.UNSIGNED_BYTE&&(te=s.RGB8UI),H===s.UNSIGNED_SHORT&&(te=s.RGB16UI),H===s.UNSIGNED_INT&&(te=s.RGB32UI),H===s.BYTE&&(te=s.RGB8I),H===s.SHORT&&(te=s.RGB16I),H===s.INT&&(te=s.RGB32I)),y===s.RGBA_INTEGER&&(H===s.UNSIGNED_BYTE&&(te=s.RGBA8UI),H===s.UNSIGNED_SHORT&&(te=s.RGBA16UI),H===s.UNSIGNED_INT&&(te=s.RGBA32UI),H===s.BYTE&&(te=s.RGBA8I),H===s.SHORT&&(te=s.RGBA16I),H===s.INT&&(te=s.RGBA32I)),y===s.RGB&&H===s.UNSIGNED_INT_5_9_9_9_REV&&(te=s.RGB9_E5),y===s.RGBA){const Fe=le?Gu:rt.getTransfer(ae);H===s.FLOAT&&(te=s.RGBA32F),H===s.HALF_FLOAT&&(te=s.RGBA16F),H===s.UNSIGNED_BYTE&&(te=Fe===Nt?s.SRGB8_ALPHA8:s.RGBA8),H===s.UNSIGNED_SHORT_4_4_4_4&&(te=s.RGBA4),H===s.UNSIGNED_SHORT_5_5_5_1&&(te=s.RGB5_A1)}return(te===s.R16F||te===s.R32F||te===s.RG16F||te===s.RG32F||te===s.RGBA16F||te===s.RGBA32F)&&e.get("EXT_color_buffer_float"),te}function v(R,y){let H;return R?y===null||y===Yt||y===ms?H=s.DEPTH24_STENCIL8:y===rn?H=s.DEPTH32F_STENCIL8:y===Yi&&(H=s.DEPTH24_STENCIL8,console.warn("DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment.")):y===null||y===Yt||y===ms?H=s.DEPTH_COMPONENT24:y===rn?H=s.DEPTH_COMPONENT32F:y===Yi&&(H=s.DEPTH_COMPONENT16),H}function P(R,y){return g(R)===!0||R.isFramebufferTexture&&R.minFilter!==zt&&R.minFilter!==yn?Math.log2(Math.max(y.width,y.height))+1:R.mipmaps!==void 0&&R.mipmaps.length>0?R.mipmaps.length:R.isCompressedTexture&&Array.isArray(R.image)?y.mipmaps.length:1}function N(R){const y=R.target;y.removeEventListener("dispose",N),F(y),y.isVideoTexture&&u.delete(y)}function w(R){const y=R.target;y.removeEventListener("dispose",w),M(y)}function F(R){const y=n.get(R);if(y.__webglInit===void 0)return;const H=R.source,ae=d.get(H);if(ae){const le=ae[y.__cacheKey];le.usedTimes--,le.usedTimes===0&&E(R),Object.keys(ae).length===0&&d.delete(H)}n.remove(R)}function E(R){const y=n.get(R);s.deleteTexture(y.__webglTexture);const H=R.source,ae=d.get(H);delete ae[y.__cacheKey],o.memory.textures--}function M(R){const y=n.get(R);if(R.depthTexture&&(R.depthTexture.dispose(),n.remove(R.depthTexture)),R.isWebGLCubeRenderTarget)for(let ae=0;ae<6;ae++){if(Array.isArray(y.__webglFramebuffer[ae]))for(let le=0;le<y.__webglFramebuffer[ae].length;le++)s.deleteFramebuffer(y.__webglFramebuffer[ae][le]);else s.deleteFramebuffer(y.__webglFramebuffer[ae]);y.__webglDepthbuffer&&s.deleteRenderbuffer(y.__webglDepthbuffer[ae])}else{if(Array.isArray(y.__webglFramebuffer))for(let ae=0;ae<y.__webglFramebuffer.length;ae++)s.deleteFramebuffer(y.__webglFramebuffer[ae]);else s.deleteFramebuffer(y.__webglFramebuffer);if(y.__webglDepthbuffer&&s.deleteRenderbuffer(y.__webglDepthbuffer),y.__webglMultisampledFramebuffer&&s.deleteFramebuffer(y.__webglMultisampledFramebuffer),y.__webglColorRenderbuffer)for(let ae=0;ae<y.__webglColorRenderbuffer.length;ae++)y.__webglColorRenderbuffer[ae]&&s.deleteRenderbuffer(y.__webglColorRenderbuffer[ae]);y.__webglDepthRenderbuffer&&s.deleteRenderbuffer(y.__webglDepthRenderbuffer)}const H=R.textures;for(let ae=0,le=H.length;ae<le;ae++){const te=n.get(H[ae]);te.__webglTexture&&(s.deleteTexture(te.__webglTexture),o.memory.textures--),n.remove(H[ae])}n.remove(R)}let D=0;function Z(){D=0}function $(){const R=D;return R>=i.maxTextures&&console.warn("THREE.WebGLTextures: Trying to use "+R+" texture units while this GPU supports only "+i.maxTextures),D+=1,R}function ne(R){const y=[];return y.push(R.wrapS),y.push(R.wrapT),y.push(R.wrapR||0),y.push(R.magFilter),y.push(R.minFilter),y.push(R.anisotropy),y.push(R.internalFormat),y.push(R.format),y.push(R.type),y.push(R.generateMipmaps),y.push(R.premultiplyAlpha),y.push(R.flipY),y.push(R.unpackAlignment),y.push(R.colorSpace),y.join()}function oe(R,y){const H=n.get(R);if(R.isVideoTexture&&ze(R),R.isRenderTargetTexture===!1&&R.version>0&&H.__version!==R.version){const ae=R.image;if(ae===null)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else if(ae.complete===!1)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{ie(H,R,y);return}}t.bindTexture(s.TEXTURE_2D,H.__webglTexture,s.TEXTURE0+y)}function re(R,y){const H=n.get(R);if(R.version>0&&H.__version!==R.version){ie(H,R,y);return}t.bindTexture(s.TEXTURE_2D_ARRAY,H.__webglTexture,s.TEXTURE0+y)}function ue(R,y){const H=n.get(R);if(R.version>0&&H.__version!==R.version){ie(H,R,y);return}t.bindTexture(s.TEXTURE_3D,H.__webglTexture,s.TEXTURE0+y)}function Q(R,y){const H=n.get(R);if(R.version>0&&H.__version!==R.version){pe(H,R,y);return}t.bindTexture(s.TEXTURE_CUBE_MAP,H.__webglTexture,s.TEXTURE0+y)}const ye={[vo]:s.REPEAT,[cs]:s.CLAMP_TO_EDGE,[To]:s.MIRRORED_REPEAT},Re={[zt]:s.NEAREST,[Vu]:s.NEAREST_MIPMAP_NEAREST,[ls]:s.NEAREST_MIPMAP_LINEAR,[yn]:s.LINEAR,[ha]:s.LINEAR_MIPMAP_NEAREST,[ti]:s.LINEAR_MIPMAP_LINEAR},Ge={[ep]:s.NEVER,[rp]:s.ALWAYS,[ch]:s.LESS,[lh]:s.LEQUAL,[tp]:s.EQUAL,[sp]:s.GEQUAL,[np]:s.GREATER,[ip]:s.NOTEQUAL};function dt(R,y){if(y.type===rn&&e.has("OES_texture_float_linear")===!1&&(y.magFilter===yn||y.magFilter===ha||y.magFilter===ls||y.magFilter===ti||y.minFilter===yn||y.minFilter===ha||y.minFilter===ls||y.minFilter===ti)&&console.warn("THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device."),s.texParameteri(R,s.TEXTURE_WRAP_S,ye[y.wrapS]),s.texParameteri(R,s.TEXTURE_WRAP_T,ye[y.wrapT]),(R===s.TEXTURE_3D||R===s.TEXTURE_2D_ARRAY)&&s.texParameteri(R,s.TEXTURE_WRAP_R,ye[y.wrapR]),s.texParameteri(R,s.TEXTURE_MAG_FILTER,Re[y.magFilter]),s.texParameteri(R,s.TEXTURE_MIN_FILTER,Re[y.minFilter]),y.compareFunction&&(s.texParameteri(R,s.TEXTURE_COMPARE_MODE,s.COMPARE_REF_TO_TEXTURE),s.texParameteri(R,s.TEXTURE_COMPARE_FUNC,Ge[y.compareFunction])),e.has("EXT_texture_filter_anisotropic")===!0){if(y.magFilter===zt||y.minFilter!==ls&&y.minFilter!==ti||y.type===rn&&e.has("OES_texture_float_linear")===!1)return;if(y.anisotropy>1||n.get(y).__currentAnisotropy){const H=e.get("EXT_texture_filter_anisotropic");s.texParameterf(R,H.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(y.anisotropy,i.getMaxAnisotropy())),n.get(y).__currentAnisotropy=y.anisotropy}}}function Ut(R,y){let H=!1;R.__webglInit===void 0&&(R.__webglInit=!0,y.addEventListener("dispose",N));const ae=y.source;let le=d.get(ae);le===void 0&&(le={},d.set(ae,le));const te=ne(y);if(te!==R.__cacheKey){le[te]===void 0&&(le[te]={texture:s.createTexture(),usedTimes:0},o.memory.textures++,H=!0),le[te].usedTimes++;const Fe=le[R.__cacheKey];Fe!==void 0&&(le[R.__cacheKey].usedTimes--,Fe.usedTimes===0&&E(y)),R.__cacheKey=te,R.__webglTexture=le[te].texture}return H}function ie(R,y,H){let ae=s.TEXTURE_2D;(y.isDataArrayTexture||y.isCompressedArrayTexture)&&(ae=s.TEXTURE_2D_ARRAY),y.isData3DTexture&&(ae=s.TEXTURE_3D);const le=Ut(R,y),te=y.source;t.bindTexture(ae,R.__webglTexture,s.TEXTURE0+H);const Fe=n.get(te);if(te.version!==Fe.__version||le===!0){t.activeTexture(s.TEXTURE0+H);const Te=rt.getPrimaries(rt.workingColorSpace),we=y.colorSpace===Ti?null:rt.getPrimaries(y.colorSpace),yt=y.colorSpace===Ti||Te===we?s.NONE:s.BROWSER_DEFAULT_WEBGL;s.pixelStorei(s.UNPACK_FLIP_Y_WEBGL,y.flipY),s.pixelStorei(s.UNPACK_PREMULTIPLY_ALPHA_WEBGL,y.premultiplyAlpha),s.pixelStorei(s.UNPACK_ALIGNMENT,y.unpackAlignment),s.pixelStorei(s.UNPACK_COLORSPACE_CONVERSION_WEBGL,yt);let fe=_(y.image,!1,i.maxTextureSize);fe=Ot(y,fe);const Ne=r.convert(y.format,y.colorSpace),$e=r.convert(y.type);let Ze=S(y.internalFormat,Ne,$e,y.colorSpace,y.isVideoTexture);dt(ae,y);let Ce;const _t=y.mipmaps,at=y.isVideoTexture!==!0,Bt=Fe.__version===void 0||le===!0,O=te.dataReady,_e=P(y,fe);if(y.isDepthTexture)Ze=v(y.format===gs,y.type),Bt&&(at?t.texStorage2D(s.TEXTURE_2D,1,Ze,fe.width,fe.height):t.texImage2D(s.TEXTURE_2D,0,Ze,fe.width,fe.height,0,Ne,$e,null));else if(y.isDataTexture)if(_t.length>0){at&&Bt&&t.texStorage2D(s.TEXTURE_2D,_e,Ze,_t[0].width,_t[0].height);for(let K=0,ce=_t.length;K<ce;K++)Ce=_t[K],at?O&&t.texSubImage2D(s.TEXTURE_2D,K,0,0,Ce.width,Ce.height,Ne,$e,Ce.data):t.texImage2D(s.TEXTURE_2D,K,Ze,Ce.width,Ce.height,0,Ne,$e,Ce.data);y.generateMipmaps=!1}else at?(Bt&&t.texStorage2D(s.TEXTURE_2D,_e,Ze,fe.width,fe.height),O&&t.texSubImage2D(s.TEXTURE_2D,0,0,0,fe.width,fe.height,Ne,$e,fe.data)):t.texImage2D(s.TEXTURE_2D,0,Ze,fe.width,fe.height,0,Ne,$e,fe.data);else if(y.isCompressedTexture)if(y.isCompressedArrayTexture){at&&Bt&&t.texStorage3D(s.TEXTURE_2D_ARRAY,_e,Ze,_t[0].width,_t[0].height,fe.depth);for(let K=0,ce=_t.length;K<ce;K++)if(Ce=_t[K],y.format!==Nn)if(Ne!==null)if(at){if(O)if(y.layerUpdates.size>0){const be=xg(Ce.width,Ce.height,y.format,y.type);for(const Se of y.layerUpdates){const ot=Ce.data.subarray(Se*be/Ce.data.BYTES_PER_ELEMENT,(Se+1)*be/Ce.data.BYTES_PER_ELEMENT);t.compressedTexSubImage3D(s.TEXTURE_2D_ARRAY,K,0,0,Se,Ce.width,Ce.height,1,Ne,ot)}y.clearLayerUpdates()}else t.compressedTexSubImage3D(s.TEXTURE_2D_ARRAY,K,0,0,0,Ce.width,Ce.height,fe.depth,Ne,Ce.data)}else t.compressedTexImage3D(s.TEXTURE_2D_ARRAY,K,Ze,Ce.width,Ce.height,fe.depth,0,Ce.data,0,0);else console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");else at?O&&t.texSubImage3D(s.TEXTURE_2D_ARRAY,K,0,0,0,Ce.width,Ce.height,fe.depth,Ne,$e,Ce.data):t.texImage3D(s.TEXTURE_2D_ARRAY,K,Ze,Ce.width,Ce.height,fe.depth,0,Ne,$e,Ce.data)}else{at&&Bt&&t.texStorage2D(s.TEXTURE_2D,_e,Ze,_t[0].width,_t[0].height);for(let K=0,ce=_t.length;K<ce;K++)Ce=_t[K],y.format!==Nn?Ne!==null?at?O&&t.compressedTexSubImage2D(s.TEXTURE_2D,K,0,0,Ce.width,Ce.height,Ne,Ce.data):t.compressedTexImage2D(s.TEXTURE_2D,K,Ze,Ce.width,Ce.height,0,Ce.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):at?O&&t.texSubImage2D(s.TEXTURE_2D,K,0,0,Ce.width,Ce.height,Ne,$e,Ce.data):t.texImage2D(s.TEXTURE_2D,K,Ze,Ce.width,Ce.height,0,Ne,$e,Ce.data)}else if(y.isDataArrayTexture)if(at){if(Bt&&t.texStorage3D(s.TEXTURE_2D_ARRAY,_e,Ze,fe.width,fe.height,fe.depth),O)if(y.layerUpdates.size>0){const K=xg(fe.width,fe.height,y.format,y.type);for(const ce of y.layerUpdates){const be=fe.data.subarray(ce*K/fe.data.BYTES_PER_ELEMENT,(ce+1)*K/fe.data.BYTES_PER_ELEMENT);t.texSubImage3D(s.TEXTURE_2D_ARRAY,0,0,0,ce,fe.width,fe.height,1,Ne,$e,be)}y.clearLayerUpdates()}else t.texSubImage3D(s.TEXTURE_2D_ARRAY,0,0,0,0,fe.width,fe.height,fe.depth,Ne,$e,fe.data)}else t.texImage3D(s.TEXTURE_2D_ARRAY,0,Ze,fe.width,fe.height,fe.depth,0,Ne,$e,fe.data);else if(y.isData3DTexture)at?(Bt&&t.texStorage3D(s.TEXTURE_3D,_e,Ze,fe.width,fe.height,fe.depth),O&&t.texSubImage3D(s.TEXTURE_3D,0,0,0,0,fe.width,fe.height,fe.depth,Ne,$e,fe.data)):t.texImage3D(s.TEXTURE_3D,0,Ze,fe.width,fe.height,fe.depth,0,Ne,$e,fe.data);else if(y.isFramebufferTexture){if(Bt)if(at)t.texStorage2D(s.TEXTURE_2D,_e,Ze,fe.width,fe.height);else{let K=fe.width,ce=fe.height;for(let be=0;be<_e;be++)t.texImage2D(s.TEXTURE_2D,be,Ze,K,ce,0,Ne,$e,null),K>>=1,ce>>=1}}else if(_t.length>0){if(at&&Bt){const K=Be(_t[0]);t.texStorage2D(s.TEXTURE_2D,_e,Ze,K.width,K.height)}for(let K=0,ce=_t.length;K<ce;K++)Ce=_t[K],at?O&&t.texSubImage2D(s.TEXTURE_2D,K,0,0,Ne,$e,Ce):t.texImage2D(s.TEXTURE_2D,K,Ze,Ne,$e,Ce);y.generateMipmaps=!1}else if(at){if(Bt){const K=Be(fe);t.texStorage2D(s.TEXTURE_2D,_e,Ze,K.width,K.height)}O&&t.texSubImage2D(s.TEXTURE_2D,0,0,0,Ne,$e,fe)}else t.texImage2D(s.TEXTURE_2D,0,Ze,Ne,$e,fe);g(y)&&p(ae),Fe.__version=te.version,y.onUpdate&&y.onUpdate(y)}R.__version=y.version}function pe(R,y,H){if(y.image.length!==6)return;const ae=Ut(R,y),le=y.source;t.bindTexture(s.TEXTURE_CUBE_MAP,R.__webglTexture,s.TEXTURE0+H);const te=n.get(le);if(le.version!==te.__version||ae===!0){t.activeTexture(s.TEXTURE0+H);const Fe=rt.getPrimaries(rt.workingColorSpace),Te=y.colorSpace===Ti?null:rt.getPrimaries(y.colorSpace),we=y.colorSpace===Ti||Fe===Te?s.NONE:s.BROWSER_DEFAULT_WEBGL;s.pixelStorei(s.UNPACK_FLIP_Y_WEBGL,y.flipY),s.pixelStorei(s.UNPACK_PREMULTIPLY_ALPHA_WEBGL,y.premultiplyAlpha),s.pixelStorei(s.UNPACK_ALIGNMENT,y.unpackAlignment),s.pixelStorei(s.UNPACK_COLORSPACE_CONVERSION_WEBGL,we);const yt=y.isCompressedTexture||y.image[0].isCompressedTexture,fe=y.image[0]&&y.image[0].isDataTexture,Ne=[];for(let ce=0;ce<6;ce++)!yt&&!fe?Ne[ce]=_(y.image[ce],!0,i.maxCubemapSize):Ne[ce]=fe?y.image[ce].image:y.image[ce],Ne[ce]=Ot(y,Ne[ce]);const $e=Ne[0],Ze=r.convert(y.format,y.colorSpace),Ce=r.convert(y.type),_t=S(y.internalFormat,Ze,Ce,y.colorSpace),at=y.isVideoTexture!==!0,Bt=te.__version===void 0||ae===!0,O=le.dataReady;let _e=P(y,$e);dt(s.TEXTURE_CUBE_MAP,y);let K;if(yt){at&&Bt&&t.texStorage2D(s.TEXTURE_CUBE_MAP,_e,_t,$e.width,$e.height);for(let ce=0;ce<6;ce++){K=Ne[ce].mipmaps;for(let be=0;be<K.length;be++){const Se=K[be];y.format!==Nn?Ze!==null?at?O&&t.compressedTexSubImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X+ce,be,0,0,Se.width,Se.height,Ze,Se.data):t.compressedTexImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X+ce,be,_t,Se.width,Se.height,0,Se.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):at?O&&t.texSubImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X+ce,be,0,0,Se.width,Se.height,Ze,Ce,Se.data):t.texImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X+ce,be,_t,Se.width,Se.height,0,Ze,Ce,Se.data)}}}else{if(K=y.mipmaps,at&&Bt){K.length>0&&_e++;const ce=Be(Ne[0]);t.texStorage2D(s.TEXTURE_CUBE_MAP,_e,_t,ce.width,ce.height)}for(let ce=0;ce<6;ce++)if(fe){at?O&&t.texSubImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X+ce,0,0,0,Ne[ce].width,Ne[ce].height,Ze,Ce,Ne[ce].data):t.texImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X+ce,0,_t,Ne[ce].width,Ne[ce].height,0,Ze,Ce,Ne[ce].data);for(let be=0;be<K.length;be++){const ot=K[be].image[ce].image;at?O&&t.texSubImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X+ce,be+1,0,0,ot.width,ot.height,Ze,Ce,ot.data):t.texImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X+ce,be+1,_t,ot.width,ot.height,0,Ze,Ce,ot.data)}}else{at?O&&t.texSubImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X+ce,0,0,0,Ze,Ce,Ne[ce]):t.texImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X+ce,0,_t,Ze,Ce,Ne[ce]);for(let be=0;be<K.length;be++){const Se=K[be];at?O&&t.texSubImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X+ce,be+1,0,0,Ze,Ce,Se.image[ce]):t.texImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X+ce,be+1,_t,Ze,Ce,Se.image[ce])}}}g(y)&&p(s.TEXTURE_CUBE_MAP),te.__version=le.version,y.onUpdate&&y.onUpdate(y)}R.__version=y.version}function Le(R,y,H,ae,le,te){const Fe=r.convert(H.format,H.colorSpace),Te=r.convert(H.type),we=S(H.internalFormat,Fe,Te,H.colorSpace),yt=n.get(y),fe=n.get(H);if(fe.__renderTarget=y,!yt.__hasExternalTextures){const Ne=Math.max(1,y.width>>te),$e=Math.max(1,y.height>>te);le===s.TEXTURE_3D||le===s.TEXTURE_2D_ARRAY?t.texImage3D(le,te,we,Ne,$e,y.depth,0,Fe,Te,null):t.texImage2D(le,te,we,Ne,$e,0,Fe,Te,null)}t.bindFramebuffer(s.FRAMEBUFFER,R),gt(y)?a.framebufferTexture2DMultisampleEXT(s.FRAMEBUFFER,ae,le,fe.__webglTexture,0,mt(y)):(le===s.TEXTURE_2D||le>=s.TEXTURE_CUBE_MAP_POSITIVE_X&&le<=s.TEXTURE_CUBE_MAP_NEGATIVE_Z)&&s.framebufferTexture2D(s.FRAMEBUFFER,ae,le,fe.__webglTexture,te),t.bindFramebuffer(s.FRAMEBUFFER,null)}function ve(R,y,H){if(s.bindRenderbuffer(s.RENDERBUFFER,R),y.depthBuffer){const ae=y.depthTexture,le=ae&&ae.isDepthTexture?ae.type:null,te=v(y.stencilBuffer,le),Fe=y.stencilBuffer?s.DEPTH_STENCIL_ATTACHMENT:s.DEPTH_ATTACHMENT,Te=mt(y);gt(y)?a.renderbufferStorageMultisampleEXT(s.RENDERBUFFER,Te,te,y.width,y.height):H?s.renderbufferStorageMultisample(s.RENDERBUFFER,Te,te,y.width,y.height):s.renderbufferStorage(s.RENDERBUFFER,te,y.width,y.height),s.framebufferRenderbuffer(s.FRAMEBUFFER,Fe,s.RENDERBUFFER,R)}else{const ae=y.textures;for(let le=0;le<ae.length;le++){const te=ae[le],Fe=r.convert(te.format,te.colorSpace),Te=r.convert(te.type),we=S(te.internalFormat,Fe,Te,te.colorSpace),yt=mt(y);H&&gt(y)===!1?s.renderbufferStorageMultisample(s.RENDERBUFFER,yt,we,y.width,y.height):gt(y)?a.renderbufferStorageMultisampleEXT(s.RENDERBUFFER,yt,we,y.width,y.height):s.renderbufferStorage(s.RENDERBUFFER,we,y.width,y.height)}}s.bindRenderbuffer(s.RENDERBUFFER,null)}function Xe(R,y){if(y&&y.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(t.bindFramebuffer(s.FRAMEBUFFER,R),!(y.depthTexture&&y.depthTexture.isDepthTexture))throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");const ae=n.get(y.depthTexture);ae.__renderTarget=y,(!ae.__webglTexture||y.depthTexture.image.width!==y.width||y.depthTexture.image.height!==y.height)&&(y.depthTexture.image.width=y.width,y.depthTexture.image.height=y.height,y.depthTexture.needsUpdate=!0),oe(y.depthTexture,0);const le=ae.__webglTexture,te=mt(y);if(y.depthTexture.format===hs)gt(y)?a.framebufferTexture2DMultisampleEXT(s.FRAMEBUFFER,s.DEPTH_ATTACHMENT,s.TEXTURE_2D,le,0,te):s.framebufferTexture2D(s.FRAMEBUFFER,s.DEPTH_ATTACHMENT,s.TEXTURE_2D,le,0);else if(y.depthTexture.format===gs)gt(y)?a.framebufferTexture2DMultisampleEXT(s.FRAMEBUFFER,s.DEPTH_STENCIL_ATTACHMENT,s.TEXTURE_2D,le,0,te):s.framebufferTexture2D(s.FRAMEBUFFER,s.DEPTH_STENCIL_ATTACHMENT,s.TEXTURE_2D,le,0);else throw new Error("Unknown depthTexture format")}function et(R){const y=n.get(R),H=R.isWebGLCubeRenderTarget===!0;if(y.__boundDepthTexture!==R.depthTexture){const ae=R.depthTexture;if(y.__depthDisposeCallback&&y.__depthDisposeCallback(),ae){const le=()=>{delete y.__boundDepthTexture,delete y.__depthDisposeCallback,ae.removeEventListener("dispose",le)};ae.addEventListener("dispose",le),y.__depthDisposeCallback=le}y.__boundDepthTexture=ae}if(R.depthTexture&&!y.__autoAllocateDepthBuffer){if(H)throw new Error("target.depthTexture not supported in Cube render targets");Xe(y.__webglFramebuffer,R)}else if(H){y.__webglDepthbuffer=[];for(let ae=0;ae<6;ae++)if(t.bindFramebuffer(s.FRAMEBUFFER,y.__webglFramebuffer[ae]),y.__webglDepthbuffer[ae]===void 0)y.__webglDepthbuffer[ae]=s.createRenderbuffer(),ve(y.__webglDepthbuffer[ae],R,!1);else{const le=R.stencilBuffer?s.DEPTH_STENCIL_ATTACHMENT:s.DEPTH_ATTACHMENT,te=y.__webglDepthbuffer[ae];s.bindRenderbuffer(s.RENDERBUFFER,te),s.framebufferRenderbuffer(s.FRAMEBUFFER,le,s.RENDERBUFFER,te)}}else if(t.bindFramebuffer(s.FRAMEBUFFER,y.__webglFramebuffer),y.__webglDepthbuffer===void 0)y.__webglDepthbuffer=s.createRenderbuffer(),ve(y.__webglDepthbuffer,R,!1);else{const ae=R.stencilBuffer?s.DEPTH_STENCIL_ATTACHMENT:s.DEPTH_ATTACHMENT,le=y.__webglDepthbuffer;s.bindRenderbuffer(s.RENDERBUFFER,le),s.framebufferRenderbuffer(s.FRAMEBUFFER,ae,s.RENDERBUFFER,le)}t.bindFramebuffer(s.FRAMEBUFFER,null)}function ft(R,y,H){const ae=n.get(R);y!==void 0&&Le(ae.__webglFramebuffer,R,R.texture,s.COLOR_ATTACHMENT0,s.TEXTURE_2D,0),H!==void 0&&et(R)}function qt(R){const y=R.texture,H=n.get(R),ae=n.get(y);R.addEventListener("dispose",w);const le=R.textures,te=R.isWebGLCubeRenderTarget===!0,Fe=le.length>1;if(Fe||(ae.__webglTexture===void 0&&(ae.__webglTexture=s.createTexture()),ae.__version=y.version,o.memory.textures++),te){H.__webglFramebuffer=[];for(let Te=0;Te<6;Te++)if(y.mipmaps&&y.mipmaps.length>0){H.__webglFramebuffer[Te]=[];for(let we=0;we<y.mipmaps.length;we++)H.__webglFramebuffer[Te][we]=s.createFramebuffer()}else H.__webglFramebuffer[Te]=s.createFramebuffer()}else{if(y.mipmaps&&y.mipmaps.length>0){H.__webglFramebuffer=[];for(let Te=0;Te<y.mipmaps.length;Te++)H.__webglFramebuffer[Te]=s.createFramebuffer()}else H.__webglFramebuffer=s.createFramebuffer();if(Fe)for(let Te=0,we=le.length;Te<we;Te++){const yt=n.get(le[Te]);yt.__webglTexture===void 0&&(yt.__webglTexture=s.createTexture(),o.memory.textures++)}if(R.samples>0&&gt(R)===!1){H.__webglMultisampledFramebuffer=s.createFramebuffer(),H.__webglColorRenderbuffer=[],t.bindFramebuffer(s.FRAMEBUFFER,H.__webglMultisampledFramebuffer);for(let Te=0;Te<le.length;Te++){const we=le[Te];H.__webglColorRenderbuffer[Te]=s.createRenderbuffer(),s.bindRenderbuffer(s.RENDERBUFFER,H.__webglColorRenderbuffer[Te]);const yt=r.convert(we.format,we.colorSpace),fe=r.convert(we.type),Ne=S(we.internalFormat,yt,fe,we.colorSpace,R.isXRRenderTarget===!0),$e=mt(R);s.renderbufferStorageMultisample(s.RENDERBUFFER,$e,Ne,R.width,R.height),s.framebufferRenderbuffer(s.FRAMEBUFFER,s.COLOR_ATTACHMENT0+Te,s.RENDERBUFFER,H.__webglColorRenderbuffer[Te])}s.bindRenderbuffer(s.RENDERBUFFER,null),R.depthBuffer&&(H.__webglDepthRenderbuffer=s.createRenderbuffer(),ve(H.__webglDepthRenderbuffer,R,!0)),t.bindFramebuffer(s.FRAMEBUFFER,null)}}if(te){t.bindTexture(s.TEXTURE_CUBE_MAP,ae.__webglTexture),dt(s.TEXTURE_CUBE_MAP,y);for(let Te=0;Te<6;Te++)if(y.mipmaps&&y.mipmaps.length>0)for(let we=0;we<y.mipmaps.length;we++)Le(H.__webglFramebuffer[Te][we],R,y,s.COLOR_ATTACHMENT0,s.TEXTURE_CUBE_MAP_POSITIVE_X+Te,we);else Le(H.__webglFramebuffer[Te],R,y,s.COLOR_ATTACHMENT0,s.TEXTURE_CUBE_MAP_POSITIVE_X+Te,0);g(y)&&p(s.TEXTURE_CUBE_MAP),t.unbindTexture()}else if(Fe){for(let Te=0,we=le.length;Te<we;Te++){const yt=le[Te],fe=n.get(yt);t.bindTexture(s.TEXTURE_2D,fe.__webglTexture),dt(s.TEXTURE_2D,yt),Le(H.__webglFramebuffer,R,yt,s.COLOR_ATTACHMENT0+Te,s.TEXTURE_2D,0),g(yt)&&p(s.TEXTURE_2D)}t.unbindTexture()}else{let Te=s.TEXTURE_2D;if((R.isWebGL3DRenderTarget||R.isWebGLArrayRenderTarget)&&(Te=R.isWebGL3DRenderTarget?s.TEXTURE_3D:s.TEXTURE_2D_ARRAY),t.bindTexture(Te,ae.__webglTexture),dt(Te,y),y.mipmaps&&y.mipmaps.length>0)for(let we=0;we<y.mipmaps.length;we++)Le(H.__webglFramebuffer[we],R,y,s.COLOR_ATTACHMENT0,Te,we);else Le(H.__webglFramebuffer,R,y,s.COLOR_ATTACHMENT0,Te,0);g(y)&&p(Te),t.unbindTexture()}R.depthBuffer&&et(R)}function xt(R){const y=R.textures;for(let H=0,ae=y.length;H<ae;H++){const le=y[H];if(g(le)){const te=T(R),Fe=n.get(le).__webglTexture;t.bindTexture(te,Fe),p(te),t.unbindTexture()}}}const nn=[],B=[];function Ei(R){if(R.samples>0){if(gt(R)===!1){const y=R.textures,H=R.width,ae=R.height;let le=s.COLOR_BUFFER_BIT;const te=R.stencilBuffer?s.DEPTH_STENCIL_ATTACHMENT:s.DEPTH_ATTACHMENT,Fe=n.get(R),Te=y.length>1;if(Te)for(let we=0;we<y.length;we++)t.bindFramebuffer(s.FRAMEBUFFER,Fe.__webglMultisampledFramebuffer),s.framebufferRenderbuffer(s.FRAMEBUFFER,s.COLOR_ATTACHMENT0+we,s.RENDERBUFFER,null),t.bindFramebuffer(s.FRAMEBUFFER,Fe.__webglFramebuffer),s.framebufferTexture2D(s.DRAW_FRAMEBUFFER,s.COLOR_ATTACHMENT0+we,s.TEXTURE_2D,null,0);t.bindFramebuffer(s.READ_FRAMEBUFFER,Fe.__webglMultisampledFramebuffer),t.bindFramebuffer(s.DRAW_FRAMEBUFFER,Fe.__webglFramebuffer);for(let we=0;we<y.length;we++){if(R.resolveDepthBuffer&&(R.depthBuffer&&(le|=s.DEPTH_BUFFER_BIT),R.stencilBuffer&&R.resolveStencilBuffer&&(le|=s.STENCIL_BUFFER_BIT)),Te){s.framebufferRenderbuffer(s.READ_FRAMEBUFFER,s.COLOR_ATTACHMENT0,s.RENDERBUFFER,Fe.__webglColorRenderbuffer[we]);const yt=n.get(y[we]).__webglTexture;s.framebufferTexture2D(s.DRAW_FRAMEBUFFER,s.COLOR_ATTACHMENT0,s.TEXTURE_2D,yt,0)}s.blitFramebuffer(0,0,H,ae,0,0,H,ae,le,s.NEAREST),c===!0&&(nn.length=0,B.length=0,nn.push(s.COLOR_ATTACHMENT0+we),R.depthBuffer&&R.resolveDepthBuffer===!1&&(nn.push(te),B.push(te),s.invalidateFramebuffer(s.DRAW_FRAMEBUFFER,B)),s.invalidateFramebuffer(s.READ_FRAMEBUFFER,nn))}if(t.bindFramebuffer(s.READ_FRAMEBUFFER,null),t.bindFramebuffer(s.DRAW_FRAMEBUFFER,null),Te)for(let we=0;we<y.length;we++){t.bindFramebuffer(s.FRAMEBUFFER,Fe.__webglMultisampledFramebuffer),s.framebufferRenderbuffer(s.FRAMEBUFFER,s.COLOR_ATTACHMENT0+we,s.RENDERBUFFER,Fe.__webglColorRenderbuffer[we]);const yt=n.get(y[we]).__webglTexture;t.bindFramebuffer(s.FRAMEBUFFER,Fe.__webglFramebuffer),s.framebufferTexture2D(s.DRAW_FRAMEBUFFER,s.COLOR_ATTACHMENT0+we,s.TEXTURE_2D,yt,0)}t.bindFramebuffer(s.DRAW_FRAMEBUFFER,Fe.__webglMultisampledFramebuffer)}else if(R.depthBuffer&&R.resolveDepthBuffer===!1&&c){const y=R.stencilBuffer?s.DEPTH_STENCIL_ATTACHMENT:s.DEPTH_ATTACHMENT;s.invalidateFramebuffer(s.DRAW_FRAMEBUFFER,[y])}}}function mt(R){return Math.min(i.maxSamples,R.samples)}function gt(R){const y=n.get(R);return R.samples>0&&e.has("WEBGL_multisampled_render_to_texture")===!0&&y.__useRenderToTexture!==!1}function ze(R){const y=o.render.frame;u.get(R)!==y&&(u.set(R,y),R.update())}function Ot(R,y){const H=R.colorSpace,ae=R.format,le=R.type;return R.isCompressedTexture===!0||R.isVideoTexture===!0||H!==bi&&H!==Ti&&(rt.getTransfer(H)===Nt?(ae!==Nn||le!==Gn)&&console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture color space:",H)),y}function Be(R){return typeof HTMLImageElement<"u"&&R instanceof HTMLImageElement?(l.width=R.naturalWidth||R.width,l.height=R.naturalHeight||R.height):typeof VideoFrame<"u"&&R instanceof VideoFrame?(l.width=R.displayWidth,l.height=R.displayHeight):(l.width=R.width,l.height=R.height),l}this.allocateTextureUnit=$,this.resetTextureUnits=Z,this.setTexture2D=oe,this.setTexture2DArray=re,this.setTexture3D=ue,this.setTextureCube=Q,this.rebindTextures=ft,this.setupRenderTarget=qt,this.updateRenderTargetMipmap=xt,this.updateMultisampleRenderTarget=Ei,this.setupDepthRenderbuffer=et,this.setupFrameBufferTexture=Le,this.useMultisampledRTT=gt}function dN(s,e){function t(n,i=Ti){let r;const o=rt.getTransfer(i);if(n===Gn)return s.UNSIGNED_BYTE;if(n===rh)return s.UNSIGNED_SHORT_4_4_4_4;if(n===oh)return s.UNSIGNED_SHORT_5_5_5_1;if(n===ah)return s.UNSIGNED_INT_5_9_9_9_REV;if(n===lo)return s.BYTE;if(n===uo)return s.SHORT;if(n===Yi)return s.UNSIGNED_SHORT;if(n===Mn)return s.INT;if(n===Yt)return s.UNSIGNED_INT;if(n===rn)return s.FLOAT;if(n===zn)return s.HALF_FLOAT;if(n===Kf)return s.ALPHA;if(n===Tl)return s.RGB;if(n===Nn)return s.RGBA;if(n===Zf)return s.LUMINANCE;if(n===Qf)return s.LUMINANCE_ALPHA;if(n===hs)return s.DEPTH_COMPONENT;if(n===gs)return s.DEPTH_STENCIL;if(n===Sl)return s.RED;if(n===tc)return s.RED_INTEGER;if(n===So)return s.RG;if(n===nc)return s.RG_INTEGER;if(n===ic)return s.RGBA_INTEGER;if(n===ho||n===yr||n===vr||n===Tr)if(o===Nt)if(r=e.get("WEBGL_compressed_texture_s3tc_srgb"),r!==null){if(n===ho)return r.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(n===yr)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(n===vr)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(n===Tr)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else return null;else if(r=e.get("WEBGL_compressed_texture_s3tc"),r!==null){if(n===ho)return r.COMPRESSED_RGB_S3TC_DXT1_EXT;if(n===yr)return r.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(n===vr)return r.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(n===Tr)return r.COMPRESSED_RGBA_S3TC_DXT5_EXT}else return null;if(n===Yc||n===jc||n===Kc||n===Zc)if(r=e.get("WEBGL_compressed_texture_pvrtc"),r!==null){if(n===Yc)return r.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(n===jc)return r.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(n===Kc)return r.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(n===Zc)return r.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else return null;if(n===Qc||n===Pa||n===Da)if(r=e.get("WEBGL_compressed_texture_etc"),r!==null){if(n===Qc||n===Pa)return o===Nt?r.COMPRESSED_SRGB8_ETC2:r.COMPRESSED_RGB8_ETC2;if(n===Da)return o===Nt?r.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:r.COMPRESSED_RGBA8_ETC2_EAC}else return null;if(n===La||n===Ua||n===Ia||n===Fa||n===Ba||n===Oa||n===Va||n===Ga||n===za||n===ka||n===Ha||n===Wa||n===$a||n===Xa)if(r=e.get("WEBGL_compressed_texture_astc"),r!==null){if(n===La)return o===Nt?r.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:r.COMPRESSED_RGBA_ASTC_4x4_KHR;if(n===Ua)return o===Nt?r.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:r.COMPRESSED_RGBA_ASTC_5x4_KHR;if(n===Ia)return o===Nt?r.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:r.COMPRESSED_RGBA_ASTC_5x5_KHR;if(n===Fa)return o===Nt?r.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:r.COMPRESSED_RGBA_ASTC_6x5_KHR;if(n===Ba)return o===Nt?r.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:r.COMPRESSED_RGBA_ASTC_6x6_KHR;if(n===Oa)return o===Nt?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:r.COMPRESSED_RGBA_ASTC_8x5_KHR;if(n===Va)return o===Nt?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:r.COMPRESSED_RGBA_ASTC_8x6_KHR;if(n===Ga)return o===Nt?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:r.COMPRESSED_RGBA_ASTC_8x8_KHR;if(n===za)return o===Nt?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:r.COMPRESSED_RGBA_ASTC_10x5_KHR;if(n===ka)return o===Nt?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:r.COMPRESSED_RGBA_ASTC_10x6_KHR;if(n===Ha)return o===Nt?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:r.COMPRESSED_RGBA_ASTC_10x8_KHR;if(n===Wa)return o===Nt?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:r.COMPRESSED_RGBA_ASTC_10x10_KHR;if(n===$a)return o===Nt?r.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:r.COMPRESSED_RGBA_ASTC_12x10_KHR;if(n===Xa)return o===Nt?r.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:r.COMPRESSED_RGBA_ASTC_12x12_KHR}else return null;if(n===fo||n===rf||n===of)if(r=e.get("EXT_texture_compression_bptc"),r!==null){if(n===fo)return o===Nt?r.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:r.COMPRESSED_RGBA_BPTC_UNORM_EXT;if(n===rf)return r.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;if(n===of)return r.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT}else return null;if(n===Jf||n===Jc||n===el||n===tl)if(r=e.get("EXT_texture_compression_rgtc"),r!==null){if(n===fo)return r.COMPRESSED_RED_RGTC1_EXT;if(n===Jc)return r.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(n===el)return r.COMPRESSED_RED_GREEN_RGTC2_EXT;if(n===tl)return r.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}else return null;return n===ms?s.UNSIGNED_INT_24_8:s[n]!==void 0?s[n]:null}return{convert:t}}const fN={type:"move"};class xd{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return this._hand===null&&(this._hand=new ou,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return this._targetRay===null&&(this._targetRay=new ou,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new U,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new U),this._targetRay}getGripSpace(){return this._grip===null&&(this._grip=new ou,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new U,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new U),this._grip}dispatchEvent(e){return this._targetRay!==null&&this._targetRay.dispatchEvent(e),this._grip!==null&&this._grip.dispatchEvent(e),this._hand!==null&&this._hand.dispatchEvent(e),this}connect(e){if(e&&e.hand){const t=this._hand;if(t)for(const n of e.hand.values())this._getHandJoint(t,n)}return this.dispatchEvent({type:"connected",data:e}),this}disconnect(e){return this.dispatchEvent({type:"disconnected",data:e}),this._targetRay!==null&&(this._targetRay.visible=!1),this._grip!==null&&(this._grip.visible=!1),this._hand!==null&&(this._hand.visible=!1),this}update(e,t,n){let i=null,r=null,o=null;const a=this._targetRay,c=this._grip,l=this._hand;if(e&&t.session.visibilityState!=="visible-blurred"){if(l&&e.hand){o=!0;for(const _ of e.hand.values()){const g=t.getJointPose(_,n),p=this._getHandJoint(l,_);g!==null&&(p.matrix.fromArray(g.transform.matrix),p.matrix.decompose(p.position,p.rotation,p.scale),p.matrixWorldNeedsUpdate=!0,p.jointRadius=g.radius),p.visible=g!==null}const u=l.joints["index-finger-tip"],h=l.joints["thumb-tip"],d=u.position.distanceTo(h.position),f=.02,m=.005;l.inputState.pinching&&d>f+m?(l.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:e.handedness,target:this})):!l.inputState.pinching&&d<=f-m&&(l.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:e.handedness,target:this}))}else c!==null&&e.gripSpace&&(r=t.getPose(e.gripSpace,n),r!==null&&(c.matrix.fromArray(r.transform.matrix),c.matrix.decompose(c.position,c.rotation,c.scale),c.matrixWorldNeedsUpdate=!0,r.linearVelocity?(c.hasLinearVelocity=!0,c.linearVelocity.copy(r.linearVelocity)):c.hasLinearVelocity=!1,r.angularVelocity?(c.hasAngularVelocity=!0,c.angularVelocity.copy(r.angularVelocity)):c.hasAngularVelocity=!1));a!==null&&(i=t.getPose(e.targetRaySpace,n),i===null&&r!==null&&(i=r),i!==null&&(a.matrix.fromArray(i.transform.matrix),a.matrix.decompose(a.position,a.rotation,a.scale),a.matrixWorldNeedsUpdate=!0,i.linearVelocity?(a.hasLinearVelocity=!0,a.linearVelocity.copy(i.linearVelocity)):a.hasLinearVelocity=!1,i.angularVelocity?(a.hasAngularVelocity=!0,a.angularVelocity.copy(i.angularVelocity)):a.hasAngularVelocity=!1,this.dispatchEvent(fN)))}return a!==null&&(a.visible=i!==null),c!==null&&(c.visible=r!==null),l!==null&&(l.visible=o!==null),this}_getHandJoint(e,t){if(e.joints[t.jointName]===void 0){const n=new ou;n.matrixAutoUpdate=!1,n.visible=!1,e.joints[t.jointName]=n,e.add(n)}return e.joints[t.jointName]}}const pN=`
void main() {

	gl_Position = vec4( position, 1.0 );

}`,mN=`
uniform sampler2DArray depthColor;
uniform float depthWidth;
uniform float depthHeight;

void main() {

	vec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );

	if ( coord.x >= 1.0 ) {

		gl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;

	} else {

		gl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;

	}

}`;class gN{constructor(){this.texture=null,this.mesh=null,this.depthNear=0,this.depthFar=0}init(e,t,n){if(this.texture===null){const i=new En,r=e.properties.get(i);r.__webglTexture=t.texture,(t.depthNear!==n.depthNear||t.depthFar!==n.depthFar)&&(this.depthNear=t.depthNear,this.depthFar=t.depthFar),this.texture=i}}getMesh(e){if(this.texture!==null&&this.mesh===null){const t=e.cameras[0].viewport,n=new Rr({vertexShader:pN,fragmentShader:mN,uniforms:{depthColor:{value:this.texture},depthWidth:{value:t.z},depthHeight:{value:t.w}}});this.mesh=new On(new fh(20,20),n)}return this.mesh}reset(){this.texture=null,this.mesh=null}getDepthTexture(){return this.texture}}class _N extends Zs{constructor(e,t){super();const n=this;let i=null,r=1,o=null,a="local-floor",c=1,l=null,u=null,h=null,d=null,f=null,m=null;const _=new gN,g=t.getContextAttributes();let p=null,T=null;const S=[],v=[],P=new Ee;let N=null;const w=new Yn;w.viewport=new je;const F=new Yn;F.viewport=new je;const E=[w,F],M=new FM;let D=null,Z=null;this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(ie){let pe=S[ie];return pe===void 0&&(pe=new xd,S[ie]=pe),pe.getTargetRaySpace()},this.getControllerGrip=function(ie){let pe=S[ie];return pe===void 0&&(pe=new xd,S[ie]=pe),pe.getGripSpace()},this.getHand=function(ie){let pe=S[ie];return pe===void 0&&(pe=new xd,S[ie]=pe),pe.getHandSpace()};function $(ie){const pe=v.indexOf(ie.inputSource);if(pe===-1)return;const Le=S[pe];Le!==void 0&&(Le.update(ie.inputSource,ie.frame,l||o),Le.dispatchEvent({type:ie.type,data:ie.inputSource}))}function ne(){i.removeEventListener("select",$),i.removeEventListener("selectstart",$),i.removeEventListener("selectend",$),i.removeEventListener("squeeze",$),i.removeEventListener("squeezestart",$),i.removeEventListener("squeezeend",$),i.removeEventListener("end",ne),i.removeEventListener("inputsourceschange",oe);for(let ie=0;ie<S.length;ie++){const pe=v[ie];pe!==null&&(v[ie]=null,S[ie].disconnect(pe))}D=null,Z=null,_.reset(),e.setRenderTarget(p),f=null,d=null,h=null,i=null,T=null,Ut.stop(),n.isPresenting=!1,e.setPixelRatio(N),e.setSize(P.width,P.height,!1),n.dispatchEvent({type:"sessionend"})}this.setFramebufferScaleFactor=function(ie){r=ie,n.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(ie){a=ie,n.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return l||o},this.setReferenceSpace=function(ie){l=ie},this.getBaseLayer=function(){return d!==null?d:f},this.getBinding=function(){return h},this.getFrame=function(){return m},this.getSession=function(){return i},this.setSession=async function(ie){if(i=ie,i!==null){if(p=e.getRenderTarget(),i.addEventListener("select",$),i.addEventListener("selectstart",$),i.addEventListener("selectend",$),i.addEventListener("squeeze",$),i.addEventListener("squeezestart",$),i.addEventListener("squeezeend",$),i.addEventListener("end",ne),i.addEventListener("inputsourceschange",oe),g.xrCompatible!==!0&&await t.makeXRCompatible(),N=e.getPixelRatio(),e.getSize(P),i.enabledFeatures!==void 0&&i.enabledFeatures.includes("layers")){let Le=null,ve=null,Xe=null;g.depth&&(Xe=g.stencil?t.DEPTH24_STENCIL8:t.DEPTH_COMPONENT24,Le=g.stencil?gs:hs,ve=g.stencil?ms:Yt);const et={colorFormat:t.RGBA8,depthFormat:Xe,scaleFactor:r};h=new XRWebGLBinding(i,t),d=h.createProjectionLayer(et),i.updateRenderState({layers:[d]}),e.setPixelRatio(1),e.setSize(d.textureWidth,d.textureHeight,!1),T=new bo(d.textureWidth,d.textureHeight,{format:Nn,type:Gn,depthTexture:new Qs(d.textureWidth,d.textureHeight,ve,void 0,void 0,void 0,void 0,void 0,void 0,Le),stencilBuffer:g.stencil,colorSpace:e.outputColorSpace,samples:g.antialias?4:0,resolveDepthBuffer:d.ignoreDepthValues===!1})}else{const Le={antialias:g.antialias,alpha:!0,depth:g.depth,stencil:g.stencil,framebufferScaleFactor:r};f=new XRWebGLLayer(i,t,Le),i.updateRenderState({baseLayer:f}),e.setPixelRatio(1),e.setSize(f.framebufferWidth,f.framebufferHeight,!1),T=new bo(f.framebufferWidth,f.framebufferHeight,{format:Nn,type:Gn,colorSpace:e.outputColorSpace,stencilBuffer:g.stencil})}T.isXRRenderTarget=!0,this.setFoveation(c),l=null,o=await i.requestReferenceSpace(a),Ut.setContext(i),Ut.start(),n.isPresenting=!0,n.dispatchEvent({type:"sessionstart"})}},this.getEnvironmentBlendMode=function(){if(i!==null)return i.environmentBlendMode},this.getDepthTexture=function(){return _.getDepthTexture()};function oe(ie){for(let pe=0;pe<ie.removed.length;pe++){const Le=ie.removed[pe],ve=v.indexOf(Le);ve>=0&&(v[ve]=null,S[ve].disconnect(Le))}for(let pe=0;pe<ie.added.length;pe++){const Le=ie.added[pe];let ve=v.indexOf(Le);if(ve===-1){for(let et=0;et<S.length;et++)if(et>=v.length){v.push(Le),ve=et;break}else if(v[et]===null){v[et]=Le,ve=et;break}if(ve===-1)break}const Xe=S[ve];Xe&&Xe.connect(Le)}}const re=new U,ue=new U;function Q(ie,pe,Le){re.setFromMatrixPosition(pe.matrixWorld),ue.setFromMatrixPosition(Le.matrixWorld);const ve=re.distanceTo(ue),Xe=pe.projectionMatrix.elements,et=Le.projectionMatrix.elements,ft=Xe[14]/(Xe[10]-1),qt=Xe[14]/(Xe[10]+1),xt=(Xe[9]+1)/Xe[5],nn=(Xe[9]-1)/Xe[5],B=(Xe[8]-1)/Xe[0],Ei=(et[8]+1)/et[0],mt=ft*B,gt=ft*Ei,ze=ve/(-B+Ei),Ot=ze*-B;if(pe.matrixWorld.decompose(ie.position,ie.quaternion,ie.scale),ie.translateX(Ot),ie.translateZ(ze),ie.matrixWorld.compose(ie.position,ie.quaternion,ie.scale),ie.matrixWorldInverse.copy(ie.matrixWorld).invert(),Xe[10]===-1)ie.projectionMatrix.copy(pe.projectionMatrix),ie.projectionMatrixInverse.copy(pe.projectionMatrixInverse);else{const Be=ft+ze,R=qt+ze,y=mt-Ot,H=gt+(ve-Ot),ae=xt*qt/R*Be,le=nn*qt/R*Be;ie.projectionMatrix.makePerspective(y,H,ae,le,Be,R),ie.projectionMatrixInverse.copy(ie.projectionMatrix).invert()}}function ye(ie,pe){pe===null?ie.matrixWorld.copy(ie.matrix):ie.matrixWorld.multiplyMatrices(pe.matrixWorld,ie.matrix),ie.matrixWorldInverse.copy(ie.matrixWorld).invert()}this.updateCamera=function(ie){if(i===null)return;let pe=ie.near,Le=ie.far;_.texture!==null&&(_.depthNear>0&&(pe=_.depthNear),_.depthFar>0&&(Le=_.depthFar)),M.near=F.near=w.near=pe,M.far=F.far=w.far=Le,(D!==M.near||Z!==M.far)&&(i.updateRenderState({depthNear:M.near,depthFar:M.far}),D=M.near,Z=M.far),w.layers.mask=ie.layers.mask|2,F.layers.mask=ie.layers.mask|4,M.layers.mask=w.layers.mask|F.layers.mask;const ve=ie.parent,Xe=M.cameras;ye(M,ve);for(let et=0;et<Xe.length;et++)ye(Xe[et],ve);Xe.length===2?Q(M,w,F):M.projectionMatrix.copy(w.projectionMatrix),Re(ie,M,ve)};function Re(ie,pe,Le){Le===null?ie.matrix.copy(pe.matrixWorld):(ie.matrix.copy(Le.matrixWorld),ie.matrix.invert(),ie.matrix.multiply(pe.matrixWorld)),ie.matrix.decompose(ie.position,ie.quaternion,ie.scale),ie.updateMatrixWorld(!0),ie.projectionMatrix.copy(pe.projectionMatrix),ie.projectionMatrixInverse.copy(pe.projectionMatrixInverse),ie.isPerspectiveCamera&&(ie.fov=qa*2*Math.atan(1/ie.projectionMatrix.elements[5]),ie.zoom=1)}this.getCamera=function(){return M},this.getFoveation=function(){if(!(d===null&&f===null))return c},this.setFoveation=function(ie){c=ie,d!==null&&(d.fixedFoveation=ie),f!==null&&f.fixedFoveation!==void 0&&(f.fixedFoveation=ie)},this.hasDepthSensing=function(){return _.texture!==null},this.getDepthSensingMesh=function(){return _.getMesh(M)};let Ge=null;function dt(ie,pe){if(u=pe.getViewerPose(l||o),m=pe,u!==null){const Le=u.views;f!==null&&(e.setRenderTargetFramebuffer(T,f.framebuffer),e.setRenderTarget(T));let ve=!1;Le.length!==M.cameras.length&&(M.cameras.length=0,ve=!0);for(let et=0;et<Le.length;et++){const ft=Le[et];let qt=null;if(f!==null)qt=f.getViewport(ft);else{const nn=h.getViewSubImage(d,ft);qt=nn.viewport,et===0&&(e.setRenderTargetTextures(T,nn.colorTexture,d.ignoreDepthValues?void 0:nn.depthStencilTexture),e.setRenderTarget(T))}let xt=E[et];xt===void 0&&(xt=new Yn,xt.layers.enable(et),xt.viewport=new je,E[et]=xt),xt.matrix.fromArray(ft.transform.matrix),xt.matrix.decompose(xt.position,xt.quaternion,xt.scale),xt.projectionMatrix.fromArray(ft.projectionMatrix),xt.projectionMatrixInverse.copy(xt.projectionMatrix).invert(),xt.viewport.set(qt.x,qt.y,qt.width,qt.height),et===0&&(M.matrix.copy(xt.matrix),M.matrix.decompose(M.position,M.quaternion,M.scale)),ve===!0&&M.cameras.push(xt)}const Xe=i.enabledFeatures;if(Xe&&Xe.includes("depth-sensing")){const et=h.getDepthInformation(Le[0]);et&&et.isValid&&et.texture&&_.init(e,et,i.renderState)}}for(let Le=0;Le<S.length;Le++){const ve=v[Le],Xe=S[Le];ve!==null&&Xe!==void 0&&Xe.update(ve,pe,l||o)}Ge&&Ge(ie,pe),pe.detectedPlanes&&n.dispatchEvent({type:"planesdetected",data:pe}),m=null}const Ut=new Hx;Ut.setAnimationLoop(dt),this.setAnimationLoop=function(ie){Ge=ie},this.dispose=function(){}}}const zr=new Mi,xN=new ut;function yN(s,e){function t(g,p){g.matrixAutoUpdate===!0&&g.updateMatrix(),p.value.copy(g.matrix)}function n(g,p){p.color.getRGB(g.fogColor.value,Ux(s)),p.isFog?(g.fogNear.value=p.near,g.fogFar.value=p.far):p.isFogExp2&&(g.fogDensity.value=p.density)}function i(g,p,T,S,v){p.isMeshBasicMaterial||p.isMeshLambertMaterial?r(g,p):p.isMeshToonMaterial?(r(g,p),h(g,p)):p.isMeshPhongMaterial?(r(g,p),u(g,p)):p.isMeshStandardMaterial?(r(g,p),d(g,p),p.isMeshPhysicalMaterial&&f(g,p,v)):p.isMeshMatcapMaterial?(r(g,p),m(g,p)):p.isMeshDepthMaterial?r(g,p):p.isMeshDistanceMaterial?(r(g,p),_(g,p)):p.isMeshNormalMaterial?r(g,p):p.isLineBasicMaterial?(o(g,p),p.isLineDashedMaterial&&a(g,p)):p.isPointsMaterial?c(g,p,T,S):p.isSpriteMaterial?l(g,p):p.isShadowMaterial?(g.color.value.copy(p.color),g.opacity.value=p.opacity):p.isShaderMaterial&&(p.uniformsNeedUpdate=!1)}function r(g,p){g.opacity.value=p.opacity,p.color&&g.diffuse.value.copy(p.color),p.emissive&&g.emissive.value.copy(p.emissive).multiplyScalar(p.emissiveIntensity),p.map&&(g.map.value=p.map,t(p.map,g.mapTransform)),p.alphaMap&&(g.alphaMap.value=p.alphaMap,t(p.alphaMap,g.alphaMapTransform)),p.bumpMap&&(g.bumpMap.value=p.bumpMap,t(p.bumpMap,g.bumpMapTransform),g.bumpScale.value=p.bumpScale,p.side===Wt&&(g.bumpScale.value*=-1)),p.normalMap&&(g.normalMap.value=p.normalMap,t(p.normalMap,g.normalMapTransform),g.normalScale.value.copy(p.normalScale),p.side===Wt&&g.normalScale.value.negate()),p.displacementMap&&(g.displacementMap.value=p.displacementMap,t(p.displacementMap,g.displacementMapTransform),g.displacementScale.value=p.displacementScale,g.displacementBias.value=p.displacementBias),p.emissiveMap&&(g.emissiveMap.value=p.emissiveMap,t(p.emissiveMap,g.emissiveMapTransform)),p.specularMap&&(g.specularMap.value=p.specularMap,t(p.specularMap,g.specularMapTransform)),p.alphaTest>0&&(g.alphaTest.value=p.alphaTest);const T=e.get(p),S=T.envMap,v=T.envMapRotation;S&&(g.envMap.value=S,zr.copy(v),zr.x*=-1,zr.y*=-1,zr.z*=-1,S.isCubeTexture&&S.isRenderTargetTexture===!1&&(zr.y*=-1,zr.z*=-1),g.envMapRotation.value.setFromMatrix4(xN.makeRotationFromEuler(zr)),g.flipEnvMap.value=S.isCubeTexture&&S.isRenderTargetTexture===!1?-1:1,g.reflectivity.value=p.reflectivity,g.ior.value=p.ior,g.refractionRatio.value=p.refractionRatio),p.lightMap&&(g.lightMap.value=p.lightMap,g.lightMapIntensity.value=p.lightMapIntensity,t(p.lightMap,g.lightMapTransform)),p.aoMap&&(g.aoMap.value=p.aoMap,g.aoMapIntensity.value=p.aoMapIntensity,t(p.aoMap,g.aoMapTransform))}function o(g,p){g.diffuse.value.copy(p.color),g.opacity.value=p.opacity,p.map&&(g.map.value=p.map,t(p.map,g.mapTransform))}function a(g,p){g.dashSize.value=p.dashSize,g.totalSize.value=p.dashSize+p.gapSize,g.scale.value=p.scale}function c(g,p,T,S){g.diffuse.value.copy(p.color),g.opacity.value=p.opacity,g.size.value=p.size*T,g.scale.value=S*.5,p.map&&(g.map.value=p.map,t(p.map,g.uvTransform)),p.alphaMap&&(g.alphaMap.value=p.alphaMap,t(p.alphaMap,g.alphaMapTransform)),p.alphaTest>0&&(g.alphaTest.value=p.alphaTest)}function l(g,p){g.diffuse.value.copy(p.color),g.opacity.value=p.opacity,g.rotation.value=p.rotation,p.map&&(g.map.value=p.map,t(p.map,g.mapTransform)),p.alphaMap&&(g.alphaMap.value=p.alphaMap,t(p.alphaMap,g.alphaMapTransform)),p.alphaTest>0&&(g.alphaTest.value=p.alphaTest)}function u(g,p){g.specular.value.copy(p.specular),g.shininess.value=Math.max(p.shininess,1e-4)}function h(g,p){p.gradientMap&&(g.gradientMap.value=p.gradientMap)}function d(g,p){g.metalness.value=p.metalness,p.metalnessMap&&(g.metalnessMap.value=p.metalnessMap,t(p.metalnessMap,g.metalnessMapTransform)),g.roughness.value=p.roughness,p.roughnessMap&&(g.roughnessMap.value=p.roughnessMap,t(p.roughnessMap,g.roughnessMapTransform)),p.envMap&&(g.envMapIntensity.value=p.envMapIntensity)}function f(g,p,T){g.ior.value=p.ior,p.sheen>0&&(g.sheenColor.value.copy(p.sheenColor).multiplyScalar(p.sheen),g.sheenRoughness.value=p.sheenRoughness,p.sheenColorMap&&(g.sheenColorMap.value=p.sheenColorMap,t(p.sheenColorMap,g.sheenColorMapTransform)),p.sheenRoughnessMap&&(g.sheenRoughnessMap.value=p.sheenRoughnessMap,t(p.sheenRoughnessMap,g.sheenRoughnessMapTransform))),p.clearcoat>0&&(g.clearcoat.value=p.clearcoat,g.clearcoatRoughness.value=p.clearcoatRoughness,p.clearcoatMap&&(g.clearcoatMap.value=p.clearcoatMap,t(p.clearcoatMap,g.clearcoatMapTransform)),p.clearcoatRoughnessMap&&(g.clearcoatRoughnessMap.value=p.clearcoatRoughnessMap,t(p.clearcoatRoughnessMap,g.clearcoatRoughnessMapTransform)),p.clearcoatNormalMap&&(g.clearcoatNormalMap.value=p.clearcoatNormalMap,t(p.clearcoatNormalMap,g.clearcoatNormalMapTransform),g.clearcoatNormalScale.value.copy(p.clearcoatNormalScale),p.side===Wt&&g.clearcoatNormalScale.value.negate())),p.dispersion>0&&(g.dispersion.value=p.dispersion),p.iridescence>0&&(g.iridescence.value=p.iridescence,g.iridescenceIOR.value=p.iridescenceIOR,g.iridescenceThicknessMinimum.value=p.iridescenceThicknessRange[0],g.iridescenceThicknessMaximum.value=p.iridescenceThicknessRange[1],p.iridescenceMap&&(g.iridescenceMap.value=p.iridescenceMap,t(p.iridescenceMap,g.iridescenceMapTransform)),p.iridescenceThicknessMap&&(g.iridescenceThicknessMap.value=p.iridescenceThicknessMap,t(p.iridescenceThicknessMap,g.iridescenceThicknessMapTransform))),p.transmission>0&&(g.transmission.value=p.transmission,g.transmissionSamplerMap.value=T.texture,g.transmissionSamplerSize.value.set(T.width,T.height),p.transmissionMap&&(g.transmissionMap.value=p.transmissionMap,t(p.transmissionMap,g.transmissionMapTransform)),g.thickness.value=p.thickness,p.thicknessMap&&(g.thicknessMap.value=p.thicknessMap,t(p.thicknessMap,g.thicknessMapTransform)),g.attenuationDistance.value=p.attenuationDistance,g.attenuationColor.value.copy(p.attenuationColor)),p.anisotropy>0&&(g.anisotropyVector.value.set(p.anisotropy*Math.cos(p.anisotropyRotation),p.anisotropy*Math.sin(p.anisotropyRotation)),p.anisotropyMap&&(g.anisotropyMap.value=p.anisotropyMap,t(p.anisotropyMap,g.anisotropyMapTransform))),g.specularIntensity.value=p.specularIntensity,g.specularColor.value.copy(p.specularColor),p.specularColorMap&&(g.specularColorMap.value=p.specularColorMap,t(p.specularColorMap,g.specularColorMapTransform)),p.specularIntensityMap&&(g.specularIntensityMap.value=p.specularIntensityMap,t(p.specularIntensityMap,g.specularIntensityMapTransform))}function m(g,p){p.matcap&&(g.matcap.value=p.matcap)}function _(g,p){const T=e.get(p).light;g.referencePosition.value.setFromMatrixPosition(T.matrixWorld),g.nearDistance.value=T.shadow.camera.near,g.farDistance.value=T.shadow.camera.far}return{refreshFogUniforms:n,refreshMaterialUniforms:i}}function vN(s,e,t,n){let i={},r={},o=[];const a=s.getParameter(s.MAX_UNIFORM_BUFFER_BINDINGS);function c(T,S){const v=S.program;n.uniformBlockBinding(T,v)}function l(T,S){let v=i[T.id];v===void 0&&(m(T),v=u(T),i[T.id]=v,T.addEventListener("dispose",g));const P=S.program;n.updateUBOMapping(T,P);const N=e.render.frame;r[T.id]!==N&&(d(T),r[T.id]=N)}function u(T){const S=h();T.__bindingPointIndex=S;const v=s.createBuffer(),P=T.__size,N=T.usage;return s.bindBuffer(s.UNIFORM_BUFFER,v),s.bufferData(s.UNIFORM_BUFFER,P,N),s.bindBuffer(s.UNIFORM_BUFFER,null),s.bindBufferBase(s.UNIFORM_BUFFER,S,v),v}function h(){for(let T=0;T<a;T++)if(o.indexOf(T)===-1)return o.push(T),T;return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."),0}function d(T){const S=i[T.id],v=T.uniforms,P=T.__cache;s.bindBuffer(s.UNIFORM_BUFFER,S);for(let N=0,w=v.length;N<w;N++){const F=Array.isArray(v[N])?v[N]:[v[N]];for(let E=0,M=F.length;E<M;E++){const D=F[E];if(f(D,N,E,P)===!0){const Z=D.__offset,$=Array.isArray(D.value)?D.value:[D.value];let ne=0;for(let oe=0;oe<$.length;oe++){const re=$[oe],ue=_(re);typeof re=="number"||typeof re=="boolean"?(D.__data[0]=re,s.bufferSubData(s.UNIFORM_BUFFER,Z+ne,D.__data)):re.isMatrix3?(D.__data[0]=re.elements[0],D.__data[1]=re.elements[1],D.__data[2]=re.elements[2],D.__data[3]=0,D.__data[4]=re.elements[3],D.__data[5]=re.elements[4],D.__data[6]=re.elements[5],D.__data[7]=0,D.__data[8]=re.elements[6],D.__data[9]=re.elements[7],D.__data[10]=re.elements[8],D.__data[11]=0):(re.toArray(D.__data,ne),ne+=ue.storage/Float32Array.BYTES_PER_ELEMENT)}s.bufferSubData(s.UNIFORM_BUFFER,Z,D.__data)}}}s.bindBuffer(s.UNIFORM_BUFFER,null)}function f(T,S,v,P){const N=T.value,w=S+"_"+v;if(P[w]===void 0)return typeof N=="number"||typeof N=="boolean"?P[w]=N:P[w]=N.clone(),!0;{const F=P[w];if(typeof N=="number"||typeof N=="boolean"){if(F!==N)return P[w]=N,!0}else if(F.equals(N)===!1)return F.copy(N),!0}return!1}function m(T){const S=T.uniforms;let v=0;const P=16;for(let w=0,F=S.length;w<F;w++){const E=Array.isArray(S[w])?S[w]:[S[w]];for(let M=0,D=E.length;M<D;M++){const Z=E[M],$=Array.isArray(Z.value)?Z.value:[Z.value];for(let ne=0,oe=$.length;ne<oe;ne++){const re=$[ne],ue=_(re),Q=v%P,ye=Q%ue.boundary,Re=Q+ye;v+=ye,Re!==0&&P-Re<ue.storage&&(v+=P-Re),Z.__data=new Float32Array(ue.storage/Float32Array.BYTES_PER_ELEMENT),Z.__offset=v,v+=ue.storage}}}const N=v%P;return N>0&&(v+=P-N),T.__size=v,T.__cache={},this}function _(T){const S={boundary:0,storage:0};return typeof T=="number"||typeof T=="boolean"?(S.boundary=4,S.storage=4):T.isVector2?(S.boundary=8,S.storage=8):T.isVector3||T.isColor?(S.boundary=16,S.storage=12):T.isVector4?(S.boundary=16,S.storage=16):T.isMatrix3?(S.boundary=48,S.storage=48):T.isMatrix4?(S.boundary=64,S.storage=64):T.isTexture?console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."):console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",T),S}function g(T){const S=T.target;S.removeEventListener("dispose",g);const v=o.indexOf(S.__bindingPointIndex);o.splice(v,1),s.deleteBuffer(i[S.id]),delete i[S.id],delete r[S.id]}function p(){for(const T in i)s.deleteBuffer(i[T]);o=[],i={},r={}}return{bind:c,update:l,dispose:p}}class Hg{constructor(e={}){const{canvas:t=wx(),context:n=null,depth:i=!0,stencil:r=!1,alpha:o=!1,antialias:a=!1,premultipliedAlpha:c=!0,preserveDrawingBuffer:l=!1,powerPreference:u="default",failIfMajorPerformanceCaveat:h=!1,reverseDepthBuffer:d=!1}=e;this.isWebGLRenderer=!0;let f;if(n!==null){if(typeof WebGLRenderingContext<"u"&&n instanceof WebGLRenderingContext)throw new Error("THREE.WebGLRenderer: WebGL 1 is not supported since r163.");f=n.getContextAttributes().alpha}else f=o;const m=new Uint32Array(4),_=new Int32Array(4);let g=null,p=null;const T=[],S=[];this.domElement=t,this.debug={checkShaderErrors:!0,onShaderError:null},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this._outputColorSpace=Oe,this.toneMapping=ri,this.toneMappingExposure=1;const v=this;let P=!1,N=0,w=0,F=null,E=-1,M=null;const D=new je,Z=new je;let $=null;const ne=new De(0);let oe=0,re=t.width,ue=t.height,Q=1,ye=null,Re=null;const Ge=new je(0,0,re,ue),dt=new je(0,0,re,ue);let Ut=!1;const ie=new dh;let pe=!1,Le=!1;this.transmissionResolutionScale=1;const ve=new ut,Xe=new ut,et=new U,ft=new je,qt={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};let xt=!1;function nn(){return F===null?Q:1}let B=n;function Ei(b,G){return t.getContext(b,G)}try{const b={alpha:!0,depth:i,stencil:r,antialias:a,premultipliedAlpha:c,preserveDrawingBuffer:l,powerPreference:u,failIfMajorPerformanceCaveat:h};if("setAttribute"in t&&t.setAttribute("data-engine",`three.js r${yl}`),t.addEventListener("webglcontextlost",ce,!1),t.addEventListener("webglcontextrestored",be,!1),t.addEventListener("webglcontextcreationerror",Se,!1),B===null){const G="webgl2";if(B=Ei(G,b),B===null)throw Ei(G)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}}catch(b){throw console.error("THREE.WebGLRenderer: "+b.message),b}let mt,gt,ze,Ot,Be,R,y,H,ae,le,te,Fe,Te,we,yt,fe,Ne,$e,Ze,Ce,_t,at,Bt,O;function _e(){mt=new CR(B),mt.init(),at=new dN(B,mt),gt=new MR(B,mt,e,at),ze=new uN(B,mt),gt.reverseDepthBuffer&&d&&ze.buffers.depth.setReversed(!0),Ot=new LR(B),Be=new Zw,R=new hN(B,mt,ze,Be,gt,at,Ot),y=new AR(v),H=new NR(v),ae=new GM(B),Bt=new SR(B,ae),le=new PR(B,ae,Ot,Bt),te=new IR(B,le,ae,Ot),Ze=new UR(B,gt,R),fe=new ER(Be),Fe=new Kw(v,y,H,mt,gt,Bt,fe),Te=new yN(v,Be),we=new Jw,yt=new rN(mt),$e=new TR(v,y,H,ze,te,f,c),Ne=new cN(v,te,gt),O=new vN(B,Ot,gt,ze),Ce=new bR(B,mt,Ot),_t=new DR(B,mt,Ot),Ot.programs=Fe.programs,v.capabilities=gt,v.extensions=mt,v.properties=Be,v.renderLists=we,v.shadowMap=Ne,v.state=ze,v.info=Ot}_e();const K=new _N(v,B);this.xr=K,this.getContext=function(){return B},this.getContextAttributes=function(){return B.getContextAttributes()},this.forceContextLoss=function(){const b=mt.get("WEBGL_lose_context");b&&b.loseContext()},this.forceContextRestore=function(){const b=mt.get("WEBGL_lose_context");b&&b.restoreContext()},this.getPixelRatio=function(){return Q},this.setPixelRatio=function(b){b!==void 0&&(Q=b,this.setSize(re,ue,!1))},this.getSize=function(b){return b.set(re,ue)},this.setSize=function(b,G,W=!0){if(K.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}re=b,ue=G,t.width=Math.floor(b*Q),t.height=Math.floor(G*Q),W===!0&&(t.style.width=b+"px",t.style.height=G+"px"),this.setViewport(0,0,b,G)},this.getDrawingBufferSize=function(b){return b.set(re*Q,ue*Q).floor()},this.setDrawingBufferSize=function(b,G,W){re=b,ue=G,Q=W,t.width=Math.floor(b*W),t.height=Math.floor(G*W),this.setViewport(0,0,b,G)},this.getCurrentViewport=function(b){return b.copy(D)},this.getViewport=function(b){return b.copy(Ge)},this.setViewport=function(b,G,W,X){b.isVector4?Ge.set(b.x,b.y,b.z,b.w):Ge.set(b,G,W,X),ze.viewport(D.copy(Ge).multiplyScalar(Q).round())},this.getScissor=function(b){return b.copy(dt)},this.setScissor=function(b,G,W,X){b.isVector4?dt.set(b.x,b.y,b.z,b.w):dt.set(b,G,W,X),ze.scissor(Z.copy(dt).multiplyScalar(Q).round())},this.getScissorTest=function(){return Ut},this.setScissorTest=function(b){ze.setScissorTest(Ut=b)},this.setOpaqueSort=function(b){ye=b},this.setTransparentSort=function(b){Re=b},this.getClearColor=function(b){return b.copy($e.getClearColor())},this.setClearColor=function(){$e.setClearColor.apply($e,arguments)},this.getClearAlpha=function(){return $e.getClearAlpha()},this.setClearAlpha=function(){$e.setClearAlpha.apply($e,arguments)},this.clear=function(b=!0,G=!0,W=!0){let X=0;if(b){let k=!1;if(F!==null){const he=F.texture.format;k=he===ic||he===nc||he===tc}if(k){const he=F.texture.type,xe=he===Gn||he===Yt||he===Yi||he===ms||he===rh||he===oh,Ae=$e.getClearColor(),Pe=$e.getClearAlpha(),Qe=Ae.r,tt=Ae.g,He=Ae.b;xe?(m[0]=Qe,m[1]=tt,m[2]=He,m[3]=Pe,B.clearBufferuiv(B.COLOR,0,m)):(_[0]=Qe,_[1]=tt,_[2]=He,_[3]=Pe,B.clearBufferiv(B.COLOR,0,_))}else X|=B.COLOR_BUFFER_BIT}G&&(X|=B.DEPTH_BUFFER_BIT),W&&(X|=B.STENCIL_BUFFER_BIT,this.state.buffers.stencil.setMask(4294967295)),B.clear(X)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){t.removeEventListener("webglcontextlost",ce,!1),t.removeEventListener("webglcontextrestored",be,!1),t.removeEventListener("webglcontextcreationerror",Se,!1),$e.dispose(),we.dispose(),yt.dispose(),Be.dispose(),y.dispose(),H.dispose(),te.dispose(),Bt.dispose(),O.dispose(),Fe.dispose(),K.dispose(),K.removeEventListener("sessionstart",Um),K.removeEventListener("sessionend",Im),Ur.stop()};function ce(b){b.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),P=!0}function be(){console.log("THREE.WebGLRenderer: Context Restored."),P=!1;const b=Ot.autoReset,G=Ne.enabled,W=Ne.autoUpdate,X=Ne.needsUpdate,k=Ne.type;_e(),Ot.autoReset=b,Ne.enabled=G,Ne.autoUpdate=W,Ne.needsUpdate=X,Ne.type=k}function Se(b){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",b.statusMessage)}function ot(b){const G=b.target;G.removeEventListener("dispose",ot),jt(G)}function jt(b){Ln(b),Be.remove(b)}function Ln(b){const G=Be.get(b).programs;G!==void 0&&(G.forEach(function(W){Fe.releaseProgram(W)}),b.isShaderMaterial&&Fe.releaseShaderCache(b))}this.renderBufferDirect=function(b,G,W,X,k,he){G===null&&(G=qt);const xe=k.isMesh&&k.matrixWorld.determinant()<0,Ae=RS(b,G,W,X,k);ze.setMaterial(X,xe);let Pe=W.index,Qe=1;if(X.wireframe===!0){if(Pe=le.getWireframeAttribute(W),Pe===void 0)return;Qe=2}const tt=W.drawRange,He=W.attributes.position;let vt=tt.start*Qe,Rt=(tt.start+tt.count)*Qe;he!==null&&(vt=Math.max(vt,he.start*Qe),Rt=Math.min(Rt,(he.start+he.count)*Qe)),Pe!==null?(vt=Math.max(vt,0),Rt=Math.min(Rt,Pe.count)):He!=null&&(vt=Math.max(vt,0),Rt=Math.min(Rt,He.count));const un=Rt-vt;if(un<0||un===1/0)return;Bt.setup(k,X,Ae,W,Pe);let Kt,Tt=Ce;if(Pe!==null&&(Kt=ae.get(Pe),Tt=_t,Tt.setIndex(Kt)),k.isMesh)X.wireframe===!0?(ze.setLineWidth(X.wireframeLinewidth*nn()),Tt.setMode(B.LINES)):Tt.setMode(B.TRIANGLES);else if(k.isLine){let We=X.linewidth;We===void 0&&(We=1),ze.setLineWidth(We*nn()),k.isLineSegments?Tt.setMode(B.LINES):k.isLineLoop?Tt.setMode(B.LINE_LOOP):Tt.setMode(B.LINE_STRIP)}else k.isPoints?Tt.setMode(B.POINTS):k.isSprite&&Tt.setMode(B.TRIANGLES);if(k.isBatchedMesh)if(k._multiDrawInstances!==null)Tt.renderMultiDrawInstances(k._multiDrawStarts,k._multiDrawCounts,k._multiDrawCount,k._multiDrawInstances);else if(mt.get("WEBGL_multi_draw"))Tt.renderMultiDraw(k._multiDrawStarts,k._multiDrawCounts,k._multiDrawCount);else{const We=k._multiDrawStarts,Rn=k._multiDrawCounts,wt=k._multiDrawCount,Gi=Pe?ae.get(Pe).bytesPerElement:1,Do=Be.get(X).currentProgram.getUniforms();for(let hi=0;hi<wt;hi++)Do.setValue(B,"_gl_DrawID",hi),Tt.render(We[hi]/Gi,Rn[hi])}else if(k.isInstancedMesh)Tt.renderInstances(vt,un,k.count);else if(W.isInstancedBufferGeometry){const We=W._maxInstanceCount!==void 0?W._maxInstanceCount:1/0,Rn=Math.min(W.instanceCount,We);Tt.renderInstances(vt,un,Rn)}else Tt.render(vt,un)};function Dt(b,G,W){b.transparent===!0&&b.side===Bn&&b.forceSinglePass===!1?(b.side=Wt,b.needsUpdate=!0,Gl(b,G,W),b.side=Ki,b.needsUpdate=!0,Gl(b,G,W),b.side=Bn):Gl(b,G,W)}this.compile=function(b,G,W=null){W===null&&(W=b),p=yt.get(W),p.init(G),S.push(p),W.traverseVisible(function(k){k.isLight&&k.layers.test(G.layers)&&(p.pushLight(k),k.castShadow&&p.pushShadow(k))}),b!==W&&b.traverseVisible(function(k){k.isLight&&k.layers.test(G.layers)&&(p.pushLight(k),k.castShadow&&p.pushShadow(k))}),p.setupLights();const X=new Set;return b.traverse(function(k){if(!(k.isMesh||k.isPoints||k.isLine||k.isSprite))return;const he=k.material;if(he)if(Array.isArray(he))for(let xe=0;xe<he.length;xe++){const Ae=he[xe];Dt(Ae,W,k),X.add(Ae)}else Dt(he,W,k),X.add(he)}),S.pop(),p=null,X},this.compileAsync=function(b,G,W=null){const X=this.compile(b,G,W);return new Promise(k=>{function he(){if(X.forEach(function(xe){Be.get(xe).currentProgram.isReady()&&X.delete(xe)}),X.size===0){k(b);return}setTimeout(he,10)}mt.get("KHR_parallel_shader_compile")!==null?he():setTimeout(he,10)})};let Vi=null;function As(b){Vi&&Vi(b)}function Um(){Ur.stop()}function Im(){Ur.start()}const Ur=new Hx;Ur.setAnimationLoop(As),typeof self<"u"&&Ur.setContext(self),this.setAnimationLoop=function(b){Vi=b,K.setAnimationLoop(b),b===null?Ur.stop():Ur.start()},K.addEventListener("sessionstart",Um),K.addEventListener("sessionend",Im),this.render=function(b,G){if(G!==void 0&&G.isCamera!==!0){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(P===!0)return;if(b.matrixWorldAutoUpdate===!0&&b.updateMatrixWorld(),G.parent===null&&G.matrixWorldAutoUpdate===!0&&G.updateMatrixWorld(),K.enabled===!0&&K.isPresenting===!0&&(K.cameraAutoUpdate===!0&&K.updateCamera(G),G=K.getCamera()),b.isScene===!0&&b.onBeforeRender(v,b,G,F),p=yt.get(b,S.length),p.init(G),S.push(p),Xe.multiplyMatrices(G.projectionMatrix,G.matrixWorldInverse),ie.setFromProjectionMatrix(Xe),Le=this.localClippingEnabled,pe=fe.init(this.clippingPlanes,Le),g=we.get(b,T.length),g.init(),T.push(g),K.enabled===!0&&K.isPresenting===!0){const he=v.xr.getDepthSensingMesh();he!==null&&Gh(he,G,-1/0,v.sortObjects)}Gh(b,G,0,v.sortObjects),g.finish(),v.sortObjects===!0&&g.sort(ye,Re),xt=K.enabled===!1||K.isPresenting===!1||K.hasDepthSensing()===!1,xt&&$e.addToRenderList(g,b),this.info.render.frame++,pe===!0&&fe.beginShadows();const W=p.state.shadowsArray;Ne.render(W,b,G),pe===!0&&fe.endShadows(),this.info.autoReset===!0&&this.info.reset();const X=g.opaque,k=g.transmissive;if(p.setupLights(),G.isArrayCamera){const he=G.cameras;if(k.length>0)for(let xe=0,Ae=he.length;xe<Ae;xe++){const Pe=he[xe];Bm(X,k,b,Pe)}xt&&$e.render(b);for(let xe=0,Ae=he.length;xe<Ae;xe++){const Pe=he[xe];Fm(g,b,Pe,Pe.viewport)}}else k.length>0&&Bm(X,k,b,G),xt&&$e.render(b),Fm(g,b,G);F!==null&&w===0&&(R.updateMultisampleRenderTarget(F),R.updateRenderTargetMipmap(F)),b.isScene===!0&&b.onAfterRender(v,b,G),Bt.resetDefaultState(),E=-1,M=null,S.pop(),S.length>0?(p=S[S.length-1],pe===!0&&fe.setGlobalState(v.clippingPlanes,p.state.camera)):p=null,T.pop(),T.length>0?g=T[T.length-1]:g=null};function Gh(b,G,W,X){if(b.visible===!1)return;if(b.layers.test(G.layers)){if(b.isGroup)W=b.renderOrder;else if(b.isLOD)b.autoUpdate===!0&&b.update(G);else if(b.isLight)p.pushLight(b),b.castShadow&&p.pushShadow(b);else if(b.isSprite){if(!b.frustumCulled||ie.intersectsSprite(b)){X&&ft.setFromMatrixPosition(b.matrixWorld).applyMatrix4(Xe);const xe=te.update(b),Ae=b.material;Ae.visible&&g.push(b,xe,Ae,W,ft.z,null)}}else if((b.isMesh||b.isLine||b.isPoints)&&(!b.frustumCulled||ie.intersectsObject(b))){const xe=te.update(b),Ae=b.material;if(X&&(b.boundingSphere!==void 0?(b.boundingSphere===null&&b.computeBoundingSphere(),ft.copy(b.boundingSphere.center)):(xe.boundingSphere===null&&xe.computeBoundingSphere(),ft.copy(xe.boundingSphere.center)),ft.applyMatrix4(b.matrixWorld).applyMatrix4(Xe)),Array.isArray(Ae)){const Pe=xe.groups;for(let Qe=0,tt=Pe.length;Qe<tt;Qe++){const He=Pe[Qe],vt=Ae[He.materialIndex];vt&&vt.visible&&g.push(b,xe,vt,W,ft.z,He)}}else Ae.visible&&g.push(b,xe,Ae,W,ft.z,null)}}const he=b.children;for(let xe=0,Ae=he.length;xe<Ae;xe++)Gh(he[xe],G,W,X)}function Fm(b,G,W,X){const k=b.opaque,he=b.transmissive,xe=b.transparent;p.setupLightsView(W),pe===!0&&fe.setGlobalState(v.clippingPlanes,W),X&&ze.viewport(D.copy(X)),k.length>0&&Vl(k,G,W),he.length>0&&Vl(he,G,W),xe.length>0&&Vl(xe,G,W),ze.buffers.depth.setTest(!0),ze.buffers.depth.setMask(!0),ze.buffers.color.setMask(!0),ze.setPolygonOffset(!1)}function Bm(b,G,W,X){if((W.isScene===!0?W.overrideMaterial:null)!==null)return;p.state.transmissionRenderTarget[X.id]===void 0&&(p.state.transmissionRenderTarget[X.id]=new bo(1,1,{generateMipmaps:!0,type:mt.has("EXT_color_buffer_half_float")||mt.has("EXT_color_buffer_float")?zn:Gn,minFilter:ti,samples:4,stencilBuffer:r,resolveDepthBuffer:!1,resolveStencilBuffer:!1,colorSpace:rt.workingColorSpace}));const he=p.state.transmissionRenderTarget[X.id],xe=X.viewport||D;he.setSize(xe.z*v.transmissionResolutionScale,xe.w*v.transmissionResolutionScale);const Ae=v.getRenderTarget();v.setRenderTarget(he),v.getClearColor(ne),oe=v.getClearAlpha(),oe<1&&v.setClearColor(16777215,.5),v.clear(),xt&&$e.render(W);const Pe=v.toneMapping;v.toneMapping=ri;const Qe=X.viewport;if(X.viewport!==void 0&&(X.viewport=void 0),p.setupLightsView(X),pe===!0&&fe.setGlobalState(v.clippingPlanes,X),Vl(b,W,X),R.updateMultisampleRenderTarget(he),R.updateRenderTargetMipmap(he),mt.has("WEBGL_multisampled_render_to_texture")===!1){let tt=!1;for(let He=0,vt=G.length;He<vt;He++){const Rt=G[He],un=Rt.object,Kt=Rt.geometry,Tt=Rt.material,We=Rt.group;if(Tt.side===Bn&&un.layers.test(X.layers)){const Rn=Tt.side;Tt.side=Wt,Tt.needsUpdate=!0,Om(un,W,X,Kt,Tt,We),Tt.side=Rn,Tt.needsUpdate=!0,tt=!0}}tt===!0&&(R.updateMultisampleRenderTarget(he),R.updateRenderTargetMipmap(he))}v.setRenderTarget(Ae),v.setClearColor(ne,oe),Qe!==void 0&&(X.viewport=Qe),v.toneMapping=Pe}function Vl(b,G,W){const X=G.isScene===!0?G.overrideMaterial:null;for(let k=0,he=b.length;k<he;k++){const xe=b[k],Ae=xe.object,Pe=xe.geometry,Qe=X===null?xe.material:X,tt=xe.group;Ae.layers.test(W.layers)&&Om(Ae,G,W,Pe,Qe,tt)}}function Om(b,G,W,X,k,he){b.onBeforeRender(v,G,W,X,k,he),b.modelViewMatrix.multiplyMatrices(W.matrixWorldInverse,b.matrixWorld),b.normalMatrix.getNormalMatrix(b.modelViewMatrix),k.onBeforeRender(v,G,W,X,b,he),k.transparent===!0&&k.side===Bn&&k.forceSinglePass===!1?(k.side=Wt,k.needsUpdate=!0,v.renderBufferDirect(W,G,X,k,b,he),k.side=Ki,k.needsUpdate=!0,v.renderBufferDirect(W,G,X,k,b,he),k.side=Bn):v.renderBufferDirect(W,G,X,k,b,he),b.onAfterRender(v,G,W,X,k,he)}function Gl(b,G,W){G.isScene!==!0&&(G=qt);const X=Be.get(b),k=p.state.lights,he=p.state.shadowsArray,xe=k.state.version,Ae=Fe.getParameters(b,k.state,he,G,W),Pe=Fe.getProgramCacheKey(Ae);let Qe=X.programs;X.environment=b.isMeshStandardMaterial?G.environment:null,X.fog=G.fog,X.envMap=(b.isMeshStandardMaterial?H:y).get(b.envMap||X.environment),X.envMapRotation=X.environment!==null&&b.envMap===null?G.environmentRotation:b.envMapRotation,Qe===void 0&&(b.addEventListener("dispose",ot),Qe=new Map,X.programs=Qe);let tt=Qe.get(Pe);if(tt!==void 0){if(X.currentProgram===tt&&X.lightsStateVersion===xe)return Gm(b,Ae),tt}else Ae.uniforms=Fe.getUniforms(b),b.onBeforeCompile(Ae,v),tt=Fe.acquireProgram(Ae,Pe),Qe.set(Pe,tt),X.uniforms=Ae.uniforms;const He=X.uniforms;return(!b.isShaderMaterial&&!b.isRawShaderMaterial||b.clipping===!0)&&(He.clippingPlanes=fe.uniform),Gm(b,Ae),X.needsLights=NS(b),X.lightsStateVersion=xe,X.needsLights&&(He.ambientLightColor.value=k.state.ambient,He.lightProbe.value=k.state.probe,He.directionalLights.value=k.state.directional,He.directionalLightShadows.value=k.state.directionalShadow,He.spotLights.value=k.state.spot,He.spotLightShadows.value=k.state.spotShadow,He.rectAreaLights.value=k.state.rectArea,He.ltc_1.value=k.state.rectAreaLTC1,He.ltc_2.value=k.state.rectAreaLTC2,He.pointLights.value=k.state.point,He.pointLightShadows.value=k.state.pointShadow,He.hemisphereLights.value=k.state.hemi,He.directionalShadowMap.value=k.state.directionalShadowMap,He.directionalShadowMatrix.value=k.state.directionalShadowMatrix,He.spotShadowMap.value=k.state.spotShadowMap,He.spotLightMatrix.value=k.state.spotLightMatrix,He.spotLightMap.value=k.state.spotLightMap,He.pointShadowMap.value=k.state.pointShadowMap,He.pointShadowMatrix.value=k.state.pointShadowMatrix),X.currentProgram=tt,X.uniformsList=null,tt}function Vm(b){if(b.uniformsList===null){const G=b.currentProgram.getUniforms();b.uniformsList=Nu.seqWithValue(G.seq,b.uniforms)}return b.uniformsList}function Gm(b,G){const W=Be.get(b);W.outputColorSpace=G.outputColorSpace,W.batching=G.batching,W.batchingColor=G.batchingColor,W.instancing=G.instancing,W.instancingColor=G.instancingColor,W.instancingMorph=G.instancingMorph,W.skinning=G.skinning,W.morphTargets=G.morphTargets,W.morphNormals=G.morphNormals,W.morphColors=G.morphColors,W.morphTargetsCount=G.morphTargetsCount,W.numClippingPlanes=G.numClippingPlanes,W.numIntersection=G.numClipIntersection,W.vertexAlphas=G.vertexAlphas,W.vertexTangents=G.vertexTangents,W.toneMapping=G.toneMapping}function RS(b,G,W,X,k){G.isScene!==!0&&(G=qt),R.resetTextureUnits();const he=G.fog,xe=X.isMeshStandardMaterial?G.environment:null,Ae=F===null?v.outputColorSpace:F.isXRRenderTarget===!0?F.texture.colorSpace:bi,Pe=(X.isMeshStandardMaterial?H:y).get(X.envMap||xe),Qe=X.vertexColors===!0&&!!W.attributes.color&&W.attributes.color.itemSize===4,tt=!!W.attributes.tangent&&(!!X.normalMap||X.anisotropy>0),He=!!W.morphAttributes.position,vt=!!W.morphAttributes.normal,Rt=!!W.morphAttributes.color;let un=ri;X.toneMapped&&(F===null||F.isXRRenderTarget===!0)&&(un=v.toneMapping);const Kt=W.morphAttributes.position||W.morphAttributes.normal||W.morphAttributes.color,Tt=Kt!==void 0?Kt.length:0,We=Be.get(X),Rn=p.state.lights;if(pe===!0&&(Le===!0||b!==M)){const $n=b===M&&X.id===E;fe.setState(X,b,$n)}let wt=!1;X.version===We.__version?(We.needsLights&&We.lightsStateVersion!==Rn.state.version||We.outputColorSpace!==Ae||k.isBatchedMesh&&We.batching===!1||!k.isBatchedMesh&&We.batching===!0||k.isBatchedMesh&&We.batchingColor===!0&&k.colorTexture===null||k.isBatchedMesh&&We.batchingColor===!1&&k.colorTexture!==null||k.isInstancedMesh&&We.instancing===!1||!k.isInstancedMesh&&We.instancing===!0||k.isSkinnedMesh&&We.skinning===!1||!k.isSkinnedMesh&&We.skinning===!0||k.isInstancedMesh&&We.instancingColor===!0&&k.instanceColor===null||k.isInstancedMesh&&We.instancingColor===!1&&k.instanceColor!==null||k.isInstancedMesh&&We.instancingMorph===!0&&k.morphTexture===null||k.isInstancedMesh&&We.instancingMorph===!1&&k.morphTexture!==null||We.envMap!==Pe||X.fog===!0&&We.fog!==he||We.numClippingPlanes!==void 0&&(We.numClippingPlanes!==fe.numPlanes||We.numIntersection!==fe.numIntersection)||We.vertexAlphas!==Qe||We.vertexTangents!==tt||We.morphTargets!==He||We.morphNormals!==vt||We.morphColors!==Rt||We.toneMapping!==un||We.morphTargetsCount!==Tt)&&(wt=!0):(wt=!0,We.__version=X.version);let Gi=We.currentProgram;wt===!0&&(Gi=Gl(X,G,k));let Do=!1,hi=!1,lc=!1;const Ht=Gi.getUniforms(),Ai=We.uniforms;if(ze.useProgram(Gi.program)&&(Do=!0,hi=!0,lc=!0),X.id!==E&&(E=X.id,hi=!0),Do||M!==b){ze.buffers.depth.getReversed()?(ve.copy(b.projectionMatrix),Hb(ve),Wb(ve),Ht.setValue(B,"projectionMatrix",ve)):Ht.setValue(B,"projectionMatrix",b.projectionMatrix),Ht.setValue(B,"viewMatrix",b.matrixWorldInverse);const Kn=Ht.map.cameraPosition;Kn!==void 0&&Kn.setValue(B,et.setFromMatrixPosition(b.matrixWorld)),gt.logarithmicDepthBuffer&&Ht.setValue(B,"logDepthBufFC",2/(Math.log(b.far+1)/Math.LN2)),(X.isMeshPhongMaterial||X.isMeshToonMaterial||X.isMeshLambertMaterial||X.isMeshBasicMaterial||X.isMeshStandardMaterial||X.isShaderMaterial)&&Ht.setValue(B,"isOrthographic",b.isOrthographicCamera===!0),M!==b&&(M=b,hi=!0,lc=!0)}if(k.isSkinnedMesh){Ht.setOptional(B,k,"bindMatrix"),Ht.setOptional(B,k,"bindMatrixInverse");const $n=k.skeleton;$n&&($n.boneTexture===null&&$n.computeBoneTexture(),Ht.setValue(B,"boneTexture",$n.boneTexture,R))}k.isBatchedMesh&&(Ht.setOptional(B,k,"batchingTexture"),Ht.setValue(B,"batchingTexture",k._matricesTexture,R),Ht.setOptional(B,k,"batchingIdTexture"),Ht.setValue(B,"batchingIdTexture",k._indirectTexture,R),Ht.setOptional(B,k,"batchingColorTexture"),k._colorsTexture!==null&&Ht.setValue(B,"batchingColorTexture",k._colorsTexture,R));const Ri=W.morphAttributes;if((Ri.position!==void 0||Ri.normal!==void 0||Ri.color!==void 0)&&Ze.update(k,W,Gi),(hi||We.receiveShadow!==k.receiveShadow)&&(We.receiveShadow=k.receiveShadow,Ht.setValue(B,"receiveShadow",k.receiveShadow)),X.isMeshGouraudMaterial&&X.envMap!==null&&(Ai.envMap.value=Pe,Ai.flipEnvMap.value=Pe.isCubeTexture&&Pe.isRenderTargetTexture===!1?-1:1),X.isMeshStandardMaterial&&X.envMap===null&&G.environment!==null&&(Ai.envMapIntensity.value=G.environmentIntensity),hi&&(Ht.setValue(B,"toneMappingExposure",v.toneMappingExposure),We.needsLights&&wS(Ai,lc),he&&X.fog===!0&&Te.refreshFogUniforms(Ai,he),Te.refreshMaterialUniforms(Ai,X,Q,ue,p.state.transmissionRenderTarget[b.id]),Nu.upload(B,Vm(We),Ai,R)),X.isShaderMaterial&&X.uniformsNeedUpdate===!0&&(Nu.upload(B,Vm(We),Ai,R),X.uniformsNeedUpdate=!1),X.isSpriteMaterial&&Ht.setValue(B,"center",k.center),Ht.setValue(B,"modelViewMatrix",k.modelViewMatrix),Ht.setValue(B,"normalMatrix",k.normalMatrix),Ht.setValue(B,"modelMatrix",k.matrixWorld),X.isShaderMaterial||X.isRawShaderMaterial){const $n=X.uniformsGroups;for(let Kn=0,zh=$n.length;Kn<zh;Kn++){const Ir=$n[Kn];O.update(Ir,Gi),O.bind(Ir,Gi)}}return Gi}function wS(b,G){b.ambientLightColor.needsUpdate=G,b.lightProbe.needsUpdate=G,b.directionalLights.needsUpdate=G,b.directionalLightShadows.needsUpdate=G,b.pointLights.needsUpdate=G,b.pointLightShadows.needsUpdate=G,b.spotLights.needsUpdate=G,b.spotLightShadows.needsUpdate=G,b.rectAreaLights.needsUpdate=G,b.hemisphereLights.needsUpdate=G}function NS(b){return b.isMeshLambertMaterial||b.isMeshToonMaterial||b.isMeshPhongMaterial||b.isMeshStandardMaterial||b.isShadowMaterial||b.isShaderMaterial&&b.lights===!0}this.getActiveCubeFace=function(){return N},this.getActiveMipmapLevel=function(){return w},this.getRenderTarget=function(){return F},this.setRenderTargetTextures=function(b,G,W){Be.get(b.texture).__webglTexture=G,Be.get(b.depthTexture).__webglTexture=W;const X=Be.get(b);X.__hasExternalTextures=!0,X.__autoAllocateDepthBuffer=W===void 0,X.__autoAllocateDepthBuffer||mt.has("WEBGL_multisampled_render_to_texture")===!0&&(console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"),X.__useRenderToTexture=!1)},this.setRenderTargetFramebuffer=function(b,G){const W=Be.get(b);W.__webglFramebuffer=G,W.__useDefaultFramebuffer=G===void 0};const CS=B.createFramebuffer();this.setRenderTarget=function(b,G=0,W=0){F=b,N=G,w=W;let X=!0,k=null,he=!1,xe=!1;if(b){const Pe=Be.get(b);if(Pe.__useDefaultFramebuffer!==void 0)ze.bindFramebuffer(B.FRAMEBUFFER,null),X=!1;else if(Pe.__webglFramebuffer===void 0)R.setupRenderTarget(b);else if(Pe.__hasExternalTextures)R.rebindTextures(b,Be.get(b.texture).__webglTexture,Be.get(b.depthTexture).__webglTexture);else if(b.depthBuffer){const He=b.depthTexture;if(Pe.__boundDepthTexture!==He){if(He!==null&&Be.has(He)&&(b.width!==He.image.width||b.height!==He.image.height))throw new Error("WebGLRenderTarget: Attached DepthTexture is initialized to the incorrect size.");R.setupDepthRenderbuffer(b)}}const Qe=b.texture;(Qe.isData3DTexture||Qe.isDataArrayTexture||Qe.isCompressedArrayTexture)&&(xe=!0);const tt=Be.get(b).__webglFramebuffer;b.isWebGLCubeRenderTarget?(Array.isArray(tt[G])?k=tt[G][W]:k=tt[G],he=!0):b.samples>0&&R.useMultisampledRTT(b)===!1?k=Be.get(b).__webglMultisampledFramebuffer:Array.isArray(tt)?k=tt[W]:k=tt,D.copy(b.viewport),Z.copy(b.scissor),$=b.scissorTest}else D.copy(Ge).multiplyScalar(Q).floor(),Z.copy(dt).multiplyScalar(Q).floor(),$=Ut;if(W!==0&&(k=CS),ze.bindFramebuffer(B.FRAMEBUFFER,k)&&X&&ze.drawBuffers(b,k),ze.viewport(D),ze.scissor(Z),ze.setScissorTest($),he){const Pe=Be.get(b.texture);B.framebufferTexture2D(B.FRAMEBUFFER,B.COLOR_ATTACHMENT0,B.TEXTURE_CUBE_MAP_POSITIVE_X+G,Pe.__webglTexture,W)}else if(xe){const Pe=Be.get(b.texture),Qe=G;B.framebufferTextureLayer(B.FRAMEBUFFER,B.COLOR_ATTACHMENT0,Pe.__webglTexture,W,Qe)}else if(b!==null&&W!==0){const Pe=Be.get(b.texture);B.framebufferTexture2D(B.FRAMEBUFFER,B.COLOR_ATTACHMENT0,B.TEXTURE_2D,Pe.__webglTexture,W)}E=-1},this.readRenderTargetPixels=function(b,G,W,X,k,he,xe){if(!(b&&b.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let Ae=Be.get(b).__webglFramebuffer;if(b.isWebGLCubeRenderTarget&&xe!==void 0&&(Ae=Ae[xe]),Ae){ze.bindFramebuffer(B.FRAMEBUFFER,Ae);try{const Pe=b.texture,Qe=Pe.format,tt=Pe.type;if(!gt.textureFormatReadable(Qe)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}if(!gt.textureTypeReadable(tt)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}G>=0&&G<=b.width-X&&W>=0&&W<=b.height-k&&B.readPixels(G,W,X,k,at.convert(Qe),at.convert(tt),he)}finally{const Pe=F!==null?Be.get(F).__webglFramebuffer:null;ze.bindFramebuffer(B.FRAMEBUFFER,Pe)}}},this.readRenderTargetPixelsAsync=async function(b,G,W,X,k,he,xe){if(!(b&&b.isWebGLRenderTarget))throw new Error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let Ae=Be.get(b).__webglFramebuffer;if(b.isWebGLCubeRenderTarget&&xe!==void 0&&(Ae=Ae[xe]),Ae){const Pe=b.texture,Qe=Pe.format,tt=Pe.type;if(!gt.textureFormatReadable(Qe))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in RGBA or implementation defined format.");if(!gt.textureTypeReadable(tt))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in UnsignedByteType or implementation defined type.");if(G>=0&&G<=b.width-X&&W>=0&&W<=b.height-k){ze.bindFramebuffer(B.FRAMEBUFFER,Ae);const He=B.createBuffer();B.bindBuffer(B.PIXEL_PACK_BUFFER,He),B.bufferData(B.PIXEL_PACK_BUFFER,he.byteLength,B.STREAM_READ),B.readPixels(G,W,X,k,at.convert(Qe),at.convert(tt),0);const vt=F!==null?Be.get(F).__webglFramebuffer:null;ze.bindFramebuffer(B.FRAMEBUFFER,vt);const Rt=B.fenceSync(B.SYNC_GPU_COMMANDS_COMPLETE,0);return B.flush(),await kb(B,Rt,4),B.bindBuffer(B.PIXEL_PACK_BUFFER,He),B.getBufferSubData(B.PIXEL_PACK_BUFFER,0,he),B.deleteBuffer(He),B.deleteSync(Rt),he}else throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: requested read bounds are out of range.")}},this.copyFramebufferToTexture=function(b,G=null,W=0){b.isTexture!==!0&&(jr("WebGLRenderer: copyFramebufferToTexture function signature has changed."),G=arguments[0]||null,b=arguments[1]);const X=Math.pow(2,-W),k=Math.floor(b.image.width*X),he=Math.floor(b.image.height*X),xe=G!==null?G.x:0,Ae=G!==null?G.y:0;R.setTexture2D(b,0),B.copyTexSubImage2D(B.TEXTURE_2D,W,0,0,xe,Ae,k,he),ze.unbindTexture()};const PS=B.createFramebuffer(),DS=B.createFramebuffer();this.copyTextureToTexture=function(b,G,W=null,X=null,k=0,he=null){b.isTexture!==!0&&(jr("WebGLRenderer: copyTextureToTexture function signature has changed."),X=arguments[0]||null,b=arguments[1],G=arguments[2],he=arguments[3]||0,W=null),he===null&&(k!==0?(jr("WebGLRenderer: copyTextureToTexture function signature has changed to support src and dst mipmap levels."),he=k,k=0):he=0);let xe,Ae,Pe,Qe,tt,He,vt,Rt,un;const Kt=b.isCompressedTexture?b.mipmaps[he]:b.image;if(W!==null)xe=W.max.x-W.min.x,Ae=W.max.y-W.min.y,Pe=W.isBox3?W.max.z-W.min.z:1,Qe=W.min.x,tt=W.min.y,He=W.isBox3?W.min.z:0;else{const Ri=Math.pow(2,-k);xe=Math.floor(Kt.width*Ri),Ae=Math.floor(Kt.height*Ri),b.isDataArrayTexture?Pe=Kt.depth:b.isData3DTexture?Pe=Math.floor(Kt.depth*Ri):Pe=1,Qe=0,tt=0,He=0}X!==null?(vt=X.x,Rt=X.y,un=X.z):(vt=0,Rt=0,un=0);const Tt=at.convert(G.format),We=at.convert(G.type);let Rn;G.isData3DTexture?(R.setTexture3D(G,0),Rn=B.TEXTURE_3D):G.isDataArrayTexture||G.isCompressedArrayTexture?(R.setTexture2DArray(G,0),Rn=B.TEXTURE_2D_ARRAY):(R.setTexture2D(G,0),Rn=B.TEXTURE_2D),B.pixelStorei(B.UNPACK_FLIP_Y_WEBGL,G.flipY),B.pixelStorei(B.UNPACK_PREMULTIPLY_ALPHA_WEBGL,G.premultiplyAlpha),B.pixelStorei(B.UNPACK_ALIGNMENT,G.unpackAlignment);const wt=B.getParameter(B.UNPACK_ROW_LENGTH),Gi=B.getParameter(B.UNPACK_IMAGE_HEIGHT),Do=B.getParameter(B.UNPACK_SKIP_PIXELS),hi=B.getParameter(B.UNPACK_SKIP_ROWS),lc=B.getParameter(B.UNPACK_SKIP_IMAGES);B.pixelStorei(B.UNPACK_ROW_LENGTH,Kt.width),B.pixelStorei(B.UNPACK_IMAGE_HEIGHT,Kt.height),B.pixelStorei(B.UNPACK_SKIP_PIXELS,Qe),B.pixelStorei(B.UNPACK_SKIP_ROWS,tt),B.pixelStorei(B.UNPACK_SKIP_IMAGES,He);const Ht=b.isDataArrayTexture||b.isData3DTexture,Ai=G.isDataArrayTexture||G.isData3DTexture;if(b.isDepthTexture){const Ri=Be.get(b),$n=Be.get(G),Kn=Be.get(Ri.__renderTarget),zh=Be.get($n.__renderTarget);ze.bindFramebuffer(B.READ_FRAMEBUFFER,Kn.__webglFramebuffer),ze.bindFramebuffer(B.DRAW_FRAMEBUFFER,zh.__webglFramebuffer);for(let Ir=0;Ir<Pe;Ir++)Ht&&(B.framebufferTextureLayer(B.READ_FRAMEBUFFER,B.COLOR_ATTACHMENT0,Be.get(b).__webglTexture,k,He+Ir),B.framebufferTextureLayer(B.DRAW_FRAMEBUFFER,B.COLOR_ATTACHMENT0,Be.get(G).__webglTexture,he,un+Ir)),B.blitFramebuffer(Qe,tt,xe,Ae,vt,Rt,xe,Ae,B.DEPTH_BUFFER_BIT,B.NEAREST);ze.bindFramebuffer(B.READ_FRAMEBUFFER,null),ze.bindFramebuffer(B.DRAW_FRAMEBUFFER,null)}else if(k!==0||b.isRenderTargetTexture||Be.has(b)){const Ri=Be.get(b),$n=Be.get(G);ze.bindFramebuffer(B.READ_FRAMEBUFFER,PS),ze.bindFramebuffer(B.DRAW_FRAMEBUFFER,DS);for(let Kn=0;Kn<Pe;Kn++)Ht?B.framebufferTextureLayer(B.READ_FRAMEBUFFER,B.COLOR_ATTACHMENT0,Ri.__webglTexture,k,He+Kn):B.framebufferTexture2D(B.READ_FRAMEBUFFER,B.COLOR_ATTACHMENT0,B.TEXTURE_2D,Ri.__webglTexture,k),Ai?B.framebufferTextureLayer(B.DRAW_FRAMEBUFFER,B.COLOR_ATTACHMENT0,$n.__webglTexture,he,un+Kn):B.framebufferTexture2D(B.DRAW_FRAMEBUFFER,B.COLOR_ATTACHMENT0,B.TEXTURE_2D,$n.__webglTexture,he),k!==0?B.blitFramebuffer(Qe,tt,xe,Ae,vt,Rt,xe,Ae,B.COLOR_BUFFER_BIT,B.NEAREST):Ai?B.copyTexSubImage3D(Rn,he,vt,Rt,un+Kn,Qe,tt,xe,Ae):B.copyTexSubImage2D(Rn,he,vt,Rt,Qe,tt,xe,Ae);ze.bindFramebuffer(B.READ_FRAMEBUFFER,null),ze.bindFramebuffer(B.DRAW_FRAMEBUFFER,null)}else Ai?b.isDataTexture||b.isData3DTexture?B.texSubImage3D(Rn,he,vt,Rt,un,xe,Ae,Pe,Tt,We,Kt.data):G.isCompressedArrayTexture?B.compressedTexSubImage3D(Rn,he,vt,Rt,un,xe,Ae,Pe,Tt,Kt.data):B.texSubImage3D(Rn,he,vt,Rt,un,xe,Ae,Pe,Tt,We,Kt):b.isDataTexture?B.texSubImage2D(B.TEXTURE_2D,he,vt,Rt,xe,Ae,Tt,We,Kt.data):b.isCompressedTexture?B.compressedTexSubImage2D(B.TEXTURE_2D,he,vt,Rt,Kt.width,Kt.height,Tt,Kt.data):B.texSubImage2D(B.TEXTURE_2D,he,vt,Rt,xe,Ae,Tt,We,Kt);B.pixelStorei(B.UNPACK_ROW_LENGTH,wt),B.pixelStorei(B.UNPACK_IMAGE_HEIGHT,Gi),B.pixelStorei(B.UNPACK_SKIP_PIXELS,Do),B.pixelStorei(B.UNPACK_SKIP_ROWS,hi),B.pixelStorei(B.UNPACK_SKIP_IMAGES,lc),he===0&&G.generateMipmaps&&B.generateMipmap(Rn),ze.unbindTexture()},this.copyTextureToTexture3D=function(b,G,W=null,X=null,k=0){return b.isTexture!==!0&&(jr("WebGLRenderer: copyTextureToTexture3D function signature has changed."),W=arguments[0]||null,X=arguments[1]||null,b=arguments[2],G=arguments[3],k=arguments[4]||0),jr('WebGLRenderer: copyTextureToTexture3D function has been deprecated. Use "copyTextureToTexture" instead.'),this.copyTextureToTexture(b,G,W,X,k)},this.initRenderTarget=function(b){Be.get(b).__webglFramebuffer===void 0&&R.setupRenderTarget(b)},this.initTexture=function(b){b.isCubeTexture?R.setTextureCube(b,0):b.isData3DTexture?R.setTexture3D(b,0):b.isDataArrayTexture||b.isCompressedArrayTexture?R.setTexture2DArray(b,0):R.setTexture2D(b,0),ze.unbindTexture()},this.resetState=function(){N=0,w=0,F=null,ze.reset(),Bt.reset()},typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}get coordinateSystem(){return ni}get outputColorSpace(){return this._outputColorSpace}set outputColorSpace(e){this._outputColorSpace=e;const t=this.getContext();t.drawingBufferColorspace=rt._getDrawingBufferColorSpace(e),t.unpackColorSpace=rt._getUnpackColorSpace()}}/**
 * @license
 * Copyright 2010-2024 Three.js Authors
 * SPDX-License-Identifier: MIT
 */const TN=["alphaMap","alphaTest","anisotropy","anisotropyMap","anisotropyRotation","aoMap","attenuationColor","attenuationDistance","bumpMap","clearcoat","clearcoatMap","clearcoatNormalMap","clearcoatNormalScale","clearcoatRoughness","color","dispersion","displacementMap","emissive","emissiveMap","envMap","gradientMap","ior","iridescence","iridescenceIOR","iridescenceMap","iridescenceThicknessMap","lightMap","map","matcap","metalness","metalnessMap","normalMap","normalScale","opacity","roughness","roughnessMap","sheen","sheenColor","sheenColorMap","sheenRoughnessMap","shininess","specular","specularColor","specularColorMap","specularIntensity","specularIntensityMap","specularMap","thickness","transmission","transmissionMap"];class SN{constructor(e){this.renderObjects=new WeakMap,this.hasNode=this.containsNode(e),this.hasAnimation=e.object.isSkinnedMesh===!0,this.refreshUniforms=TN,this.renderId=0}firstInitialization(e){return this.renderObjects.has(e)===!1?(this.getRenderObjectData(e),!0):!1}getRenderObjectData(e){let t=this.renderObjects.get(e);if(t===void 0){const{geometry:n,material:i,object:r}=e;if(t={material:this.getMaterialData(i),geometry:{attributes:this.getAttributesData(n.attributes),indexVersion:n.index?n.index.version:null,drawRange:{start:n.drawRange.start,count:n.drawRange.count}},worldMatrix:r.matrixWorld.clone()},r.center&&(t.center=r.center.clone()),r.morphTargetInfluences&&(t.morphTargetInfluences=r.morphTargetInfluences.slice()),e.bundle!==null&&(t.version=e.bundle.version),t.material.transmission>0){const{width:o,height:a}=e.context;t.bufferWidth=o,t.bufferHeight=a}this.renderObjects.set(e,t)}return t}getAttributesData(e){const t={};for(const n in e){const i=e[n];t[n]={version:i.version}}return t}containsNode(e){const t=e.material;for(const n in t)if(t[n]&&t[n].isNode)return!0;return e.renderer.nodes.modelViewMatrix!==null||e.renderer.nodes.modelNormalViewMatrix!==null}getMaterialData(e){const t={};for(const n of this.refreshUniforms){const i=e[n];i!=null&&(typeof i=="object"&&i.clone!==void 0?i.isTexture===!0?t[n]={id:i.id,version:i.version}:t[n]=i.clone():t[n]=i)}return t}equals(e){const{object:t,material:n,geometry:i}=e,r=this.getRenderObjectData(e);if(r.worldMatrix.equals(t.matrixWorld)!==!0)return r.worldMatrix.copy(t.matrixWorld),!1;const o=r.material;for(const _ in o){const g=o[_],p=n[_];if(g.equals!==void 0){if(g.equals(p)===!1)return g.copy(p),!1}else if(p.isTexture===!0){if(g.id!==p.id||g.version!==p.version)return g.id=p.id,g.version=p.version,!1}else if(g!==p)return o[_]=p,!1}if(o.transmission>0){const{width:_,height:g}=e.context;if(r.bufferWidth!==_||r.bufferHeight!==g)return r.bufferWidth=_,r.bufferHeight=g,!1}const a=r.geometry,c=i.attributes,l=a.attributes,u=Object.keys(l),h=Object.keys(c);if(u.length!==h.length)return r.geometry.attributes=this.getAttributesData(c),!1;for(const _ of u){const g=l[_],p=c[_];if(p===void 0)return delete l[_],!1;if(g.version!==p.version)return g.version=p.version,!1}const d=i.index,f=a.indexVersion,m=d?d.version:null;if(f!==m)return a.indexVersion=m,!1;if(a.drawRange.start!==i.drawRange.start||a.drawRange.count!==i.drawRange.count)return a.drawRange.start=i.drawRange.start,a.drawRange.count=i.drawRange.count,!1;if(r.morphTargetInfluences){let _=!1;for(let g=0;g<r.morphTargetInfluences.length;g++)r.morphTargetInfluences[g]!==t.morphTargetInfluences[g]&&(_=!0);if(_)return!0}return r.center&&r.center.equals(t.center)===!1?(r.center.copy(t.center),!0):(e.bundle!==null&&(r.version=e.bundle.version),!0)}needsRefresh(e,t){if(this.hasNode||this.hasAnimation||this.firstInitialization(e))return!0;const{renderId:n}=t;if(this.renderId!==n)return this.renderId=n,!0;const i=e.object.static===!0,r=e.bundle!==null&&e.bundle.static===!0&&this.getRenderObjectData(e).version===e.bundle.version;return i||r?!1:this.equals(e)!==!0}}function nl(s,e=0){let t=3735928559^e,n=1103547991^e;if(s instanceof Array)for(let i=0,r;i<s.length;i++)r=s[i],t=Math.imul(t^r,2654435761),n=Math.imul(n^r,1597334677);else for(let i=0,r;i<s.length;i++)r=s.charCodeAt(i),t=Math.imul(t^r,2654435761),n=Math.imul(n^r,1597334677);return t=Math.imul(t^t>>>16,2246822507),t^=Math.imul(n^n>>>13,3266489909),n=Math.imul(n^n>>>16,2246822507),n^=Math.imul(t^t>>>13,3266489909),4294967296*(2097151&n)+(t>>>0)}const Yx=s=>nl(s),mh=s=>nl(s),xp=(...s)=>nl(s);function jx(s,e=!1){const t=[];s.isNode===!0&&(t.push(s.id),s=s.getSelf());for(const{property:n,childNode:i}of Hu(s))t.push(t,nl(n.slice(0,-4)),i.getCacheKey(e));return nl(t)}function*Hu(s,e=!1){for(const t in s){if(t.startsWith("_")===!0)continue;const n=s[t];if(Array.isArray(n)===!0)for(let i=0;i<n.length;i++){const r=n[i];r&&(r.isNode===!0||e&&typeof r.toJSON=="function")&&(yield{property:t,index:i,childNode:r})}else if(n&&n.isNode===!0)yield{property:t,childNode:n};else if(typeof n=="object")for(const i in n){const r=n[i];r&&(r.isNode===!0||e&&typeof r.toJSON=="function")&&(yield{property:t,index:i,childNode:r})}}}const bN=new Map([[1,"float"],[2,"vec2"],[3,"vec3"],[4,"vec4"],[9,"mat3"],[16,"mat4"]]),Wg=new WeakMap;function Kx(s){return bN.get(s)}function Zx(s){if(/[iu]?vec\d/.test(s))return s.startsWith("ivec")?Int32Array:s.startsWith("uvec")?Uint32Array:Float32Array;if(/mat\d/.test(s)||/float/.test(s))return Float32Array;if(/uint/.test(s))return Uint32Array;if(/int/.test(s))return Int32Array;throw new Error(`THREE.NodeUtils: Unsupported type: ${s}`)}function Qx(s){if(/float|int|uint/.test(s))return 1;if(/vec2/.test(s))return 2;if(/vec3/.test(s))return 3;if(/vec4/.test(s))return 4;if(/mat3/.test(s))return 9;if(/mat4/.test(s))return 16;console.error("THREE.TSL: Unsupported type:",s)}function xr(s){if(s==null)return null;const e=typeof s;return s.isNode===!0?"node":e==="number"?"float":e==="boolean"?"bool":e==="string"?"string":e==="function"?"shader":s.isVector2===!0?"vec2":s.isVector3===!0?"vec3":s.isVector4===!0?"vec4":s.isMatrix3===!0?"mat3":s.isMatrix4===!0?"mat4":s.isColor===!0?"color":s instanceof ArrayBuffer?"ArrayBuffer":null}function Jx(s,...e){const t=s?s.slice(-4):void 0;return e.length===1&&(t==="vec2"?e=[e[0],e[0]]:t==="vec3"?e=[e[0],e[0],e[0]]:t==="vec4"&&(e=[e[0],e[0],e[0],e[0]])),s==="color"?new De(...e):t==="vec2"?new Ee(...e):t==="vec3"?new U(...e):t==="vec4"?new je(...e):t==="mat3"?new qe(...e):t==="mat4"?new ut(...e):s==="bool"?e[0]||!1:s==="float"||s==="int"||s==="uint"?e[0]||0:s==="string"?e[0]||"":s==="ArrayBuffer"?ny(e[0]):null}function ey(s){let e=Wg.get(s);return e===void 0&&(e={},Wg.set(s,e)),e}function ty(s){let e="";const t=new Uint8Array(s);for(let n=0;n<t.length;n++)e+=String.fromCharCode(t[n]);return btoa(e)}function ny(s){return Uint8Array.from(atob(s),e=>e.charCodeAt(0)).buffer}const lf={VERTEX:"vertex",FRAGMENT:"fragment"},Ye={NONE:"none",FRAME:"frame",RENDER:"render",OBJECT:"object"},MN={BOOLEAN:"bool",INTEGER:"int",FLOAT:"float",VECTOR2:"vec2",VECTOR3:"vec3",VECTOR4:"vec4",MATRIX2:"mat2",MATRIX3:"mat3",MATRIX4:"mat4"},Vn={READ_ONLY:"readOnly",WRITE_ONLY:"writeOnly",READ_WRITE:"readWrite"},iy=["fragment","vertex"],uf=["setup","analyze","generate"],hf=[...iy,"compute"],Ao=["x","y","z","w"];let EN=0;class Ve extends Zs{static get type(){return"Node"}constructor(e=null){super(),this.nodeType=e,this.updateType=Ye.NONE,this.updateBeforeType=Ye.NONE,this.updateAfterType=Ye.NONE,this.uuid=ap.generateUUID(),this.version=0,this.global=!1,this.isNode=!0,this._cacheKey=null,this._cacheKeyVersion=0,Object.defineProperty(this,"id",{value:EN++})}set needsUpdate(e){e===!0&&this.version++}get type(){return this.constructor.type}onUpdate(e,t){return this.updateType=t,this.update=e.bind(this.getSelf()),this}onFrameUpdate(e){return this.onUpdate(e,Ye.FRAME)}onRenderUpdate(e){return this.onUpdate(e,Ye.RENDER)}onObjectUpdate(e){return this.onUpdate(e,Ye.OBJECT)}onReference(e){return this.updateReference=e.bind(this.getSelf()),this}getSelf(){return this.self||this}updateReference(){return this}isGlobal(){return this.global}*getChildren(){for(const{childNode:e}of Hu(this))yield e}dispose(){this.dispatchEvent({type:"dispose"})}traverse(e){e(this);for(const t of this.getChildren())t.traverse(e)}getCacheKey(e=!1){return e=e||this.version!==this._cacheKeyVersion,(e===!0||this._cacheKey===null)&&(this._cacheKey=xp(jx(this,e),this.customCacheKey()),this._cacheKeyVersion=this.version),this._cacheKey}customCacheKey(){return 0}getScope(){return this}getHash(){return this.uuid}getUpdateType(){return this.updateType}getUpdateBeforeType(){return this.updateBeforeType}getUpdateAfterType(){return this.updateAfterType}getElementType(e){const t=this.getNodeType(e);return e.getElementType(t)}getNodeType(e){const t=e.getNodeProperties(this);return t.outputNode?t.outputNode.getNodeType(e):this.nodeType}getShared(e){const t=this.getHash(e);return e.getNodeFromHash(t)||this}setup(e){const t=e.getNodeProperties(this);let n=0;for(const i of this.getChildren())t["node"+n++]=i;return t.outputNode||null}analyze(e){if(e.increaseUsage(this)===1){const n=e.getNodeProperties(this);for(const i of Object.values(n))i&&i.isNode===!0&&i.build(e)}}generate(e,t){const{outputNode:n}=e.getNodeProperties(this);if(n&&n.isNode===!0)return n.build(e,t)}updateBefore(){console.warn("Abstract function.")}updateAfter(){console.warn("Abstract function.")}update(){console.warn("Abstract function.")}build(e,t=null){const n=this.getShared(e);if(this!==n)return n.build(e,t);e.addNode(this),e.addChain(this);let i=null;const r=e.getBuildStage();if(r==="setup"){this.updateReference(e);const o=e.getNodeProperties(this);if(o.initialized!==!0){o.initialized=!0;const a=this.setup(e),c=a&&a.isNode===!0;for(const l of Object.values(o))l&&l.isNode===!0&&l.build(e);c&&a.build(e),o.outputNode=a}}else if(r==="analyze")this.analyze(e);else if(r==="generate")if(this.generate.length===1){const a=this.getNodeType(e),c=e.getDataFromNode(this);i=c.snippet,i===void 0?(i=this.generate(e)||"",c.snippet=i):c.flowCodes!==void 0&&e.context.nodeBlock!==void 0&&e.addFlowCodeHierarchy(this,e.context.nodeBlock),i=e.format(i,a,t)}else i=this.generate(e,t)||"";return e.removeChain(this),e.addSequentialNode(this),i}getSerializeChildren(){return Hu(this)}serialize(e){const t=this.getSerializeChildren(),n={};for(const{property:i,index:r,childNode:o}of t)r!==void 0?(n[i]===void 0&&(n[i]=Number.isInteger(r)?[]:{}),n[i][r]=o.toJSON(e.meta).uuid):n[i]=o.toJSON(e.meta).uuid;Object.keys(n).length>0&&(e.inputNodes=n)}deserialize(e){if(e.inputNodes!==void 0){const t=e.meta.nodes;for(const n in e.inputNodes)if(Array.isArray(e.inputNodes[n])){const i=[];for(const r of e.inputNodes[n])i.push(t[r]);this[n]=i}else if(typeof e.inputNodes[n]=="object"){const i={};for(const r in e.inputNodes[n]){const o=e.inputNodes[n][r];i[r]=t[o]}this[n]=i}else{const i=e.inputNodes[n];this[n]=t[i]}}}toJSON(e){const{uuid:t,type:n}=this,i=e===void 0||typeof e=="string";i&&(e={textures:{},images:{},nodes:{}});let r=e.nodes[t];r===void 0&&(r={uuid:t,type:n,meta:e,metadata:{version:4.6,type:"Node",generator:"Node.toJSON"}},i!==!0&&(e.nodes[r.uuid]=r),this.serialize(r),delete r.meta);function o(a){const c=[];for(const l in a){const u=a[l];delete u.metadata,c.push(u)}return c}if(i){const a=o(e.textures),c=o(e.images),l=o(e.nodes);a.length>0&&(r.textures=a),c.length>0&&(r.images=c),l.length>0&&(r.nodes=l)}return r}}class Ro extends Ve{static get type(){return"ArrayElementNode"}constructor(e,t){super(),this.node=e,this.indexNode=t,this.isArrayElementNode=!0}getNodeType(e){return this.node.getElementType(e)}generate(e){const t=this.node.build(e),n=this.indexNode.build(e,"uint");return`${t}[ ${n} ]`}}class sy extends Ve{static get type(){return"ConvertNode"}constructor(e,t){super(),this.node=e,this.convertTo=t}getNodeType(e){const t=this.node.getNodeType(e);let n=null;for(const i of this.convertTo.split("|"))(n===null||e.getTypeLength(t)===e.getTypeLength(i))&&(n=i);return n}serialize(e){super.serialize(e),e.convertTo=this.convertTo}deserialize(e){super.deserialize(e),this.convertTo=e.convertTo}generate(e,t){const n=this.node,i=this.getNodeType(e),r=n.build(e,i);return e.format(r,i,t)}}class ln extends Ve{static get type(){return"TempNode"}constructor(e=null){super(e),this.isTempNode=!0}hasDependencies(e){return e.getDataFromNode(this).usageCount>1}build(e,t){if(e.getBuildStage()==="generate"){const i=e.getVectorType(this.getNodeType(e,t)),r=e.getDataFromNode(this);if(r.propertyName!==void 0)return e.format(r.propertyName,i,t);if(i!=="void"&&t!=="void"&&this.hasDependencies(e)){const o=super.build(e,i),a=e.getVarFromNode(this,null,i),c=e.getPropertyName(a);return e.addLineFlowCode(`${c} = ${o}`,this),r.snippet=o,r.propertyName=c,e.format(r.propertyName,i,t)}}return super.build(e,t)}}class AN extends ln{static get type(){return"JoinNode"}constructor(e=[],t=null){super(t),this.nodes=e}getNodeType(e){return this.nodeType!==null?e.getVectorType(this.nodeType):e.getTypeFromLength(this.nodes.reduce((t,n)=>t+e.getTypeLength(n.getNodeType(e)),0))}generate(e,t){const n=this.getNodeType(e),i=this.nodes,r=e.getComponentType(n),o=[];for(const c of i){let l=c.build(e);const u=e.getComponentType(c.getNodeType(e));u!==r&&(l=e.format(l,u,r)),o.push(l)}const a=`${e.getType(n)}( ${o.join(", ")} )`;return e.format(a,n,t)}}const RN=Ao.join("");class df extends Ve{static get type(){return"SplitNode"}constructor(e,t="x"){super(),this.node=e,this.components=t,this.isSplitNode=!0}getVectorLength(){let e=this.components.length;for(const t of this.components)e=Math.max(Ao.indexOf(t)+1,e);return e}getComponentType(e){return e.getComponentType(this.node.getNodeType(e))}getNodeType(e){return e.getTypeFromLength(this.components.length,this.getComponentType(e))}generate(e,t){const n=this.node,i=e.getTypeLength(n.getNodeType(e));let r=null;if(i>1){let o=null;this.getVectorLength()>=i&&(o=e.getTypeFromLength(this.getVectorLength(),this.getComponentType(e)));const c=n.build(e,o);this.components.length===i&&this.components===RN.slice(0,this.components.length)?r=e.format(c,o,t):r=e.format(`${c}.${this.components}`,this.getNodeType(e),t)}else r=n.build(e,t);return r}serialize(e){super.serialize(e),e.components=this.components}deserialize(e){super.deserialize(e),this.components=e.components}}class wN extends ln{static get type(){return"SetNode"}constructor(e,t,n){super(),this.sourceNode=e,this.components=t,this.targetNode=n}getNodeType(e){return this.sourceNode.getNodeType(e)}generate(e){const{sourceNode:t,components:n,targetNode:i}=this,r=this.getNodeType(e),o=e.getComponentType(i.getNodeType(e)),a=e.getTypeFromLength(n.length,o),c=i.build(e,a),l=t.build(e,r),u=e.getTypeLength(r),h=[];for(let d=0;d<u;d++){const f=Ao[d];f===n[0]?(h.push(c),d+=n.length-1):h.push(l+"."+f)}return`${e.getType(r)}( ${h.join(", ")} )`}}class NN extends ln{static get type(){return"FlipNode"}constructor(e,t){super(),this.sourceNode=e,this.components=t}getNodeType(e){return this.sourceNode.getNodeType(e)}generate(e){const{components:t,sourceNode:n}=this,i=this.getNodeType(e),r=n.build(e),o=e.getVarFromNode(this),a=e.getPropertyName(o);e.addLineFlowCode(a+" = "+r,this);const c=e.getTypeLength(i),l=[];let u=0;for(let h=0;h<c;h++){const d=Ao[h];d===t[u]?(l.push("1.0 - "+(a+"."+d)),u++):l.push(a+"."+d)}return`${e.getType(i)}( ${l.join(", ")} )`}}class yp extends Ve{static get type(){return"InputNode"}constructor(e,t=null){super(t),this.isInputNode=!0,this.value=e,this.precision=null}getNodeType(){return this.nodeType===null?xr(this.value):this.nodeType}getInputType(e){return this.getNodeType(e)}setPrecision(e){return this.precision=e,this}serialize(e){super.serialize(e),e.value=this.value,this.value&&this.value.toArray&&(e.value=this.value.toArray()),e.valueType=xr(this.value),e.nodeType=this.nodeType,e.valueType==="ArrayBuffer"&&(e.value=ty(e.value)),e.precision=this.precision}deserialize(e){super.deserialize(e),this.nodeType=e.nodeType,this.value=Array.isArray(e.value)?Jx(e.valueType,...e.value):e.value,this.precision=e.precision||null,this.value&&this.value.fromArray&&(this.value=this.value.fromArray(e.value))}generate(){console.warn("Abstract function.")}}class Ji extends yp{static get type(){return"ConstNode"}constructor(e,t=null){super(e,t),this.isConstNode=!0}generateConst(e){return e.generateConst(this.getNodeType(e),this.value)}generate(e,t){const n=this.getNodeType(e);return e.format(this.generateConst(e),n,t)}}let ja=null;const ra=new Map;function Y(s,e){if(ra.has(s)){console.warn(`Redefinition of method chaining ${s}`);return}if(typeof e!="function")throw new Error(`Node element ${s} is not a function`);ra.set(s,e)}const ry=s=>s.replace(/r|s/g,"x").replace(/g|t/g,"y").replace(/b|p/g,"z").replace(/a|q/g,"w"),$g=s=>ry(s).split("").sort().join(""),oy={setup(s,e){const t=e.shift();return s(El(t),...e)},get(s,e,t){if(typeof e=="string"&&s[e]===void 0){if(s.isStackNode!==!0&&e==="assign")return(...n)=>(ja.assign(t,...n),t);if(ra.has(e)){const n=ra.get(e);return s.isStackNode?(...i)=>t.add(n(...i)):(...i)=>n(t,...i)}else{if(e==="self")return s;if(e.endsWith("Assign")&&ra.has(e.slice(0,e.length-6))){const n=ra.get(e.slice(0,e.length-6));return s.isStackNode?(...i)=>t.assign(i[0],n(...i)):(...i)=>t.assign(n(t,...i))}else{if(/^[xyzwrgbastpq]{1,4}$/.test(e)===!0)return e=ry(e),J(new df(t,e));if(/^set[XYZWRGBASTPQ]{1,4}$/.test(e)===!0)return e=$g(e.slice(3).toLowerCase()),n=>J(new wN(s,e,n));if(/^flip[XYZWRGBASTPQ]{1,4}$/.test(e)===!0)return e=$g(e.slice(4).toLowerCase()),()=>J(new NN(J(s),e));if(e==="width"||e==="height"||e==="depth")return e==="width"?e="x":e==="height"?e="y":e==="depth"&&(e="z"),J(new df(s,e));if(/^\d+$/.test(e)===!0)return J(new Ro(t,new Ji(Number(e),"uint")))}}}return Reflect.get(s,e,t)},set(s,e,t,n){return typeof e=="string"&&s[e]===void 0&&(/^[xyzwrgbastpq]{1,4}$/.test(e)===!0||e==="width"||e==="height"||e==="depth"||/^\d+$/.test(e)===!0)?(n[e].assign(t),!0):Reflect.set(s,e,t,n)}},yd=new WeakMap,Xg=new WeakMap,CN=function(s,e=null){const t=xr(s);if(t==="node"){let n=yd.get(s);return n===void 0&&(n=new Proxy(s,oy),yd.set(s,n),yd.set(n,n)),n}else{if(e===null&&(t==="float"||t==="boolean")||t&&t!=="shader"&&t!=="string")return J(ff(s,e));if(t==="shader")return z(s)}return s},PN=function(s,e=null){for(const t in s)s[t]=J(s[t],e);return s},DN=function(s,e=null){const t=s.length;for(let n=0;n<t;n++)s[n]=J(s[n],e);return s},LN=function(s,e=null,t=null,n=null){const i=r=>J(n!==null?Object.assign(r,n):r);return e===null?(...r)=>i(new s(...po(r))):t!==null?(t=J(t),(...r)=>i(new s(e,...po(r),t))):(...r)=>i(new s(e,...po(r)))},UN=function(s,...e){return J(new s(...po(e)))};class IN extends Ve{constructor(e,t){super(),this.shaderNode=e,this.inputNodes=t}getNodeType(e){return this.shaderNode.nodeType||this.getOutputNode(e).getNodeType(e)}call(e){const{shaderNode:t,inputNodes:n}=this,i=e.getNodeProperties(t);if(i.onceOutput)return i.onceOutput;let r=null;if(t.layout){let o=Xg.get(e.constructor);o===void 0&&(o=new WeakMap,Xg.set(e.constructor,o));let a=o.get(t);a===void 0&&(a=J(e.buildFunctionNode(t)),o.set(t,a)),e.currentFunctionNode!==null&&e.currentFunctionNode.includes.push(a),r=J(a.call(n))}else{const o=t.jsFunc,a=n!==null?o(n,e):o(e);r=J(a)}return t.once&&(i.onceOutput=r),r}getOutputNode(e){const t=e.getNodeProperties(this);return t.outputNode===null&&(t.outputNode=this.setupOutput(e)),t.outputNode}setup(e){return this.getOutputNode(e)}setupOutput(e){return e.addStack(),e.stack.outputNode=this.call(e),e.removeStack()}generate(e,t){return this.getOutputNode(e).build(e,t)}}class FN extends Ve{constructor(e,t){super(t),this.jsFunc=e,this.layout=null,this.global=!0,this.once=!1}setLayout(e){return this.layout=e,this}call(e=null){return El(e),J(new IN(this,e))}setup(){return this.call()}}const BN=[!1,!0],ON=[0,1,2,3],VN=[-1,-2],ay=[.5,1.5,1/3,1e-6,1e6,Math.PI,Math.PI*2,1/Math.PI,2/Math.PI,1/(Math.PI*2),Math.PI/2],vp=new Map;for(const s of BN)vp.set(s,new Ji(s));const Tp=new Map;for(const s of ON)Tp.set(s,new Ji(s,"uint"));const Sp=new Map([...Tp].map(s=>new Ji(s.value,"int")));for(const s of VN)Sp.set(s,new Ji(s,"int"));const gh=new Map([...Sp].map(s=>new Ji(s.value)));for(const s of ay)gh.set(s,new Ji(s));for(const s of ay)gh.set(-s,new Ji(-s));const _h={bool:vp,uint:Tp,ints:Sp,float:gh},qg=new Map([...vp,...gh]),ff=(s,e)=>qg.has(s)?qg.get(s):s.isNode===!0?s:new Ji(s,e),GN=s=>{try{return s.getNodeType()}catch{return}},gn=function(s,e=null){return(...t)=>{if((t.length===0||!["bool","float","int","uint"].includes(s)&&t.every(i=>typeof i!="object"))&&(t=[Jx(s,...t)]),t.length===1&&e!==null&&e.has(t[0]))return J(e.get(t[0]));if(t.length===1){const i=ff(t[0],s);return GN(i)===s?J(i):J(new sy(i,s))}const n=t.map(i=>ff(i));return J(new AN(n,s))}},il=s=>typeof s=="object"&&s!==null?s.value:s,cy=s=>s!=null?s.nodeType||s.convertTo||(typeof s=="string"?s:null):null;function Cc(s,e){return new Proxy(new FN(s,e),oy)}const J=(s,e=null)=>CN(s,e),El=(s,e=null)=>new PN(s,e),po=(s,e=null)=>new DN(s,e),j=(...s)=>new LN(...s),de=(...s)=>new UN(...s),z=(s,e)=>{const t=new Cc(s,e),n=(...i)=>{let r;return El(i),i[0]&&i[0].isNode?r=[...i]:r=i[0],t.call(r)};return n.shaderNode=t,n.setLayout=i=>(t.setLayout(i),n),n.once=()=>(t.once=!0,n),n},zN=(...s)=>(console.warn("TSL.ShaderNode: tslFn() has been renamed to Fn()."),z(...s));Y("toGlobal",s=>(s.global=!0,s));const sl=s=>{ja=s},bp=()=>ja,it=(...s)=>ja.If(...s);function ly(s){return ja&&ja.add(s),s}Y("append",ly);const uy=new gn("color"),A=new gn("float",_h.float),C=new gn("int",_h.ints),me=new gn("uint",_h.uint),Ys=new gn("bool",_h.bool),se=new gn("vec2"),xn=new gn("ivec2"),hy=new gn("uvec2"),dy=new gn("bvec2"),I=new gn("vec3"),fy=new gn("ivec3"),rc=new gn("uvec3"),Mp=new gn("bvec3"),Ue=new gn("vec4"),py=new gn("ivec4"),my=new gn("uvec4"),gy=new gn("bvec4"),xh=new gn("mat2"),Wn=new gn("mat3"),mo=new gn("mat4"),kN=(s="")=>J(new Ji(s,"string")),HN=s=>J(new Ji(s,"ArrayBuffer"));Y("toColor",uy);Y("toFloat",A);Y("toInt",C);Y("toUint",me);Y("toBool",Ys);Y("toVec2",se);Y("toIVec2",xn);Y("toUVec2",hy);Y("toBVec2",dy);Y("toVec3",I);Y("toIVec3",fy);Y("toUVec3",rc);Y("toBVec3",Mp);Y("toVec4",Ue);Y("toIVec4",py);Y("toUVec4",my);Y("toBVec4",gy);Y("toMat2",xh);Y("toMat3",Wn);Y("toMat4",mo);const _y=j(Ro),xy=(s,e)=>J(new sy(J(s),e)),WN=(s,e)=>J(new df(J(s),e));Y("element",_y);Y("convert",xy);class yy extends Ve{static get type(){return"UniformGroupNode"}constructor(e,t=!1,n=1){super("string"),this.name=e,this.shared=t,this.order=n,this.isUniformGroup=!0}serialize(e){super.serialize(e),e.name=this.name,e.version=this.version,e.shared=this.shared}deserialize(e){super.deserialize(e),this.name=e.name,this.version=e.version,this.shared=e.shared}}const vy=s=>new yy(s),Ep=(s,e=0)=>new yy(s,!0,e),Ty=Ep("frame"),ke=Ep("render"),Ap=vy("object");class Al extends yp{static get type(){return"UniformNode"}constructor(e,t=null){super(e,t),this.isUniformNode=!0,this.name="",this.groupNode=Ap}label(e){return this.name=e,this}setGroup(e){return this.groupNode=e,this}getGroup(){return this.groupNode}getUniformHash(e){return this.getHash(e)}onUpdate(e,t){const n=this.getSelf();return e=e.bind(n),super.onUpdate(i=>{const r=e(i,n);r!==void 0&&(this.value=r)},t)}generate(e,t){const n=this.getNodeType(e),i=this.getUniformHash(e);let r=e.getNodeFromHash(i);r===void 0&&(e.setHashNode(this,i),r=this);const o=r.getInputType(e),a=e.getUniformFromNode(r,o,e.shaderStage,this.name||e.context.label),c=e.getPropertyName(a);return e.context.label!==void 0&&delete e.context.label,e.format(c,n,t)}}const Ie=(s,e)=>{const t=cy(e||s),n=s&&s.isNode===!0?s.node&&s.node.value||s.value:s;return J(new Al(n,t))};class At extends Ve{static get type(){return"PropertyNode"}constructor(e,t=null,n=!1){super(e),this.name=t,this.varying=n,this.isPropertyNode=!0}getHash(e){return this.name||super.getHash(e)}isGlobal(){return!0}generate(e){let t;return this.varying===!0?(t=e.getVaryingFromNode(this,this.name),t.needsInterpolation=!0):t=e.getVarFromNode(this,this.name),e.getPropertyName(t)}}const Sy=(s,e)=>J(new At(s,e)),rl=(s,e)=>J(new At(s,e,!0)),bt=de(At,"vec4","DiffuseColor"),pf=de(At,"vec3","EmissiveColor"),as=de(At,"float","Roughness"),ol=de(At,"float","Metalness"),Wu=de(At,"float","Clearcoat"),al=de(At,"float","ClearcoatRoughness"),Jr=de(At,"vec3","Sheen"),yh=de(At,"float","SheenRoughness"),vh=de(At,"float","Iridescence"),Rp=de(At,"float","IridescenceIOR"),wp=de(At,"float","IridescenceThickness"),$u=de(At,"float","AlphaT"),lr=de(At,"float","Anisotropy"),Pc=de(At,"vec3","AnisotropyT"),go=de(At,"vec3","AnisotropyB"),Qn=de(At,"color","SpecularColor"),cl=de(At,"float","SpecularF90"),Xu=de(At,"float","Shininess"),ll=de(At,"vec4","Output"),Cu=de(At,"float","dashSize"),mf=de(At,"float","gapSize"),$N=de(At,"float","pointWidth"),Dc=de(At,"float","IOR"),qu=de(At,"float","Transmission"),Np=de(At,"float","Thickness"),Cp=de(At,"float","AttenuationDistance"),Pp=de(At,"color","AttenuationColor"),Dp=de(At,"float","Dispersion");class XN extends ln{static get type(){return"AssignNode"}constructor(e,t){super(),this.targetNode=e,this.sourceNode=t}hasDependencies(){return!1}getNodeType(e,t){return t!=="void"?this.targetNode.getNodeType(e):"void"}needsSplitAssign(e){const{targetNode:t}=this;if(e.isAvailable("swizzleAssign")===!1&&t.isSplitNode&&t.components.length>1){const n=e.getTypeLength(t.node.getNodeType(e));return Ao.join("").slice(0,n)!==t.components}return!1}generate(e,t){const{targetNode:n,sourceNode:i}=this,r=this.needsSplitAssign(e),o=n.getNodeType(e),a=n.context({assign:!0}).build(e),c=i.build(e,o),l=i.getNodeType(e),u=e.getDataFromNode(this);let h;if(u.initialized===!0)t!=="void"&&(h=a);else if(r){const d=e.getVarFromNode(this,null,o),f=e.getPropertyName(d);e.addLineFlowCode(`${f} = ${c}`,this);const m=n.node.context({assign:!0}).build(e);for(let _=0;_<n.components.length;_++){const g=n.components[_];e.addLineFlowCode(`${m}.${g} = ${f}[ ${_} ]`,this)}t!=="void"&&(h=a)}else h=`${a} = ${c}`,(t==="void"||l==="void")&&(e.addLineFlowCode(h,this),t!=="void"&&(h=a));return u.initialized=!0,e.format(h,o,t)}}const by=j(XN);Y("assign",by);class qN extends ln{static get type(){return"FunctionCallNode"}constructor(e=null,t={}){super(),this.functionNode=e,this.parameters=t}setParameters(e){return this.parameters=e,this}getParameters(){return this.parameters}getNodeType(e){return this.functionNode.getNodeType(e)}generate(e){const t=[],n=this.functionNode,i=n.getInputs(e),r=this.parameters,o=(c,l)=>{const u=l.type,h=u==="pointer";let d;return h?d="&"+c.build(e):d=c.build(e,u),d};if(Array.isArray(r))for(let c=0;c<r.length;c++)t.push(o(r[c],i[c]));else for(const c of i){const l=r[c.name];if(l!==void 0)t.push(o(l,c));else throw new Error(`FunctionCallNode: Input '${c.name}' not found in FunctionNode.`)}return`${n.build(e,"property")}( ${t.join(", ")} )`}}const My=(s,...e)=>(e=e.length>1||e[0]&&e[0].isNode===!0?po(e):El(e[0]),J(new qN(J(s),e)));Y("call",My);class $t extends ln{static get type(){return"OperatorNode"}constructor(e,t,n,...i){if(super(),i.length>0){let r=new $t(e,t,n);for(let o=0;o<i.length-1;o++)r=new $t(e,r,i[o]);t=r,n=i[i.length-1]}this.op=e,this.aNode=t,this.bNode=n}getNodeType(e,t){const n=this.op,i=this.aNode,r=this.bNode,o=i.getNodeType(e),a=typeof r<"u"?r.getNodeType(e):null;if(o==="void"||a==="void")return"void";if(n==="%")return o;if(n==="~"||n==="&"||n==="|"||n==="^"||n===">>"||n==="<<")return e.getIntegerType(o);if(n==="!"||n==="=="||n==="&&"||n==="||"||n==="^^")return"bool";if(n==="<"||n===">"||n==="<="||n===">="){const c=t?e.getTypeLength(t):Math.max(e.getTypeLength(o),e.getTypeLength(a));return c>1?`bvec${c}`:"bool"}else return o==="float"&&e.isMatrix(a)?a:e.isMatrix(o)&&e.isVector(a)?e.getVectorFromMatrix(o):e.isVector(o)&&e.isMatrix(a)?e.getVectorFromMatrix(a):e.getTypeLength(a)>e.getTypeLength(o)?a:o}generate(e,t){const n=this.op,i=this.aNode,r=this.bNode,o=this.getNodeType(e,t);let a=null,c=null;o!=="void"?(a=i.getNodeType(e),c=typeof r<"u"?r.getNodeType(e):null,n==="<"||n===">"||n==="<="||n===">="||n==="=="?e.isVector(a)?c=a:a!==c&&(a=c="float"):n===">>"||n==="<<"?(a=o,c=e.changeComponentType(c,"uint")):e.isMatrix(a)&&e.isVector(c)?c=e.getVectorFromMatrix(a):e.isVector(a)&&e.isMatrix(c)?a=e.getVectorFromMatrix(c):a=c=o):a=c=o;const l=i.build(e,a),u=typeof r<"u"?r.build(e,c):null,h=e.getTypeLength(t),d=e.getFunctionOperator(n);if(t!=="void")return n==="<"&&h>1?e.useComparisonMethod?e.format(`${e.getMethod("lessThan",t)}( ${l}, ${u} )`,o,t):e.format(`( ${l} < ${u} )`,o,t):n==="<="&&h>1?e.useComparisonMethod?e.format(`${e.getMethod("lessThanEqual",t)}( ${l}, ${u} )`,o,t):e.format(`( ${l} <= ${u} )`,o,t):n===">"&&h>1?e.useComparisonMethod?e.format(`${e.getMethod("greaterThan",t)}( ${l}, ${u} )`,o,t):e.format(`( ${l} > ${u} )`,o,t):n===">="&&h>1?e.useComparisonMethod?e.format(`${e.getMethod("greaterThanEqual",t)}( ${l}, ${u} )`,o,t):e.format(`( ${l} >= ${u} )`,o,t):n==="!"||n==="~"?e.format(`(${n}${l})`,a,t):d?e.format(`${d}( ${l}, ${u} )`,o,t):e.format(`( ${l} ${n} ${u} )`,o,t);if(a!=="void")return d?e.format(`${d}( ${l}, ${u} )`,o,t):e.format(`${l} ${n} ${u}`,o,t)}serialize(e){super.serialize(e),e.op=this.op}deserialize(e){super.deserialize(e),this.op=e.op}}const cn=j($t,"+"),pt=j($t,"-"),Ke=j($t,"*"),Zi=j($t,"/"),Lp=j($t,"%"),Ey=j($t,"=="),Ay=j($t,"!="),Ry=j($t,"<"),Up=j($t,">"),wy=j($t,"<="),Ny=j($t,">="),Cy=j($t,"&&"),Py=j($t,"||"),Dy=j($t,"!"),Ly=j($t,"^^"),Uy=j($t,"&"),Iy=j($t,"~"),Fy=j($t,"|"),By=j($t,"^"),Oy=j($t,"<<"),Vy=j($t,">>");Y("add",cn);Y("sub",pt);Y("mul",Ke);Y("div",Zi);Y("modInt",Lp);Y("equal",Ey);Y("notEqual",Ay);Y("lessThan",Ry);Y("greaterThan",Up);Y("lessThanEqual",wy);Y("greaterThanEqual",Ny);Y("and",Cy);Y("or",Py);Y("not",Dy);Y("xor",Ly);Y("bitAnd",Uy);Y("bitNot",Iy);Y("bitOr",Fy);Y("bitXor",By);Y("shiftLeft",Oy);Y("shiftRight",Vy);const Gy=(...s)=>(console.warn("TSL.OperatorNode: .remainder() has been renamed to .modInt()."),Lp(...s));Y("remainder",Gy);class V extends ln{static get type(){return"MathNode"}constructor(e,t,n=null,i=null){super(),this.method=e,this.aNode=t,this.bNode=n,this.cNode=i}getInputType(e){const t=this.aNode.getNodeType(e),n=this.bNode?this.bNode.getNodeType(e):null,i=this.cNode?this.cNode.getNodeType(e):null,r=e.isMatrix(t)?0:e.getTypeLength(t),o=e.isMatrix(n)?0:e.getTypeLength(n),a=e.isMatrix(i)?0:e.getTypeLength(i);return r>o&&r>a?t:o>a?n:a>r?i:t}getNodeType(e){const t=this.method;return t===V.LENGTH||t===V.DISTANCE||t===V.DOT?"float":t===V.CROSS?"vec3":t===V.ALL?"bool":t===V.EQUALS?e.changeComponentType(this.aNode.getNodeType(e),"bool"):t===V.MOD?this.aNode.getNodeType(e):this.getInputType(e)}generate(e,t){let n=this.method;const i=this.getNodeType(e),r=this.getInputType(e),o=this.aNode,a=this.bNode,c=this.cNode,l=e.renderer.coordinateSystem;if(n===V.TRANSFORM_DIRECTION){let u=o,h=a;e.isMatrix(u.getNodeType(e))?h=Ue(I(h),0):u=Ue(I(u),0);const d=Ke(u,h).xyz;return js(d).build(e,t)}else{if(n===V.NEGATE)return e.format("( - "+o.build(e,r)+" )",i,t);if(n===V.ONE_MINUS)return pt(1,o).build(e,t);if(n===V.RECIPROCAL)return Zi(1,o).build(e,t);if(n===V.DIFFERENCE)return Ft(pt(o,a)).build(e,t);{const u=[];return n===V.CROSS||n===V.MOD?u.push(o.build(e,i),a.build(e,i)):l===ni&&n===V.STEP?u.push(o.build(e,e.getTypeLength(o.getNodeType(e))===1?"float":r),a.build(e,r)):l===ni&&(n===V.MIN||n===V.MAX)||n===V.MOD?u.push(o.build(e,r),a.build(e,e.getTypeLength(a.getNodeType(e))===1?"float":r)):n===V.REFRACT?u.push(o.build(e,r),a.build(e,r),c.build(e,"float")):n===V.MIX?u.push(o.build(e,r),a.build(e,r),c.build(e,e.getTypeLength(c.getNodeType(e))===1?"float":r)):(l===_s&&n===V.ATAN&&a!==null&&(n="atan2"),u.push(o.build(e,r)),a!==null&&u.push(a.build(e,r)),c!==null&&u.push(c.build(e,r))),e.format(`${e.getMethod(n,i)}( ${u.join(", ")} )`,i,t)}}}serialize(e){super.serialize(e),e.method=this.method}deserialize(e){super.deserialize(e),this.method=e.method}}V.ALL="all";V.ANY="any";V.RADIANS="radians";V.DEGREES="degrees";V.EXP="exp";V.EXP2="exp2";V.LOG="log";V.LOG2="log2";V.SQRT="sqrt";V.INVERSE_SQRT="inversesqrt";V.FLOOR="floor";V.CEIL="ceil";V.NORMALIZE="normalize";V.FRACT="fract";V.SIN="sin";V.COS="cos";V.TAN="tan";V.ASIN="asin";V.ACOS="acos";V.ATAN="atan";V.ABS="abs";V.SIGN="sign";V.LENGTH="length";V.NEGATE="negate";V.ONE_MINUS="oneMinus";V.DFDX="dFdx";V.DFDY="dFdy";V.ROUND="round";V.RECIPROCAL="reciprocal";V.TRUNC="trunc";V.FWIDTH="fwidth";V.TRANSPOSE="transpose";V.BITCAST="bitcast";V.EQUALS="equals";V.MIN="min";V.MAX="max";V.MOD="mod";V.STEP="step";V.REFLECT="reflect";V.DISTANCE="distance";V.DIFFERENCE="difference";V.DOT="dot";V.CROSS="cross";V.POW="pow";V.TRANSFORM_DIRECTION="transformDirection";V.MIX="mix";V.CLAMP="clamp";V.REFRACT="refract";V.SMOOTHSTEP="smoothstep";V.FACEFORWARD="faceforward";const zy=A(1e-6),YN=A(1e6),Yu=A(Math.PI),jN=A(Math.PI*2),Ip=j(V,V.ALL),ky=j(V,V.ANY),Hy=j(V,V.RADIANS),Wy=j(V,V.DEGREES),Fp=j(V,V.EXP),Ka=j(V,V.EXP2),Th=j(V,V.LOG),ds=j(V,V.LOG2),Es=j(V,V.SQRT),Bp=j(V,V.INVERSE_SQRT),fs=j(V,V.FLOOR),Sh=j(V,V.CEIL),js=j(V,V.NORMALIZE),Js=j(V,V.FRACT),yi=j(V,V.SIN),Us=j(V,V.COS),$y=j(V,V.TAN),Xy=j(V,V.ASIN),qy=j(V,V.ACOS),Op=j(V,V.ATAN),Ft=j(V,V.ABS),ul=j(V,V.SIGN),$s=j(V,V.LENGTH),Yy=j(V,V.NEGATE),jy=j(V,V.ONE_MINUS),Vp=j(V,V.DFDX),Gp=j(V,V.DFDY),Ky=j(V,V.ROUND),Zy=j(V,V.RECIPROCAL),zp=j(V,V.TRUNC),Qy=j(V,V.FWIDTH),Jy=j(V,V.TRANSPOSE),KN=j(V,V.BITCAST),ev=j(V,V.EQUALS),ai=j(V,V.MIN),en=j(V,V.MAX),kp=j(V,V.MOD),bh=j(V,V.STEP),tv=j(V,V.REFLECT),nv=j(V,V.DISTANCE),iv=j(V,V.DIFFERENCE),Dr=j(V,V.DOT),Mh=j(V,V.CROSS),ji=j(V,V.POW),Hp=j(V,V.POW,2),sv=j(V,V.POW,3),rv=j(V,V.POW,4),ov=j(V,V.TRANSFORM_DIRECTION),av=s=>Ke(ul(s),ji(Ft(s),1/3)),cv=s=>Dr(s,s),Mt=j(V,V.MIX),xs=(s,e=0,t=1)=>J(new V(V.CLAMP,J(s),J(e),J(t))),lv=s=>xs(s),Wp=j(V,V.REFRACT),Ks=j(V,V.SMOOTHSTEP),$p=j(V,V.FACEFORWARD),uv=z(([s])=>{const n=43758.5453,i=Dr(s.xy,se(12.9898,78.233)),r=kp(i,Yu);return Js(yi(r).mul(n))}),hv=(s,e,t)=>Mt(e,t,s),dv=(s,e,t)=>Ks(e,t,s),fv=(s,e)=>(console.warn('THREE.TSL: "atan2" is overloaded. Use "atan" instead.'),Op(s,e)),ZN=$p,QN=Bp;Y("all",Ip);Y("any",ky);Y("equals",ev);Y("radians",Hy);Y("degrees",Wy);Y("exp",Fp);Y("exp2",Ka);Y("log",Th);Y("log2",ds);Y("sqrt",Es);Y("inverseSqrt",Bp);Y("floor",fs);Y("ceil",Sh);Y("normalize",js);Y("fract",Js);Y("sin",yi);Y("cos",Us);Y("tan",$y);Y("asin",Xy);Y("acos",qy);Y("atan",Op);Y("abs",Ft);Y("sign",ul);Y("length",$s);Y("lengthSq",cv);Y("negate",Yy);Y("oneMinus",jy);Y("dFdx",Vp);Y("dFdy",Gp);Y("round",Ky);Y("reciprocal",Zy);Y("trunc",zp);Y("fwidth",Qy);Y("atan2",fv);Y("min",ai);Y("max",en);Y("mod",kp);Y("step",bh);Y("reflect",tv);Y("distance",nv);Y("dot",Dr);Y("cross",Mh);Y("pow",ji);Y("pow2",Hp);Y("pow3",sv);Y("pow4",rv);Y("transformDirection",ov);Y("mix",hv);Y("clamp",xs);Y("refract",Wp);Y("smoothstep",dv);Y("faceForward",$p);Y("difference",iv);Y("saturate",lv);Y("cbrt",av);Y("transpose",Jy);Y("rand",uv);class JN extends Ve{static get type(){return"ConditionalNode"}constructor(e,t,n=null){super(),this.condNode=e,this.ifNode=t,this.elseNode=n}getNodeType(e){const{ifNode:t,elseNode:n}=e.getNodeProperties(this);if(t===void 0)return this.setup(e),this.getNodeType(e);const i=t.getNodeType(e);if(n!==null){const r=n.getNodeType(e);if(e.getTypeLength(r)>e.getTypeLength(i))return r}return i}setup(e){const t=this.condNode.cache(),n=this.ifNode.cache(),i=this.elseNode?this.elseNode.cache():null,r=e.context.nodeBlock;e.getDataFromNode(n).parentNodeBlock=r,i!==null&&(e.getDataFromNode(i).parentNodeBlock=r);const o=e.getNodeProperties(this);o.condNode=t,o.ifNode=n.context({nodeBlock:n}),o.elseNode=i?i.context({nodeBlock:i}):null}generate(e,t){const n=this.getNodeType(e),i=e.getDataFromNode(this);if(i.nodeProperty!==void 0)return i.nodeProperty;const{condNode:r,ifNode:o,elseNode:a}=e.getNodeProperties(this),c=t!=="void",l=c?Sy(n).build(e):"";i.nodeProperty=l;const u=r.build(e,"bool");e.addFlowCode(`
${e.tab}if ( ${u} ) {

`).addFlowTab();let h=o.build(e,n);if(h&&(c?h=l+" = "+h+";":h="return "+h+";"),e.removeFlowTab().addFlowCode(e.tab+"	"+h+`

`+e.tab+"}"),a!==null){e.addFlowCode(` else {

`).addFlowTab();let d=a.build(e,n);d&&(c?d=l+" = "+d+";":d="return "+d+";"),e.removeFlowTab().addFlowCode(e.tab+"	"+d+`

`+e.tab+`}

`)}else e.addFlowCode(`

`);return e.format(l,n,t)}}const Cn=j(JN);Y("select",Cn);const pv=(...s)=>(console.warn("TSL.ConditionalNode: cond() has been renamed to select()."),Cn(...s));Y("cond",pv);class mv extends Ve{static get type(){return"ContextNode"}constructor(e,t={}){super(),this.isContextNode=!0,this.node=e,this.value=t}getScope(){return this.node.getScope()}getNodeType(e){return this.node.getNodeType(e)}analyze(e){this.node.build(e)}setup(e){const t=e.getContext();e.setContext({...e.context,...this.value});const n=this.node.build(e);return e.setContext(t),n}generate(e,t){const n=e.getContext();e.setContext({...e.context,...this.value});const i=this.node.build(e,t);return e.setContext(n),i}}const Eh=j(mv),gv=(s,e)=>Eh(s,{label:e});Y("context",Eh);Y("label",gv);class Pu extends Ve{static get type(){return"VarNode"}constructor(e,t=null){super(),this.node=e,this.name=t,this.global=!0,this.isVarNode=!0}getHash(e){return this.name||super.getHash(e)}getNodeType(e){return this.node.getNodeType(e)}generate(e){const{node:t,name:n}=this,i=e.getVarFromNode(this,n,e.getVectorType(this.getNodeType(e))),r=e.getPropertyName(i),o=t.build(e,i.type);return e.addLineFlowCode(`${r} = ${o}`,this),r}}const _v=j(Pu);Y("toVar",(...s)=>_v(...s).append());const xv=s=>(console.warn('TSL: "temp" is deprecated. Use ".toVar()" instead.'),_v(s));Y("temp",xv);class eC extends Ve{static get type(){return"VaryingNode"}constructor(e,t=null){super(),this.node=e,this.name=t,this.isVaryingNode=!0}isGlobal(){return!0}getHash(e){return this.name||super.getHash(e)}getNodeType(e){return this.node.getNodeType(e)}setupVarying(e){const t=e.getNodeProperties(this);let n=t.varying;if(n===void 0){const i=this.name,r=this.getNodeType(e);t.varying=n=e.getVaryingFromNode(this,i,r),t.node=this.node}return n.needsInterpolation||(n.needsInterpolation=e.shaderStage==="fragment"),n}setup(e){this.setupVarying(e)}analyze(e){return this.setupVarying(e),this.node.analyze(e)}generate(e){const t=e.getNodeProperties(this),n=this.setupVarying(e),i=e.shaderStage==="fragment"&&t.reassignPosition===!0&&e.context.needsPositionReassign;if(t.propertyName===void 0||i){const r=this.getNodeType(e),o=e.getPropertyName(n,lf.VERTEX);e.flowNodeFromShaderStage(lf.VERTEX,this.node,r,o),t.propertyName=o,i?t.reassignPosition=!1:t.reassignPosition===void 0&&e.context.isPositionNodeInput&&(t.reassignPosition=!0)}return e.getPropertyName(n)}}const li=j(eC),yv=s=>li(s);Y("varying",li);Y("vertexStage",yv);const vv=z(([s])=>{const e=s.mul(.9478672986).add(.0521327014).pow(2.4),t=s.mul(.0773993808),n=s.lessThanEqual(.04045);return Mt(e,t,n)}).setLayout({name:"sRGBTransferEOTF",type:"vec3",inputs:[{name:"color",type:"vec3"}]}),Tv=z(([s])=>{const e=s.pow(.41666).mul(1.055).sub(.055),t=s.mul(12.92),n=s.lessThanEqual(.0031308);return Mt(e,t,n)}).setLayout({name:"sRGBTransferOETF",type:"vec3",inputs:[{name:"color",type:"vec3"}]}),Rl="WorkingColorSpace",Xp="OutputColorSpace";class wl extends ln{static get type(){return"ColorSpaceNode"}constructor(e,t,n){super("vec4"),this.colorNode=e,this.source=t,this.target=n}resolveColorSpace(e,t){return t===Rl?rt.workingColorSpace:t===Xp?e.context.outputColorSpace||e.renderer.outputColorSpace:t}setup(e){const{colorNode:t}=this,n=this.resolveColorSpace(e,this.source),i=this.resolveColorSpace(e,this.target);let r=t;return rt.enabled===!1||n===i||!n||!i||(rt.getTransfer(n)===Nt&&(r=Ue(vv(r.rgb),r.a)),rt.getPrimaries(n)!==rt.getPrimaries(i)&&(r=Ue(Wn(rt._getMatrix(new qe,n,i)).mul(r.rgb),r.a)),rt.getTransfer(i)===Nt&&(r=Ue(Tv(r.rgb),r.a))),r}}const Sv=s=>J(new wl(J(s),Rl,Xp)),bv=s=>J(new wl(J(s),Xp,Rl)),Mv=(s,e)=>J(new wl(J(s),Rl,e)),qp=(s,e)=>J(new wl(J(s),e,Rl)),tC=(s,e,t)=>J(new wl(J(s),e,t));Y("toOutputColorSpace",Sv);Y("toWorkingColorSpace",bv);Y("workingToColorSpace",Mv);Y("colorSpaceToWorking",qp);let nC=class extends Ro{static get type(){return"ReferenceElementNode"}constructor(e,t){super(e,t),this.referenceNode=e,this.isReferenceElementNode=!0}getNodeType(){return this.referenceNode.uniformType}generate(e){const t=super.generate(e),n=this.referenceNode.getNodeType(),i=this.getNodeType();return e.format(t,n,i)}};class Ev extends Ve{static get type(){return"ReferenceBaseNode"}constructor(e,t,n=null,i=null){super(),this.property=e,this.uniformType=t,this.object=n,this.count=i,this.properties=e.split("."),this.reference=n,this.node=null,this.group=null,this.updateType=Ye.OBJECT}setGroup(e){return this.group=e,this}element(e){return J(new nC(this,J(e)))}setNodeType(e){const t=Ie(null,e).getSelf();this.group!==null&&t.setGroup(this.group),this.node=t}getNodeType(e){return this.node===null&&(this.updateReference(e),this.updateValue()),this.node.getNodeType(e)}getValueFromReference(e=this.reference){const{properties:t}=this;let n=e[t[0]];for(let i=1;i<t.length;i++)n=n[t[i]];return n}updateReference(e){return this.reference=this.object!==null?this.object:e.object,this.reference}setup(){return this.updateValue(),this.node}update(){this.updateValue()}updateValue(){this.node===null&&this.setNodeType(this.uniformType);const e=this.getValueFromReference();Array.isArray(e)?this.node.array=e:this.node.value=e}}const iC=(s,e,t)=>J(new Ev(s,e,t));class sC extends Ev{static get type(){return"RendererReferenceNode"}constructor(e,t,n=null){super(e,t,n),this.renderer=n,this.setGroup(ke)}updateReference(e){return this.reference=this.renderer!==null?this.renderer:e.renderer,this.reference}}const Av=(s,e,t=null)=>J(new sC(s,e,t));class rC extends ln{static get type(){return"ToneMappingNode"}constructor(e,t=wv,n=null){super("vec3"),this.toneMapping=e,this.exposureNode=t,this.colorNode=n}customCacheKey(){return xp(this.toneMapping)}setup(e){const t=this.colorNode||e.context.color,n=this.toneMapping;if(n===ri)return t;let i=null;const r=e.renderer.library.getToneMappingFunction(n);return r!==null?i=Ue(r(t.rgb,this.exposureNode),t.a):(console.error("ToneMappingNode: Unsupported Tone Mapping configuration.",n),i=t),i}}const Rv=(s,e,t)=>J(new rC(s,J(e),J(t))),wv=Av("toneMappingExposure","float");Y("toneMapping",(s,e,t)=>Rv(e,t,s));class oC extends yp{static get type(){return"BufferAttributeNode"}constructor(e,t=null,n=0,i=0){super(e,t),this.isBufferNode=!0,this.bufferType=t,this.bufferStride=n,this.bufferOffset=i,this.usage=zu,this.instanced=!1,this.attribute=null,this.global=!0,e&&e.isBufferAttribute===!0&&(this.attribute=e,this.usage=e.usage,this.instanced=e.isInstancedBufferAttribute)}getHash(e){if(this.bufferStride===0&&this.bufferOffset===0){let t=e.globalCache.getData(this.value);return t===void 0&&(t={node:this},e.globalCache.setData(this.value,t)),t.node.uuid}return this.uuid}getNodeType(e){return this.bufferType===null&&(this.bufferType=e.getTypeFromAttribute(this.attribute)),this.bufferType}setup(e){if(this.attribute!==null)return;const t=this.getNodeType(e),n=this.value,i=e.getTypeLength(t),r=this.bufferStride||i,o=this.bufferOffset,a=n.isInterleavedBuffer===!0?n:new Ox(n,r),c=new fp(a,i,o);a.setUsage(this.usage),this.attribute=c,this.attribute.isInstancedBufferAttribute=this.instanced}generate(e){const t=this.getNodeType(e),n=e.getBufferAttributeFromNode(this,t),i=e.getPropertyName(n);let r=null;return e.shaderStage==="vertex"||e.shaderStage==="compute"?(this.name=i,r=i):r=li(this).build(e,t),r}getInputType(){return"bufferAttribute"}setUsage(e){return this.usage=e,this.attribute&&this.attribute.isBufferAttribute===!0&&(this.attribute.usage=e),this}setInstanced(e){return this.instanced=e,this}}const Nl=(s,e=null,t=0,n=0)=>J(new oC(s,e,t,n)),Nv=(s,e=null,t=0,n=0)=>Nl(s,e,t,n).setUsage(ia),ju=(s,e=null,t=0,n=0)=>Nl(s,e,t,n).setInstanced(!0),gf=(s,e=null,t=0,n=0)=>Nv(s,e,t,n).setInstanced(!0);Y("toAttribute",s=>Nl(s.value));class aC extends Ve{static get type(){return"ComputeNode"}constructor(e,t,n=[64]){super("void"),this.isComputeNode=!0,this.computeNode=e,this.count=t,this.workgroupSize=n,this.dispatchCount=0,this.version=1,this.name="",this.updateBeforeType=Ye.OBJECT,this.onInitFunction=null,this.updateDispatchCount()}dispose(){this.dispatchEvent({type:"dispose"})}label(e){return this.name=e,this}updateDispatchCount(){const{count:e,workgroupSize:t}=this;let n=t[0];for(let i=1;i<t.length;i++)n*=t[i];this.dispatchCount=Math.ceil(e/n)}onInit(e){return this.onInitFunction=e,this}updateBefore({renderer:e}){e.compute(this)}generate(e){const{shaderStage:t}=e;if(t==="compute"){const n=this.computeNode.build(e,"void");n!==""&&e.addLineFlowCode(n,this)}}}const Cv=(s,e,t)=>J(new aC(J(s),e,t));Y("compute",Cv);class cC extends Ve{static get type(){return"CacheNode"}constructor(e,t=!0){super(),this.node=e,this.parent=t,this.isCacheNode=!0}getNodeType(e){const t=e.getCache(),n=e.getCacheFromNode(this,this.parent);e.setCache(n);const i=this.node.getNodeType(e);return e.setCache(t),i}build(e,...t){const n=e.getCache(),i=e.getCacheFromNode(this,this.parent);e.setCache(i);const r=this.node.build(e,...t);return e.setCache(n),r}}const Lc=(s,e)=>J(new cC(J(s),e));Y("cache",Lc);class lC extends Ve{static get type(){return"BypassNode"}constructor(e,t){super(),this.isBypassNode=!0,this.outputNode=e,this.callNode=t}getNodeType(e){return this.outputNode.getNodeType(e)}generate(e){const t=this.callNode.build(e,"void");return t!==""&&e.addLineFlowCode(t,this),this.outputNode.build(e)}}const Pv=j(lC);Y("bypass",Pv);class Dv extends Ve{static get type(){return"RemapNode"}constructor(e,t,n,i=A(0),r=A(1)){super(),this.node=e,this.inLowNode=t,this.inHighNode=n,this.outLowNode=i,this.outHighNode=r,this.doClamp=!0}setup(){const{node:e,inLowNode:t,inHighNode:n,outLowNode:i,outHighNode:r,doClamp:o}=this;let a=e.sub(t).div(n.sub(t));return o===!0&&(a=a.clamp()),a.mul(r.sub(i)).add(i)}}const Lv=j(Dv,null,null,{doClamp:!1}),Uv=j(Dv);Y("remap",Lv);Y("remapClamp",Uv);class Du extends Ve{static get type(){return"ExpressionNode"}constructor(e="",t="void"){super(t),this.snippet=e}generate(e,t){const n=this.getNodeType(e),i=this.snippet;if(n==="void")e.addLineFlowCode(i,this);else return e.format(`( ${i} )`,n,t)}}const wr=j(Du),Iv=s=>(s?Cn(s,wr("discard")):wr("discard")).append(),uC=()=>wr("return").append();Y("discard",Iv);class hC extends ln{static get type(){return"RenderOutputNode"}constructor(e,t,n){super("vec4"),this.colorNode=e,this.toneMapping=t,this.outputColorSpace=n,this.isRenderOutputNode=!0}setup({context:e}){let t=this.colorNode||e.color;const n=(this.toneMapping!==null?this.toneMapping:e.toneMapping)||ri,i=(this.outputColorSpace!==null?this.outputColorSpace:e.outputColorSpace)||Ti;return n!==ri&&(t=t.toneMapping(n)),i!==Ti&&i!==rt.workingColorSpace&&(t=t.workingToColorSpace(i)),t}}const Fv=(s,e=null,t=null)=>J(new hC(J(s),e,t));Y("renderOutput",Fv);function dC(s){console.warn("THREE.TSLBase: AddNodeElement has been removed in favor of tree-shaking. Trying add",s)}class Bv extends Ve{static get type(){return"AttributeNode"}constructor(e,t=null){super(t),this.global=!0,this._attributeName=e}getHash(e){return this.getAttributeName(e)}getNodeType(e){let t=this.nodeType;if(t===null){const n=this.getAttributeName(e);if(e.hasGeometryAttribute(n)){const i=e.geometry.getAttribute(n);t=e.getTypeFromAttribute(i)}else t="float"}return t}setAttributeName(e){return this._attributeName=e,this}getAttributeName(){return this._attributeName}generate(e){const t=this.getAttributeName(e),n=this.getNodeType(e);if(e.hasGeometryAttribute(t)===!0){const r=e.geometry.getAttribute(t),o=e.getTypeFromAttribute(r),a=e.getAttribute(t,o);return e.shaderStage==="vertex"?e.format(a.name,o,n):li(this).build(e,n)}else return console.warn(`AttributeNode: Vertex attribute "${t}" not found on geometry.`),e.generateConst(n)}serialize(e){super.serialize(e),e.global=this.global,e._attributeName=this._attributeName}deserialize(e){super.deserialize(e),this.global=e.global,this._attributeName=e._attributeName}}const ys=(s,e)=>J(new Bv(s,e)),Xt=(s=0)=>ys("uv"+(s>0?s:""),"vec2");class fC extends Ve{static get type(){return"TextureSizeNode"}constructor(e,t=null){super("uvec2"),this.isTextureSizeNode=!0,this.textureNode=e,this.levelNode=t}generate(e,t){const n=this.textureNode.build(e,"property"),i=this.levelNode===null?"0":this.levelNode.build(e,"int");return e.format(`${e.getMethod("textureDimensions")}( ${n}, ${i} )`,this.getNodeType(e),t)}}const Sr=j(fC);class pC extends Al{static get type(){return"MaxMipLevelNode"}constructor(e){super(0),this._textureNode=e,this.updateType=Ye.FRAME}get textureNode(){return this._textureNode}get texture(){return this._textureNode.value}update(){const e=this.texture,t=e.images,n=t&&t.length>0?t[0]&&t[0].image||t[0]:e.image;if(n&&n.width!==void 0){const{width:i,height:r}=n;this.value=Math.log2(Math.max(i,r))}}}const Ov=j(pC);class vs extends Al{static get type(){return"TextureNode"}constructor(e,t=null,n=null,i=null){super(e),this.isTextureNode=!0,this.uvNode=t,this.levelNode=n,this.biasNode=i,this.compareNode=null,this.depthNode=null,this.gradNode=null,this.sampler=!0,this.updateMatrix=!1,this.updateType=Ye.NONE,this.referenceNode=null,this._value=e,this._matrixUniform=null,this.setUpdateMatrix(t===null)}set value(e){this.referenceNode?this.referenceNode.value=e:this._value=e}get value(){return this.referenceNode?this.referenceNode.value:this._value}getUniformHash(){return this.value.uuid}getNodeType(){return this.value.isDepthTexture===!0?"float":this.value.type===Yt?"uvec4":this.value.type===Mn?"ivec4":"vec4"}getInputType(){return"texture"}getDefaultUV(){return Xt(this.value.channel)}updateReference(){return this.value}getTransformedUV(e){return this._matrixUniform===null&&(this._matrixUniform=Ie(this.value.matrix)),this._matrixUniform.mul(I(e,1)).xy}setUpdateMatrix(e){return this.updateMatrix=e,this.updateType=e?Ye.RENDER:Ye.NONE,this}setupUV(e,t){const n=this.value;return e.isFlipY()&&(n.image instanceof ImageBitmap&&n.flipY===!0||n.isRenderTargetTexture===!0||n.isFramebufferTexture===!0||n.isDepthTexture===!0)&&(this.sampler?t=t.flipY():t=t.setY(C(Sr(this,this.levelNode).y).sub(t.y).sub(1))),t}setup(e){const t=e.getNodeProperties(this);t.referenceNode=this.referenceNode;const n=this.value;if(!n||n.isTexture!==!0)throw new Error("THREE.TSL: `texture( value )` function expects a valid instance of THREE.Texture().");let i=this.uvNode;(i===null||e.context.forceUVContext===!0)&&e.context.getUV&&(i=e.context.getUV(this)),i||(i=this.getDefaultUV()),this.updateMatrix===!0&&(i=this.getTransformedUV(i)),i=this.setupUV(e,i);let r=this.levelNode;r===null&&e.context.getTextureLevel&&(r=e.context.getTextureLevel(this)),t.uvNode=i,t.levelNode=r,t.biasNode=this.biasNode,t.compareNode=this.compareNode,t.gradNode=this.gradNode,t.depthNode=this.depthNode}generateUV(e,t){return t.build(e,this.sampler===!0?"vec2":"ivec2")}generateSnippet(e,t,n,i,r,o,a,c){const l=this.value;let u;return i?u=e.generateTextureLevel(l,t,n,i,o):r?u=e.generateTextureBias(l,t,n,r,o):c?u=e.generateTextureGrad(l,t,n,c,o):a?u=e.generateTextureCompare(l,t,n,a,o):this.sampler===!1?u=e.generateTextureLoad(l,t,n,o):u=e.generateTexture(l,t,n,o),u}generate(e,t){const n=this.value,i=e.getNodeProperties(this),r=super.generate(e,"property");if(t==="sampler")return r+"_sampler";if(e.isReference(t))return r;{const o=e.getDataFromNode(this);let a=o.propertyName;if(a===void 0){const{uvNode:u,levelNode:h,biasNode:d,compareNode:f,depthNode:m,gradNode:_}=i,g=this.generateUV(e,u),p=h?h.build(e,"float"):null,T=d?d.build(e,"float"):null,S=m?m.build(e,"int"):null,v=f?f.build(e,"float"):null,P=_?[_[0].build(e,"vec2"),_[1].build(e,"vec2")]:null,N=e.getVarFromNode(this);a=e.getPropertyName(N);const w=this.generateSnippet(e,r,g,p,T,S,v,P);e.addLineFlowCode(`${a} = ${w}`,this),o.snippet=w,o.propertyName=a}let c=a;const l=this.getNodeType(e);return e.needsToWorkingColorSpace(n)&&(c=qp(wr(c,l),n.colorSpace).setup(e).build(e,l)),e.format(c,l,t)}}setSampler(e){return this.sampler=e,this}getSampler(){return this.sampler}uv(e){return console.warn("THREE.TextureNode: .uv() has been renamed. Use .sample() instead."),this.sample(e)}sample(e){const t=this.clone();return t.uvNode=J(e),t.referenceNode=this.getSelf(),J(t)}blur(e){const t=this.clone();return t.biasNode=J(e).mul(Ov(t)),t.referenceNode=this.getSelf(),J(t)}level(e){const t=this.clone();return t.levelNode=J(e),t.referenceNode=this.getSelf(),J(t)}size(e){return Sr(this,e)}bias(e){const t=this.clone();return t.biasNode=J(e),t.referenceNode=this.getSelf(),J(t)}compare(e){const t=this.clone();return t.compareNode=J(e),t.referenceNode=this.getSelf(),J(t)}grad(e,t){const n=this.clone();return n.gradNode=[J(e),J(t)],n.referenceNode=this.getSelf(),J(n)}depth(e){const t=this.clone();return t.depthNode=J(e),t.referenceNode=this.getSelf(),J(t)}serialize(e){super.serialize(e),e.value=this.value.toJSON(e.meta).uuid,e.sampler=this.sampler,e.updateMatrix=this.updateMatrix,e.updateType=this.updateType}deserialize(e){super.deserialize(e),this.value=e.meta.textures[e.value],this.sampler=e.sampler,this.updateMatrix=e.updateMatrix,this.updateType=e.updateType}update(){const e=this.value,t=this._matrixUniform;t!==null&&(t.value=e.matrix),e.matrixAutoUpdate===!0&&e.updateMatrix()}clone(){const e=new this.constructor(this.value,this.uvNode,this.levelNode,this.biasNode);return e.sampler=this.sampler,e}}const ht=j(vs),Zt=(...s)=>ht(...s).setSampler(!1),mC=s=>(s.isNode===!0?s:ht(s)).convert("sampler"),ur=Ie("float").label("cameraNear").setGroup(ke).onRenderUpdate(({camera:s})=>s.near),hr=Ie("float").label("cameraFar").setGroup(ke).onRenderUpdate(({camera:s})=>s.far),wo=Ie("mat4").label("cameraProjectionMatrix").setGroup(ke).onRenderUpdate(({camera:s})=>s.projectionMatrix),gC=Ie("mat4").label("cameraProjectionMatrixInverse").setGroup(ke).onRenderUpdate(({camera:s})=>s.projectionMatrixInverse),ui=Ie("mat4").label("cameraViewMatrix").setGroup(ke).onRenderUpdate(({camera:s})=>s.matrixWorldInverse),_C=Ie("mat4").label("cameraWorldMatrix").setGroup(ke).onRenderUpdate(({camera:s})=>s.matrixWorld),xC=Ie("mat3").label("cameraNormalMatrix").setGroup(ke).onRenderUpdate(({camera:s})=>s.normalMatrix),Vv=Ie(new U).label("cameraPosition").setGroup(ke).onRenderUpdate(({camera:s},e)=>e.value.setFromMatrixPosition(s.matrixWorld));class St extends Ve{static get type(){return"Object3DNode"}constructor(e,t=null){super(),this.scope=e,this.object3d=t,this.updateType=Ye.OBJECT,this._uniformNode=new Al(null)}getNodeType(){const e=this.scope;if(e===St.WORLD_MATRIX)return"mat4";if(e===St.POSITION||e===St.VIEW_POSITION||e===St.DIRECTION||e===St.SCALE)return"vec3"}update(e){const t=this.object3d,n=this._uniformNode,i=this.scope;if(i===St.WORLD_MATRIX)n.value=t.matrixWorld;else if(i===St.POSITION)n.value=n.value||new U,n.value.setFromMatrixPosition(t.matrixWorld);else if(i===St.SCALE)n.value=n.value||new U,n.value.setFromMatrixScale(t.matrixWorld);else if(i===St.DIRECTION)n.value=n.value||new U,t.getWorldDirection(n.value);else if(i===St.VIEW_POSITION){const r=e.camera;n.value=n.value||new U,n.value.setFromMatrixPosition(t.matrixWorld),n.value.applyMatrix4(r.matrixWorldInverse)}}generate(e){const t=this.scope;return t===St.WORLD_MATRIX?this._uniformNode.nodeType="mat4":(t===St.POSITION||t===St.VIEW_POSITION||t===St.DIRECTION||t===St.SCALE)&&(this._uniformNode.nodeType="vec3"),this._uniformNode.build(e)}serialize(e){super.serialize(e),e.scope=this.scope}deserialize(e){super.deserialize(e),this.scope=e.scope}}St.WORLD_MATRIX="worldMatrix";St.POSITION="position";St.SCALE="scale";St.VIEW_POSITION="viewPosition";St.DIRECTION="direction";const yC=j(St,St.DIRECTION),vC=j(St,St.WORLD_MATRIX),Gv=j(St,St.POSITION),TC=j(St,St.SCALE),SC=j(St,St.VIEW_POSITION);class Ts extends St{static get type(){return"ModelNode"}constructor(e){super(e)}update(e){this.object3d=e.object,super.update(e)}}const bC=de(Ts,Ts.DIRECTION),Li=de(Ts,Ts.WORLD_MATRIX),MC=de(Ts,Ts.POSITION),EC=de(Ts,Ts.SCALE),AC=de(Ts,Ts.VIEW_POSITION),zv=Ie(new qe).onObjectUpdate(({object:s},e)=>e.value.getNormalMatrix(s.matrixWorld)),RC=Ie(new ut).onObjectUpdate(({object:s},e)=>e.value.copy(s.matrixWorld).invert()),oc=z(s=>s.renderer.nodes.modelViewMatrix||kv).once()().toVar("modelViewMatrix"),kv=ui.mul(Li),wC=z(s=>(s.context.isHighPrecisionModelViewMatrix=!0,Ie("mat4").onObjectUpdate(({object:e,camera:t})=>e.modelViewMatrix.multiplyMatrices(t.matrixWorldInverse,e.matrixWorld)))).once()().toVar("highpModelViewMatrix"),NC=z(s=>{const e=s.context.isHighPrecisionModelViewMatrix;return Ie("mat3").onObjectUpdate(({object:t,camera:n})=>(e!==!0&&t.modelViewMatrix.multiplyMatrices(n.matrixWorldInverse,t.matrixWorld),t.normalMatrix.getNormalMatrix(t.modelViewMatrix)))}).once()().toVar("highpModelNormalViewMatrix"),Ah=ys("position","vec3"),Jt=Ah.varying("positionLocal"),Ku=Ah.varying("positionPrevious"),Xs=Li.mul(Jt).xyz.varying("v_positionWorld").context({needsPositionReassign:!0}),Yp=Jt.transformDirection(Li).varying("v_positionWorldDirection").normalize().toVar("positionWorldDirection").context({needsPositionReassign:!0}),on=z(s=>s.context.setupPositionView(),"vec3").once()().varying("v_positionView").context({needsPositionReassign:!0}),Vt=on.negate().varying("v_positionViewDirection").normalize().toVar("positionViewDirection");class CC extends Ve{static get type(){return"FrontFacingNode"}constructor(){super("bool"),this.isFrontFacingNode=!0}generate(e){const{renderer:t,material:n}=e;return t.coordinateSystem===ni&&n.side===Wt?"false":e.getFrontFacing()}}const Hv=de(CC),Cl=A(Hv).mul(2).sub(1),Rh=ys("normal","vec3"),ci=z(s=>s.geometry.hasAttribute("normal")===!1?(console.warn('TSL.NormalNode: Vertex attribute "normal" not found on geometry.'),I(0,1,0)):Rh,"vec3").once()().toVar("normalLocal"),Wv=on.dFdx().cross(on.dFdy()).normalize().toVar("normalFlat"),Oi=z(s=>{let e;return s.material.flatShading===!0?e=Wv:e=li(jp(ci),"v_normalView").normalize(),e},"vec3").once()().toVar("normalView"),wh=li(Oi.transformDirection(ui),"v_normalWorld").normalize().toVar("normalWorld"),Qt=z(s=>s.context.setupNormal(),"vec3").once()().mul(Cl).toVar("transformedNormalView"),Nh=Qt.transformDirection(ui).toVar("transformedNormalWorld"),oa=z(s=>s.context.setupClearcoatNormal(),"vec3").once()().mul(Cl).toVar("transformedClearcoatNormalView"),$v=z(([s,e=Li])=>{const t=Wn(e),n=s.div(I(t[0].dot(t[0]),t[1].dot(t[1]),t[2].dot(t[2])));return t.mul(n).xyz}),jp=z(([s],e)=>{const t=e.renderer.nodes.modelNormalViewMatrix;if(t!==null)return t.transformDirection(s);const n=zv.mul(s);return ui.transformDirection(n)}),Xv=Ie(0).onReference(({material:s})=>s).onRenderUpdate(({material:s})=>s.refractionRatio),qv=Vt.negate().reflect(Qt),Yv=Vt.negate().refract(Qt,Xv),jv=qv.transformDirection(ui).toVar("reflectVector"),Kv=Yv.transformDirection(ui).toVar("reflectVector");class PC extends vs{static get type(){return"CubeTextureNode"}constructor(e,t=null,n=null,i=null){super(e,t,n,i),this.isCubeTextureNode=!0}getInputType(){return"cubeTexture"}getDefaultUV(){const e=this.value;return e.mapping===Fi?jv:e.mapping===Bi?Kv:(console.error('THREE.CubeTextureNode: Mapping "%s" not supported.',e.mapping),I(0,0,0))}setUpdateMatrix(){}setupUV(e,t){const n=this.value;return e.renderer.coordinateSystem===_s||!n.isRenderTargetTexture?I(t.x.negate(),t.yz):t}generateUV(e,t){return t.build(e,"vec3")}}const Za=j(PC);class Kp extends Al{static get type(){return"BufferNode"}constructor(e,t,n=0){super(e,t),this.isBufferNode=!0,this.bufferType=t,this.bufferCount=n}getElementType(e){return this.getNodeType(e)}getInputType(){return"buffer"}}const Pl=(s,e,t)=>J(new Kp(s,e,t));class DC extends Ro{static get type(){return"UniformArrayElementNode"}constructor(e,t){super(e,t),this.isArrayBufferElementNode=!0}generate(e){const t=super.generate(e),n=this.getNodeType(),i=this.node.getPaddedType();return e.format(t,i,n)}}class Zv extends Kp{static get type(){return"UniformArrayNode"}constructor(e,t=null){super(null),this.array=e,this.elementType=t===null?xr(e[0]):t,this.paddedType=this.getPaddedType(),this.updateType=Ye.RENDER,this.isArrayBufferNode=!0}getNodeType(){return this.paddedType}getElementType(){return this.elementType}getPaddedType(){const e=this.elementType;let t="vec4";return e==="mat2"?t="mat2":/mat/.test(e)===!0?t="mat4":e.charAt(0)==="i"?t="ivec4":e.charAt(0)==="u"&&(t="uvec4"),t}update(){const{array:e,value:t}=this,n=this.elementType;if(n==="float"||n==="int"||n==="uint")for(let i=0;i<e.length;i++){const r=i*4;t[r]=e[i]}else if(n==="color")for(let i=0;i<e.length;i++){const r=i*4,o=e[i];t[r]=o.r,t[r+1]=o.g,t[r+2]=o.b||0}else if(n==="mat2")for(let i=0;i<e.length;i++){const r=i*4,o=e[i];t[r]=o.elements[0],t[r+1]=o.elements[1],t[r+2]=o.elements[2],t[r+3]=o.elements[3]}else if(n==="mat3")for(let i=0;i<e.length;i++){const r=i*16,o=e[i];t[r]=o.elements[0],t[r+1]=o.elements[1],t[r+2]=o.elements[2],t[r+4]=o.elements[3],t[r+5]=o.elements[4],t[r+6]=o.elements[5],t[r+8]=o.elements[6],t[r+9]=o.elements[7],t[r+10]=o.elements[8],t[r+15]=1}else if(n==="mat4")for(let i=0;i<e.length;i++){const r=i*16,o=e[i];for(let a=0;a<o.elements.length;a++)t[r+a]=o.elements[a]}else for(let i=0;i<e.length;i++){const r=i*4,o=e[i];t[r]=o.x,t[r+1]=o.y,t[r+2]=o.z||0,t[r+3]=o.w||0}}setup(e){const t=this.array.length,n=this.elementType;let i=Float32Array;const r=this.paddedType,o=e.getTypeLength(r);return n.charAt(0)==="i"&&(i=Int32Array),n.charAt(0)==="u"&&(i=Uint32Array),this.value=new i(t*o),this.bufferCount=t,this.bufferType=r,super.setup(e)}element(e){return J(new DC(this,J(e)))}}const zs=(s,e)=>J(new Zv(s,e)),LC=(s,e)=>(console.warn("TSL.UniformArrayNode: uniforms() has been renamed to uniformArray()."),J(new Zv(s,e)));class UC extends Ro{static get type(){return"ReferenceElementNode"}constructor(e,t){super(e,t),this.referenceNode=e,this.isReferenceElementNode=!0}getNodeType(){return this.referenceNode.uniformType}generate(e){const t=super.generate(e),n=this.referenceNode.getNodeType(),i=this.getNodeType();return e.format(t,n,i)}}class Ch extends Ve{static get type(){return"ReferenceNode"}constructor(e,t,n=null,i=null){super(),this.property=e,this.uniformType=t,this.object=n,this.count=i,this.properties=e.split("."),this.reference=n,this.node=null,this.group=null,this.name=null,this.updateType=Ye.OBJECT}element(e){return J(new UC(this,J(e)))}setGroup(e){return this.group=e,this}label(e){return this.name=e,this}setNodeType(e){let t=null;this.count!==null?t=Pl(null,e,this.count):Array.isArray(this.getValueFromReference())?t=zs(null,e):e==="texture"?t=ht(null):e==="cubeTexture"?t=Za(null):t=Ie(null,e),this.group!==null&&t.setGroup(this.group),this.name!==null&&t.label(this.name),this.node=t.getSelf()}getNodeType(e){return this.node===null&&(this.updateReference(e),this.updateValue()),this.node.getNodeType(e)}getValueFromReference(e=this.reference){const{properties:t}=this;let n=e[t[0]];for(let i=1;i<t.length;i++)n=n[t[i]];return n}updateReference(e){return this.reference=this.object!==null?this.object:e.object,this.reference}setup(){return this.updateValue(),this.node}update(){this.updateValue()}updateValue(){this.node===null&&this.setNodeType(this.uniformType);const e=this.getValueFromReference();Array.isArray(e)?this.node.array=e:this.node.value=e}}const Ct=(s,e,t)=>J(new Ch(s,e,t)),_f=(s,e,t,n)=>J(new Ch(s,e,n,t));class IC extends Ch{static get type(){return"MaterialReferenceNode"}constructor(e,t,n=null){super(e,t,n),this.material=n,this.isMaterialReferenceNode=!0}updateReference(e){return this.reference=this.material!==null?this.material:e.material,this.reference}}const ks=(s,e,t=null)=>J(new IC(s,e,t)),Ph=z(s=>(s.geometry.hasAttribute("tangent")===!1&&s.geometry.computeTangents(),ys("tangent","vec4")))(),Dl=Ph.xyz.toVar("tangentLocal"),Ll=oc.mul(Ue(Dl,0)).xyz.varying("v_tangentView").normalize().toVar("tangentView"),Qv=Ll.transformDirection(ui).varying("v_tangentWorld").normalize().toVar("tangentWorld"),Zp=Ll.toVar("transformedTangentView"),FC=Zp.transformDirection(ui).normalize().toVar("transformedTangentWorld"),Ul=s=>s.mul(Ph.w).xyz,BC=li(Ul(Rh.cross(Ph)),"v_bitangentGeometry").normalize().toVar("bitangentGeometry"),OC=li(Ul(ci.cross(Dl)),"v_bitangentLocal").normalize().toVar("bitangentLocal"),Jv=li(Ul(Oi.cross(Ll)),"v_bitangentView").normalize().toVar("bitangentView"),VC=li(Ul(wh.cross(Qv)),"v_bitangentWorld").normalize().toVar("bitangentWorld"),e0=Ul(Qt.cross(Zp)).normalize().toVar("transformedBitangentView"),GC=e0.transformDirection(ui).normalize().toVar("transformedBitangentWorld"),eo=Wn(Ll,Jv,Oi),t0=Vt.mul(eo),zC=(s,e)=>s.sub(t0.mul(e)),n0=(()=>{let s=go.cross(Vt);return s=s.cross(go).normalize(),s=Mt(s,Qt,lr.mul(as.oneMinus()).oneMinus().pow2().pow2()).normalize(),s})(),kC=z(s=>{const{eye_pos:e,surf_norm:t,mapN:n,uv:i}=s,r=e.dFdx(),o=e.dFdy(),a=i.dFdx(),c=i.dFdy(),l=t,u=o.cross(l),h=l.cross(r),d=u.mul(a.x).add(h.mul(c.x)),f=u.mul(a.y).add(h.mul(c.y)),m=d.dot(d).max(f.dot(f)),_=Cl.mul(m.inverseSqrt());return cn(d.mul(n.x,_),f.mul(n.y,_),l.mul(n.z)).normalize()});class HC extends ln{static get type(){return"NormalMapNode"}constructor(e,t=null){super("vec3"),this.node=e,this.scaleNode=t,this.normalMapType=qs}setup(e){const{normalMapType:t,scaleNode:n}=this;let i=this.node.mul(2).sub(1);n!==null&&(i=I(i.xy.mul(n),i.z));let r=null;return t===Ax?r=jp(i):t===qs&&(e.hasGeometryAttribute("tangent")===!0?r=eo.mul(i).normalize():r=kC({eye_pos:on,surf_norm:Oi,mapN:i,uv:Xt()})),r}}const xf=j(HC),WC=z(({textureNode:s,bumpScale:e})=>{const t=i=>s.cache().context({getUV:r=>i(r.uvNode||Xt()),forceUVContext:!0}),n=A(t(i=>i));return se(A(t(i=>i.add(i.dFdx()))).sub(n),A(t(i=>i.add(i.dFdy()))).sub(n)).mul(e)}),$C=z(s=>{const{surf_pos:e,surf_norm:t,dHdxy:n}=s,i=e.dFdx().normalize(),r=e.dFdy().normalize(),o=t,a=r.cross(o),c=o.cross(i),l=i.dot(a).mul(Cl),u=l.sign().mul(n.x.mul(a).add(n.y.mul(c)));return l.abs().mul(t).sub(u).normalize()});class XC extends ln{static get type(){return"BumpMapNode"}constructor(e,t=null){super("vec3"),this.textureNode=e,this.scaleNode=t}setup(){const e=this.scaleNode!==null?this.scaleNode:1,t=WC({textureNode:this.textureNode,bumpScale:e});return $C({surf_pos:on,surf_norm:Oi,dHdxy:t})}}const i0=j(XC),Yg=new Map;class q extends Ve{static get type(){return"MaterialNode"}constructor(e){super(),this.scope=e}getCache(e,t){let n=Yg.get(e);return n===void 0&&(n=ks(e,t),Yg.set(e,n)),n}getFloat(e){return this.getCache(e,"float")}getColor(e){return this.getCache(e,"color")}getTexture(e){return this.getCache(e==="map"?"map":e+"Map","texture")}setup(e){const t=e.context.material,n=this.scope;let i=null;if(n===q.COLOR){const r=t.color!==void 0?this.getColor(n):I();t.map&&t.map.isTexture===!0?i=r.mul(this.getTexture("map")):i=r}else if(n===q.OPACITY){const r=this.getFloat(n);t.alphaMap&&t.alphaMap.isTexture===!0?i=r.mul(this.getTexture("alpha")):i=r}else if(n===q.SPECULAR_STRENGTH)t.specularMap&&t.specularMap.isTexture===!0?i=this.getTexture("specular").r:i=A(1);else if(n===q.SPECULAR_INTENSITY){const r=this.getFloat(n);t.specularIntensityMap&&t.specularIntensityMap.isTexture===!0?i=r.mul(this.getTexture(n).a):i=r}else if(n===q.SPECULAR_COLOR){const r=this.getColor(n);t.specularColorMap&&t.specularColorMap.isTexture===!0?i=r.mul(this.getTexture(n).rgb):i=r}else if(n===q.ROUGHNESS){const r=this.getFloat(n);t.roughnessMap&&t.roughnessMap.isTexture===!0?i=r.mul(this.getTexture(n).g):i=r}else if(n===q.METALNESS){const r=this.getFloat(n);t.metalnessMap&&t.metalnessMap.isTexture===!0?i=r.mul(this.getTexture(n).b):i=r}else if(n===q.EMISSIVE){const r=this.getFloat("emissiveIntensity"),o=this.getColor(n).mul(r);t.emissiveMap&&t.emissiveMap.isTexture===!0?i=o.mul(this.getTexture(n)):i=o}else if(n===q.NORMAL)t.normalMap?(i=xf(this.getTexture("normal"),this.getCache("normalScale","vec2")),i.normalMapType=t.normalMapType):t.bumpMap?i=i0(this.getTexture("bump").r,this.getFloat("bumpScale")):i=Oi;else if(n===q.CLEARCOAT){const r=this.getFloat(n);t.clearcoatMap&&t.clearcoatMap.isTexture===!0?i=r.mul(this.getTexture(n).r):i=r}else if(n===q.CLEARCOAT_ROUGHNESS){const r=this.getFloat(n);t.clearcoatRoughnessMap&&t.clearcoatRoughnessMap.isTexture===!0?i=r.mul(this.getTexture(n).r):i=r}else if(n===q.CLEARCOAT_NORMAL)t.clearcoatNormalMap?i=xf(this.getTexture(n),this.getCache(n+"Scale","vec2")):i=Oi;else if(n===q.SHEEN){const r=this.getColor("sheenColor").mul(this.getFloat("sheen"));t.sheenColorMap&&t.sheenColorMap.isTexture===!0?i=r.mul(this.getTexture("sheenColor").rgb):i=r}else if(n===q.SHEEN_ROUGHNESS){const r=this.getFloat(n);t.sheenRoughnessMap&&t.sheenRoughnessMap.isTexture===!0?i=r.mul(this.getTexture(n).a):i=r,i=i.clamp(.07,1)}else if(n===q.ANISOTROPY)if(t.anisotropyMap&&t.anisotropyMap.isTexture===!0){const r=this.getTexture(n);i=xh(ea.x,ea.y,ea.y.negate(),ea.x).mul(r.rg.mul(2).sub(se(1)).normalize().mul(r.b))}else i=ea;else if(n===q.IRIDESCENCE_THICKNESS){const r=Ct("1","float",t.iridescenceThicknessRange);if(t.iridescenceThicknessMap){const o=Ct("0","float",t.iridescenceThicknessRange);i=r.sub(o).mul(this.getTexture(n).g).add(o)}else i=r}else if(n===q.TRANSMISSION){const r=this.getFloat(n);t.transmissionMap?i=r.mul(this.getTexture(n).r):i=r}else if(n===q.THICKNESS){const r=this.getFloat(n);t.thicknessMap?i=r.mul(this.getTexture(n).g):i=r}else if(n===q.IOR)i=this.getFloat(n);else if(n===q.LIGHT_MAP)i=this.getTexture(n).rgb.mul(this.getFloat("lightMapIntensity"));else if(n===q.AO)i=this.getTexture(n).r.sub(1).mul(this.getFloat("aoMapIntensity")).add(1);else{const r=this.getNodeType(e);i=this.getCache(n,r)}return i}}q.ALPHA_TEST="alphaTest";q.COLOR="color";q.OPACITY="opacity";q.SHININESS="shininess";q.SPECULAR="specular";q.SPECULAR_STRENGTH="specularStrength";q.SPECULAR_INTENSITY="specularIntensity";q.SPECULAR_COLOR="specularColor";q.REFLECTIVITY="reflectivity";q.ROUGHNESS="roughness";q.METALNESS="metalness";q.NORMAL="normal";q.CLEARCOAT="clearcoat";q.CLEARCOAT_ROUGHNESS="clearcoatRoughness";q.CLEARCOAT_NORMAL="clearcoatNormal";q.EMISSIVE="emissive";q.ROTATION="rotation";q.SHEEN="sheen";q.SHEEN_ROUGHNESS="sheenRoughness";q.ANISOTROPY="anisotropy";q.IRIDESCENCE="iridescence";q.IRIDESCENCE_IOR="iridescenceIOR";q.IRIDESCENCE_THICKNESS="iridescenceThickness";q.IOR="ior";q.TRANSMISSION="transmission";q.THICKNESS="thickness";q.ATTENUATION_DISTANCE="attenuationDistance";q.ATTENUATION_COLOR="attenuationColor";q.LINE_SCALE="scale";q.LINE_DASH_SIZE="dashSize";q.LINE_GAP_SIZE="gapSize";q.LINE_WIDTH="linewidth";q.LINE_DASH_OFFSET="dashOffset";q.POINT_WIDTH="pointWidth";q.DISPERSION="dispersion";q.LIGHT_MAP="light";q.AO="ao";const s0=de(q,q.ALPHA_TEST),r0=de(q,q.COLOR),o0=de(q,q.SHININESS),a0=de(q,q.EMISSIVE),Qp=de(q,q.OPACITY),c0=de(q,q.SPECULAR),yf=de(q,q.SPECULAR_INTENSITY),l0=de(q,q.SPECULAR_COLOR),Uc=de(q,q.SPECULAR_STRENGTH),Lu=de(q,q.REFLECTIVITY),u0=de(q,q.ROUGHNESS),h0=de(q,q.METALNESS),d0=de(q,q.NORMAL).context({getUV:null}),f0=de(q,q.CLEARCOAT),p0=de(q,q.CLEARCOAT_ROUGHNESS),m0=de(q,q.CLEARCOAT_NORMAL).context({getUV:null}),g0=de(q,q.ROTATION),_0=de(q,q.SHEEN),x0=de(q,q.SHEEN_ROUGHNESS),y0=de(q,q.ANISOTROPY),v0=de(q,q.IRIDESCENCE),T0=de(q,q.IRIDESCENCE_IOR),S0=de(q,q.IRIDESCENCE_THICKNESS),b0=de(q,q.TRANSMISSION),M0=de(q,q.THICKNESS),E0=de(q,q.IOR),A0=de(q,q.ATTENUATION_DISTANCE),R0=de(q,q.ATTENUATION_COLOR),w0=de(q,q.LINE_SCALE),N0=de(q,q.LINE_DASH_SIZE),C0=de(q,q.LINE_GAP_SIZE),qC=de(q,q.LINE_WIDTH),P0=de(q,q.LINE_DASH_OFFSET),YC=de(q,q.POINT_WIDTH),D0=de(q,q.DISPERSION),Jp=de(q,q.LIGHT_MAP),L0=de(q,q.AO),ea=Ie(new Ee).onReference(function(s){return s.material}).onRenderUpdate(function({material:s}){this.value.set(s.anisotropy*Math.cos(s.anisotropyRotation),s.anisotropy*Math.sin(s.anisotropyRotation))}),em=z(s=>s.context.setupModelViewProjection(),"vec4").once()().varying("v_modelViewProjection");class Gt extends Ve{static get type(){return"IndexNode"}constructor(e){super("uint"),this.scope=e,this.isIndexNode=!0}generate(e){const t=this.getNodeType(e),n=this.scope;let i;if(n===Gt.VERTEX)i=e.getVertexIndex();else if(n===Gt.INSTANCE)i=e.getInstanceIndex();else if(n===Gt.DRAW)i=e.getDrawIndex();else if(n===Gt.INVOCATION_LOCAL)i=e.getInvocationLocalIndex();else if(n===Gt.INVOCATION_SUBGROUP)i=e.getInvocationSubgroupIndex();else if(n===Gt.SUBGROUP)i=e.getSubgroupIndex();else throw new Error("THREE.IndexNode: Unknown scope: "+n);let r;return e.shaderStage==="vertex"||e.shaderStage==="compute"?r=i:r=li(this).build(e,t),r}}Gt.VERTEX="vertex";Gt.INSTANCE="instance";Gt.SUBGROUP="subgroup";Gt.INVOCATION_LOCAL="invocationLocal";Gt.INVOCATION_SUBGROUP="invocationSubgroup";Gt.DRAW="draw";const U0=de(Gt,Gt.VERTEX),Il=de(Gt,Gt.INSTANCE),jC=de(Gt,Gt.SUBGROUP),KC=de(Gt,Gt.INVOCATION_SUBGROUP),ZC=de(Gt,Gt.INVOCATION_LOCAL),I0=de(Gt,Gt.DRAW);class F0 extends Ve{static get type(){return"InstanceNode"}constructor(e,t,n){super("void"),this.count=e,this.instanceMatrix=t,this.instanceColor=n,this.instanceMatrixNode=null,this.instanceColorNode=null,this.updateType=Ye.FRAME,this.buffer=null,this.bufferColor=null}setup(e){const{count:t,instanceMatrix:n,instanceColor:i}=this;let{instanceMatrixNode:r,instanceColorNode:o}=this;if(r===null){if(t<=1e3)r=Pl(n.array,"mat4",Math.max(t,1)).element(Il);else{const c=new BM(n.array,16,1);this.buffer=c;const l=n.usage===ia?gf:ju,u=[l(c,"vec4",16,0),l(c,"vec4",16,4),l(c,"vec4",16,8),l(c,"vec4",16,12)];r=mo(...u)}this.instanceMatrixNode=r}if(i&&o===null){const c=new pp(i.array,3),l=i.usage===ia?gf:ju;this.bufferColor=c,o=I(l(c,"vec3",3,0)),this.instanceColorNode=o}const a=r.mul(Jt).xyz;if(Jt.assign(a),e.hasGeometryAttribute("normal")){const c=$v(ci,r);ci.assign(c)}this.instanceColorNode!==null&&rl("vec3","vInstanceColor").assign(this.instanceColorNode)}update(){this.instanceMatrix.usage!==ia&&this.buffer!==null&&this.instanceMatrix.version!==this.buffer.version&&(this.buffer.version=this.instanceMatrix.version),this.instanceColor&&this.instanceColor.usage!==ia&&this.bufferColor!==null&&this.instanceColor.version!==this.bufferColor.version&&(this.bufferColor.version=this.instanceColor.version)}}const QC=j(F0);class JC extends F0{static get type(){return"InstancedMeshNode"}constructor(e){const{count:t,instanceMatrix:n,instanceColor:i}=e;super(t,n,i),this.instancedMesh=e}}const B0=j(JC);class e1 extends Ve{static get type(){return"BatchNode"}constructor(e){super("void"),this.batchMesh=e,this.batchingIdNode=null}setup(e){this.batchingIdNode===null&&(e.getDrawIndex()===null?this.batchingIdNode=Il:this.batchingIdNode=I0);const n=z(([m])=>{const _=Sr(Zt(this.batchMesh._indirectTexture),0),g=C(m).modInt(C(_)),p=C(m).div(C(_));return Zt(this.batchMesh._indirectTexture,xn(g,p)).x}).setLayout({name:"getIndirectIndex",type:"uint",inputs:[{name:"id",type:"int"}]})(C(this.batchingIdNode)),i=this.batchMesh._matricesTexture,r=Sr(Zt(i),0),o=A(n).mul(4).toInt().toVar(),a=o.modInt(r),c=o.div(C(r)),l=mo(Zt(i,xn(a,c)),Zt(i,xn(a.add(1),c)),Zt(i,xn(a.add(2),c)),Zt(i,xn(a.add(3),c))),u=this.batchMesh._colorsTexture;if(u!==null){const _=z(([g])=>{const p=Sr(Zt(u),0).x,T=g,S=T.modInt(p),v=T.div(p);return Zt(u,xn(S,v)).rgb}).setLayout({name:"getBatchingColor",type:"vec3",inputs:[{name:"id",type:"int"}]})(n);rl("vec3","vBatchColor").assign(_)}const h=Wn(l);Jt.assign(l.mul(Jt));const d=ci.div(I(h[0].dot(h[0]),h[1].dot(h[1]),h[2].dot(h[2]))),f=h.mul(d).xyz;ci.assign(f),e.hasGeometryAttribute("tangent")&&Dl.mulAssign(h)}}const O0=j(e1),jg=new WeakMap;class V0 extends Ve{static get type(){return"SkinningNode"}constructor(e,t=!1){super("void"),this.skinnedMesh=e,this.useReference=t,this.updateType=Ye.OBJECT,this.skinIndexNode=ys("skinIndex","uvec4"),this.skinWeightNode=ys("skinWeight","vec4");let n,i,r;t?(n=Ct("bindMatrix","mat4"),i=Ct("bindMatrixInverse","mat4"),r=_f("skeleton.boneMatrices","mat4",e.skeleton.bones.length)):(n=Ie(e.bindMatrix,"mat4"),i=Ie(e.bindMatrixInverse,"mat4"),r=Pl(e.skeleton.boneMatrices,"mat4",e.skeleton.bones.length)),this.bindMatrixNode=n,this.bindMatrixInverseNode=i,this.boneMatricesNode=r,this.previousBoneMatricesNode=null}getSkinnedPosition(e=this.boneMatricesNode,t=Jt){const{skinIndexNode:n,skinWeightNode:i,bindMatrixNode:r,bindMatrixInverseNode:o}=this,a=e.element(n.x),c=e.element(n.y),l=e.element(n.z),u=e.element(n.w),h=r.mul(t),d=cn(a.mul(i.x).mul(h),c.mul(i.y).mul(h),l.mul(i.z).mul(h),u.mul(i.w).mul(h));return o.mul(d).xyz}getSkinnedNormal(e=this.boneMatricesNode,t=ci){const{skinIndexNode:n,skinWeightNode:i,bindMatrixNode:r,bindMatrixInverseNode:o}=this,a=e.element(n.x),c=e.element(n.y),l=e.element(n.z),u=e.element(n.w);let h=cn(i.x.mul(a),i.y.mul(c),i.z.mul(l),i.w.mul(u));return h=o.mul(h).mul(r),h.transformDirection(t).xyz}getPreviousSkinnedPosition(e){const t=e.object;return this.previousBoneMatricesNode===null&&(t.skeleton.previousBoneMatrices=new Float32Array(t.skeleton.boneMatrices),this.previousBoneMatricesNode=_f("skeleton.previousBoneMatrices","mat4",t.skeleton.bones.length)),this.getSkinnedPosition(this.previousBoneMatricesNode,Ku)}needsPreviousBoneMatrices(e){const t=e.renderer.getMRT();return t&&t.has("velocity")||ey(e.object).useVelocity===!0}setup(e){this.needsPreviousBoneMatrices(e)&&Ku.assign(this.getPreviousSkinnedPosition(e));const t=this.getSkinnedPosition();if(Jt.assign(t),e.hasGeometryAttribute("normal")){const n=this.getSkinnedNormal();ci.assign(n),e.hasGeometryAttribute("tangent")&&Dl.assign(n)}}generate(e,t){if(t!=="void")return Jt.build(e,t)}update(e){const n=(this.useReference?e.object:this.skinnedMesh).skeleton;jg.get(n)!==e.frameId&&(jg.set(n,e.frameId),this.previousBoneMatricesNode!==null&&n.previousBoneMatrices.set(n.boneMatrices),n.update())}}const t1=s=>J(new V0(s)),G0=s=>J(new V0(s,!0));class n1 extends Ve{static get type(){return"LoopNode"}constructor(e=[]){super(),this.params=e}getVarName(e){return String.fromCharCode(105+e)}getProperties(e){const t=e.getNodeProperties(this);if(t.stackNode!==void 0)return t;const n={};for(let r=0,o=this.params.length-1;r<o;r++){const a=this.params[r],c=a.isNode!==!0&&a.name||this.getVarName(r),l=a.isNode!==!0&&a.type||"int";n[c]=wr(c,l)}const i=e.addStack();return t.returnsNode=this.params[this.params.length-1](n,i,e),t.stackNode=i,e.removeStack(),t}getNodeType(e){const{returnsNode:t}=this.getProperties(e);return t?t.getNodeType(e):"void"}setup(e){this.getProperties(e)}generate(e){const t=this.getProperties(e),n=this.params,i=t.stackNode;for(let a=0,c=n.length-1;a<c;a++){const l=n[a];let u=null,h=null,d=null,f=null,m=null,_=null;l.isNode?(f="int",d=this.getVarName(a),u="0",h=l.build(e,f),m="<"):(f=l.type||"int",d=l.name||this.getVarName(a),u=l.start,h=l.end,m=l.condition,_=l.update,typeof u=="number"?u=e.generateConst(f,u):u&&u.isNode&&(u=u.build(e,f)),typeof h=="number"?h=e.generateConst(f,h):h&&h.isNode&&(h=h.build(e,f)),u!==void 0&&h===void 0?(u=u+" - 1",h="0",m=">="):h!==void 0&&u===void 0&&(u="0",m="<"),m===void 0&&(Number(u)>Number(h)?m=">=":m="<"));const g={start:u,end:h,condition:m},p=g.start,T=g.end;let S="",v="",P="";_||(f==="int"||f==="uint"?m.includes("<")?_="++":_="--":m.includes("<")?_="+= 1.":_="-= 1."),S+=e.getVar(f,d)+" = "+p,v+=d+" "+m+" "+T,P+=d+" "+_;const N=`for ( ${S}; ${v}; ${P} )`;e.addFlowCode((a===0?`
`:"")+e.tab+N+` {

`).addFlowTab()}const r=i.build(e,"void"),o=t.returnsNode?t.returnsNode.build(e):"";e.removeFlowTab().addFlowCode(`
`+e.tab+r);for(let a=0,c=this.params.length-1;a<c;a++)e.addFlowCode((a===0?"":e.tab)+`}

`).removeFlowTab();return e.addFlowTab(),o}}const Et=(...s)=>J(new n1(po(s,"int"))).append(),i1=()=>wr("continue").append(),z0=()=>wr("break").append(),s1=(...s)=>(console.warn("TSL.LoopNode: loop() has been renamed to Loop()."),Et(...s)),vd=new WeakMap,mi=new je,Kg=z(({bufferMap:s,influence:e,stride:t,width:n,depth:i,offset:r})=>{const o=C(U0).mul(t).add(r),a=o.div(n),c=o.sub(a.mul(n));return Zt(s,xn(c,a)).depth(i).mul(e)});function r1(s){const e=s.morphAttributes.position!==void 0,t=s.morphAttributes.normal!==void 0,n=s.morphAttributes.color!==void 0,i=s.morphAttributes.position||s.morphAttributes.normal||s.morphAttributes.color,r=i!==void 0?i.length:0;let o=vd.get(s);if(o===void 0||o.count!==r){let T=function(){g.dispose(),vd.delete(s),s.removeEventListener("dispose",T)};var a=T;o!==void 0&&o.texture.dispose();const c=s.morphAttributes.position||[],l=s.morphAttributes.normal||[],u=s.morphAttributes.color||[];let h=0;e===!0&&(h=1),t===!0&&(h=2),n===!0&&(h=3);let d=s.attributes.position.count*h,f=1;const m=4096;d>m&&(f=Math.ceil(d/m),d=m);const _=new Float32Array(d*f*4*r),g=new cp(_,d,f,r);g.type=rn,g.needsUpdate=!0;const p=h*4;for(let S=0;S<r;S++){const v=c[S],P=l[S],N=u[S],w=d*f*4*S;for(let F=0;F<v.count;F++){const E=F*p;e===!0&&(mi.fromBufferAttribute(v,F),_[w+E+0]=mi.x,_[w+E+1]=mi.y,_[w+E+2]=mi.z,_[w+E+3]=0),t===!0&&(mi.fromBufferAttribute(P,F),_[w+E+4]=mi.x,_[w+E+5]=mi.y,_[w+E+6]=mi.z,_[w+E+7]=0),n===!0&&(mi.fromBufferAttribute(N,F),_[w+E+8]=mi.x,_[w+E+9]=mi.y,_[w+E+10]=mi.z,_[w+E+11]=N.itemSize===4?mi.w:1)}}o={count:r,texture:g,stride:h,size:new Ee(d,f)},vd.set(s,o),s.addEventListener("dispose",T)}return o}class o1 extends Ve{static get type(){return"MorphNode"}constructor(e){super("void"),this.mesh=e,this.morphBaseInfluence=Ie(1),this.updateType=Ye.OBJECT}setup(e){const{geometry:t}=e,n=t.morphAttributes.position!==void 0,i=t.hasAttribute("normal")&&t.morphAttributes.normal!==void 0,r=t.morphAttributes.position||t.morphAttributes.normal||t.morphAttributes.color,o=r!==void 0?r.length:0,{texture:a,stride:c,size:l}=r1(t);n===!0&&Jt.mulAssign(this.morphBaseInfluence),i===!0&&ci.mulAssign(this.morphBaseInfluence);const u=C(l.width);Et(o,({i:h})=>{const d=A(0).toVar();this.mesh.count>1&&this.mesh.morphTexture!==null&&this.mesh.morphTexture!==void 0?d.assign(Zt(this.mesh.morphTexture,xn(C(h).add(1),C(Il))).r):d.assign(Ct("morphTargetInfluences","float").element(h).toVar()),n===!0&&Jt.addAssign(Kg({bufferMap:a,influence:d,stride:c,width:u,depth:h,offset:C(0)})),i===!0&&ci.addAssign(Kg({bufferMap:a,influence:d,stride:c,width:u,depth:h,offset:C(1)}))})}update(){const e=this.morphBaseInfluence;this.mesh.geometry.morphTargetsRelative?e.value=1:e.value=1-this.mesh.morphTargetInfluences.reduce((t,n)=>t+n,0)}}const k0=j(o1);class ac extends Ve{static get type(){return"LightingNode"}constructor(){super("vec3"),this.isLightingNode=!0}}class a1 extends ac{static get type(){return"AONode"}constructor(e=null){super(),this.aoNode=e}setup(e){e.context.ambientOcclusion.mulAssign(this.aoNode)}}class c1 extends mv{static get type(){return"LightingContextNode"}constructor(e,t=null,n=null,i=null){super(e),this.lightingModel=t,this.backdropNode=n,this.backdropAlphaNode=i,this._value=null}getContext(){const{backdropNode:e,backdropAlphaNode:t}=this,n=I().toVar("directDiffuse"),i=I().toVar("directSpecular"),r=I().toVar("indirectDiffuse"),o=I().toVar("indirectSpecular"),a={directDiffuse:n,directSpecular:i,indirectDiffuse:r,indirectSpecular:o};return{radiance:I().toVar("radiance"),irradiance:I().toVar("irradiance"),iblIrradiance:I().toVar("iblIrradiance"),ambientOcclusion:A(1).toVar("ambientOcclusion"),reflectedLight:a,backdrop:e,backdropAlpha:t}}setup(e){return this.value=this._value||(this._value=this.getContext()),this.value.lightingModel=this.lightingModel||e.context.lightingModel,super.setup(e)}}const H0=j(c1);class l1 extends ac{static get type(){return"IrradianceNode"}constructor(e){super(),this.node=e}setup(e){e.context.irradiance.addAssign(this.node)}}let mc,gc;class pn extends Ve{static get type(){return"ScreenNode"}constructor(e){super(),this.scope=e,this.isViewportNode=!0}getNodeType(){return this.scope===pn.VIEWPORT?"vec4":"vec2"}getUpdateType(){let e=Ye.NONE;return(this.scope===pn.SIZE||this.scope===pn.VIEWPORT)&&(e=Ye.RENDER),this.updateType=e,e}update({renderer:e}){const t=e.getRenderTarget();this.scope===pn.VIEWPORT?t!==null?gc.copy(t.viewport):(e.getViewport(gc),gc.multiplyScalar(e.getPixelRatio())):t!==null?(mc.width=t.width,mc.height=t.height):e.getDrawingBufferSize(mc)}setup(){const e=this.scope;let t=null;return e===pn.SIZE?t=Ie(mc||(mc=new Ee)):e===pn.VIEWPORT?t=Ie(gc||(gc=new je)):t=se(Fl.div(hl)),t}generate(e){if(this.scope===pn.COORDINATE){let t=e.getFragCoord();if(e.isFlipY()){const n=e.getNodeProperties(hl).outputNode.build(e);t=`${e.getType("vec2")}( ${t}.x, ${n}.y - ${t}.y )`}return t}return super.generate(e)}}pn.COORDINATE="coordinate";pn.VIEWPORT="viewport";pn.SIZE="size";pn.UV="uv";const Ss=de(pn,pn.UV),hl=de(pn,pn.SIZE),Fl=de(pn,pn.COORDINATE),tm=de(pn,pn.VIEWPORT),W0=tm.zw,$0=Fl.sub(tm.xy),u1=$0.div(W0),h1=z(()=>(console.warn('TSL.ViewportNode: "viewportResolution" is deprecated. Use "screenSize" instead.'),hl),"vec2").once()(),d1=z(()=>(console.warn('TSL.ViewportNode: "viewportTopLeft" is deprecated. Use "screenUV" instead.'),Ss),"vec2").once()(),f1=z(()=>(console.warn('TSL.ViewportNode: "viewportBottomLeft" is deprecated. Use "screenUV.flipY()" instead.'),Ss.flipY()),"vec2").once()(),_c=new Ee;class Dh extends vs{static get type(){return"ViewportTextureNode"}constructor(e=Ss,t=null,n=null){n===null&&(n=new Gx,n.minFilter=ti),super(n,e,t),this.generateMipmaps=!1,this.isOutputTextureNode=!0,this.updateBeforeType=Ye.FRAME}updateBefore(e){const t=e.renderer;t.getDrawingBufferSize(_c);const n=this.value;(n.image.width!==_c.width||n.image.height!==_c.height)&&(n.image.width=_c.width,n.image.height=_c.height,n.needsUpdate=!0);const i=n.generateMipmaps;n.generateMipmaps=this.generateMipmaps,t.copyFramebufferToTexture(n),n.generateMipmaps=i}clone(){const e=new this.constructor(this.uvNode,this.levelNode,this.value);return e.generateMipmaps=this.generateMipmaps,e}}const p1=j(Dh),nm=j(Dh,null,null,{generateMipmaps:!0});let Td=null;class m1 extends Dh{static get type(){return"ViewportDepthTextureNode"}constructor(e=Ss,t=null){Td===null&&(Td=new Qs),super(e,t,Td)}}const im=j(m1);class ii extends Ve{static get type(){return"ViewportDepthNode"}constructor(e,t=null){super("float"),this.scope=e,this.valueNode=t,this.isViewportDepthNode=!0}generate(e){const{scope:t}=this;return t===ii.DEPTH_BASE?e.getFragDepth():super.generate(e)}setup({camera:e}){const{scope:t}=this,n=this.valueNode;let i=null;if(t===ii.DEPTH_BASE)n!==null&&(i=q0().assign(n));else if(t===ii.DEPTH)e.isPerspectiveCamera?i=X0(on.z,ur,hr):i=fa(on.z,ur,hr);else if(t===ii.LINEAR_DEPTH)if(n!==null)if(e.isPerspectiveCamera){const r=sm(n,ur,hr);i=fa(r,ur,hr)}else i=n;else i=fa(on.z,ur,hr);return i}}ii.DEPTH_BASE="depthBase";ii.DEPTH="depth";ii.LINEAR_DEPTH="linearDepth";const fa=(s,e,t)=>s.add(e).div(e.sub(t)),g1=(s,e,t)=>e.sub(t).mul(s).sub(e),X0=(s,e,t)=>e.add(s).mul(t).div(t.sub(e).mul(s)),sm=(s,e,t)=>e.mul(t).div(t.sub(e).mul(s).sub(t)),rm=(s,e,t)=>{e=e.max(1e-6).toVar();const n=ds(s.negate().div(e)),i=ds(t.div(e));return n.div(i)},_1=(s,e,t)=>{const n=s.mul(Th(t.div(e)));return A(Math.E).pow(n).mul(e).negate()},q0=j(ii,ii.DEPTH_BASE),om=de(ii,ii.DEPTH),Zu=j(ii,ii.LINEAR_DEPTH),x1=Zu(im());om.assign=s=>q0(s);class y1 extends Ve{constructor(e){super("float"),this.name=e,this.isBuiltinNode=!0}generate(){return this.name}}const v1=j(y1);class Ii extends Ve{static get type(){return"ClippingNode"}constructor(e=Ii.DEFAULT){super(),this.scope=e}setup(e){super.setup(e);const t=e.clippingContext,{intersectionPlanes:n,unionPlanes:i}=t;return this.hardwareClipping=e.material.hardwareClipping,this.scope===Ii.ALPHA_TO_COVERAGE?this.setupAlphaToCoverage(n,i):this.scope===Ii.HARDWARE?this.setupHardwareClipping(i,e):this.setupDefault(n,i)}setupAlphaToCoverage(e,t){return z(()=>{const n=A().toVar("distanceToPlane"),i=A().toVar("distanceToGradient"),r=A(1).toVar("clipOpacity"),o=t.length;if(this.hardwareClipping===!1&&o>0){const c=zs(t);Et(o,({i:l})=>{const u=c.element(l);n.assign(on.dot(u.xyz).negate().add(u.w)),i.assign(n.fwidth().div(2)),r.mulAssign(Ks(i.negate(),i,n))})}const a=e.length;if(a>0){const c=zs(e),l=A(1).toVar("intersectionClipOpacity");Et(a,({i:u})=>{const h=c.element(u);n.assign(on.dot(h.xyz).negate().add(h.w)),i.assign(n.fwidth().div(2)),l.mulAssign(Ks(i.negate(),i,n).oneMinus())}),r.mulAssign(l.oneMinus())}bt.a.mulAssign(r),bt.a.equal(0).discard()})()}setupDefault(e,t){return z(()=>{const n=t.length;if(this.hardwareClipping===!1&&n>0){const r=zs(t);Et(n,({i:o})=>{const a=r.element(o);on.dot(a.xyz).greaterThan(a.w).discard()})}const i=e.length;if(i>0){const r=zs(e),o=Ys(!0).toVar("clipped");Et(i,({i:a})=>{const c=r.element(a);o.assign(on.dot(c.xyz).greaterThan(c.w).and(o))}),o.discard()}})()}setupHardwareClipping(e,t){const n=e.length;return t.enableHardwareClipping(n),z(()=>{const i=zs(e),r=v1(t.getClipDistance());Et(n,({i:o})=>{const a=i.element(o),c=on.dot(a.xyz).sub(a.w).negate();r.element(o).assign(c)})})()}}Ii.ALPHA_TO_COVERAGE="alphaToCoverage";Ii.DEFAULT="default";Ii.HARDWARE="hardware";const T1=()=>J(new Ii),S1=()=>J(new Ii(Ii.ALPHA_TO_COVERAGE)),b1=()=>J(new Ii(Ii.HARDWARE)),M1=.05,Zg=z(([s])=>Js(Ke(1e4,yi(Ke(17,s.x).add(Ke(.1,s.y)))).mul(cn(.1,Ft(yi(Ke(13,s.y).add(s.x))))))),Qg=z(([s])=>Zg(se(Zg(s.xy),s.z))),E1=z(([s])=>{const e=en($s(Vp(s.xyz)),$s(Gp(s.xyz))),t=A(1).div(A(M1).mul(e)).toVar("pixScale"),n=se(Ka(fs(ds(t))),Ka(Sh(ds(t)))),i=se(Qg(fs(n.x.mul(s.xyz))),Qg(fs(n.y.mul(s.xyz)))),r=Js(ds(t)),o=cn(Ke(r.oneMinus(),i.x),Ke(r,i.y)),a=ai(r,r.oneMinus()),c=I(o.mul(o).div(Ke(2,a).mul(pt(1,a))),o.sub(Ke(.5,a)).div(pt(1,a)),pt(1,pt(1,o).mul(pt(1,o)).div(Ke(2,a).mul(pt(1,a))))),l=o.lessThan(a.oneMinus()).select(o.lessThan(a).select(c.x,c.y),c.z);return xs(l,1e-6,1)}).setLayout({name:"getAlphaHashThreshold",type:"float",inputs:[{name:"position",type:"vec3"}]});class tn extends Hn{static get type(){return"NodeMaterial"}get type(){return this.constructor.type}set type(e){}constructor(){super(),this.isNodeMaterial=!0,this.fog=!0,this.lights=!1,this.hardwareClipping=!1,this.lightsNode=null,this.envNode=null,this.aoNode=null,this.colorNode=null,this.normalNode=null,this.opacityNode=null,this.backdropNode=null,this.backdropAlphaNode=null,this.alphaTestNode=null,this.positionNode=null,this.geometryNode=null,this.depthNode=null,this.shadowPositionNode=null,this.receivedShadowNode=null,this.castShadowNode=null,this.outputNode=null,this.mrtNode=null,this.fragmentNode=null,this.vertexNode=null}customProgramCacheKey(){return this.type+jx(this)}build(e){this.setup(e)}setupObserver(e){return new SN(e)}setup(e){e.context.setupNormal=()=>this.setupNormal(e),e.context.setupPositionView=()=>this.setupPositionView(e),e.context.setupModelViewProjection=()=>this.setupModelViewProjection(e);const t=e.renderer,n=t.getRenderTarget();e.addStack();const i=this.vertexNode||this.setupVertex(e);e.stack.outputNode=i,this.setupHardwareClipping(e),this.geometryNode!==null&&(e.stack.outputNode=e.stack.outputNode.bypass(this.geometryNode)),e.addFlow("vertex",e.removeStack()),e.addStack();let r;const o=this.setupClipping(e);if((this.depthWrite===!0||this.depthTest===!0)&&(n!==null?n.depthBuffer===!0&&this.setupDepth(e):t.depth===!0&&this.setupDepth(e)),this.fragmentNode===null){this.setupDiffuseColor(e),this.setupVariants(e);const a=this.setupLighting(e);o!==null&&e.stack.add(o);const c=Ue(a,bt.a).max(0);if(r=this.setupOutput(e,c),ll.assign(r),this.outputNode!==null&&(r=this.outputNode),n!==null){const l=t.getMRT(),u=this.mrtNode;l!==null?(r=l,u!==null&&(r=l.merge(u))):u!==null&&(r=u)}}else{let a=this.fragmentNode;a.isOutputStructNode!==!0&&(a=Ue(a)),r=this.setupOutput(e,a)}e.stack.outputNode=r,e.addFlow("fragment",e.removeStack()),e.monitor=this.setupObserver(e)}setupClipping(e){if(e.clippingContext===null)return null;const{unionPlanes:t,intersectionPlanes:n}=e.clippingContext;let i=null;if(t.length>0||n.length>0){const r=e.renderer.samples;this.alphaToCoverage&&r>1?i=S1():e.stack.add(T1())}return i}setupHardwareClipping(e){if(this.hardwareClipping=!1,e.clippingContext===null)return;const t=e.clippingContext.unionPlanes.length;t>0&&t<=8&&e.isAvailable("clipDistance")&&(e.stack.add(b1()),this.hardwareClipping=!0)}setupDepth(e){const{renderer:t,camera:n}=e;let i=this.depthNode;if(i===null){const r=t.getMRT();r&&r.has("depth")?i=r.get("depth"):t.logarithmicDepthBuffer===!0&&(n.isPerspectiveCamera?i=rm(on.z,ur,hr):i=fa(on.z,ur,hr))}i!==null&&om.assign(i).append()}setupPositionView(){return oc.mul(Jt).xyz}setupModelViewProjection(){return wo.mul(on)}setupVertex(e){return e.addStack(),this.setupPosition(e),e.context.vertex=e.removeStack(),em}setupPosition(e){const{object:t,geometry:n}=e;if((n.morphAttributes.position||n.morphAttributes.normal||n.morphAttributes.color)&&k0(t).append(),t.isSkinnedMesh===!0&&G0(t).append(),this.displacementMap){const i=ks("displacementMap","texture"),r=ks("displacementScale","float"),o=ks("displacementBias","float");Jt.addAssign(ci.normalize().mul(i.x.mul(r).add(o)))}return t.isBatchedMesh&&O0(t).append(),t.isInstancedMesh&&t.instanceMatrix&&t.instanceMatrix.isInstancedBufferAttribute===!0&&B0(t).append(),this.positionNode!==null&&Jt.assign(this.positionNode.context({isPositionNodeInput:!0})),Jt}setupDiffuseColor({object:e,geometry:t}){let n=this.colorNode?Ue(this.colorNode):r0;this.vertexColors===!0&&t.hasAttribute("color")&&(n=Ue(n.xyz.mul(ys("color","vec3")),n.a)),e.instanceColor&&(n=rl("vec3","vInstanceColor").mul(n)),e.isBatchedMesh&&e._colorsTexture&&(n=rl("vec3","vBatchColor").mul(n)),bt.assign(n);const i=this.opacityNode?A(this.opacityNode):Qp;if(bt.a.assign(bt.a.mul(i)),this.alphaTestNode!==null||this.alphaTest>0){const r=this.alphaTestNode!==null?A(this.alphaTestNode):s0;bt.a.lessThanEqual(r).discard()}this.alphaHash===!0&&bt.a.lessThan(E1(Jt)).discard(),this.transparent===!1&&this.blending===Ui&&this.alphaToCoverage===!1&&bt.a.assign(1)}setupVariants(){}setupOutgoingLight(){return this.lights===!0?I(0):bt.rgb}setupNormal(){return this.normalNode?I(this.normalNode):d0}setupEnvironment(){let e=null;return this.envNode?e=this.envNode:this.envMap&&(e=this.envMap.isCubeTexture?ks("envMap","cubeTexture"):ks("envMap","texture")),e}setupLightMap(e){let t=null;return e.material.lightMap&&(t=new l1(Jp)),t}setupLights(e){const t=[],n=this.setupEnvironment(e);n&&n.isLightingNode&&t.push(n);const i=this.setupLightMap(e);if(i&&i.isLightingNode&&t.push(i),this.aoNode!==null||e.material.aoMap){const o=this.aoNode!==null?this.aoNode:L0;t.push(new a1(o))}let r=this.lightsNode||e.lightsNode;return t.length>0&&(r=e.renderer.lighting.createNode([...r.getLights(),...t])),r}setupLightingModel(){}setupLighting(e){const{material:t}=e,{backdropNode:n,backdropAlphaNode:i,emissiveNode:r}=this,a=this.lights===!0||this.lightsNode!==null?this.setupLights(e):null;let c=this.setupOutgoingLight(e);if(a&&a.getScope().hasLights){const l=this.setupLightingModel(e);c=H0(a,l,n,i)}else n!==null&&(c=I(i!==null?Mt(c,n,i):n));return(r&&r.isNode===!0||t.emissive&&t.emissive.isColor===!0)&&(pf.assign(I(r||a0)),c=c.add(pf)),c}setupOutput(e,t){if(this.fog===!0){const n=e.fogNode;n&&(ll.assign(t),t=Ue(n))}return t}setDefaultValues(e){for(const n in e){const i=e[n];this[n]===void 0&&(this[n]=i,i&&i.clone&&(this[n]=i.clone()))}const t=Object.getOwnPropertyDescriptors(e.constructor.prototype);for(const n in t)Object.getOwnPropertyDescriptor(this.constructor.prototype,n)===void 0&&t[n].get!==void 0&&Object.defineProperty(this.constructor.prototype,n,t[n])}toJSON(e){const t=e===void 0||typeof e=="string";t&&(e={textures:{},images:{},nodes:{}});const n=Hn.prototype.toJSON.call(this,e),i=Hu(this);n.inputNodes={};for(const{property:o,childNode:a}of i)n.inputNodes[o]=a.toJSON(e).uuid;function r(o){const a=[];for(const c in o){const l=o[c];delete l.metadata,a.push(l)}return a}if(t){const o=r(e.textures),a=r(e.images),c=r(e.nodes);o.length>0&&(n.textures=o),a.length>0&&(n.images=a),c.length>0&&(n.nodes=c)}return n}copy(e){return this.lightsNode=e.lightsNode,this.envNode=e.envNode,this.colorNode=e.colorNode,this.normalNode=e.normalNode,this.opacityNode=e.opacityNode,this.backdropNode=e.backdropNode,this.backdropAlphaNode=e.backdropAlphaNode,this.alphaTestNode=e.alphaTestNode,this.positionNode=e.positionNode,this.geometryNode=e.geometryNode,this.depthNode=e.depthNode,this.shadowPositionNode=e.shadowPositionNode,this.receivedShadowNode=e.receivedShadowNode,this.castShadowNode=e.castShadowNode,this.outputNode=e.outputNode,this.mrtNode=e.mrtNode,this.fragmentNode=e.fragmentNode,this.vertexNode=e.vertexNode,super.copy(e)}}const A1=new Vx;class R1 extends tn{static get type(){return"LineBasicNodeMaterial"}constructor(e){super(),this.isLineBasicNodeMaterial=!0,this.setDefaultValues(A1),this.setValues(e)}}const w1=new EM;class N1 extends tn{static get type(){return"LineDashedNodeMaterial"}constructor(e){super(),this.isLineDashedNodeMaterial=!0,this.setDefaultValues(w1),this.dashOffset=0,this.offsetNode=null,this.dashScaleNode=null,this.dashSizeNode=null,this.gapSizeNode=null,this.setValues(e)}setupVariants(){const e=this.offsetNode?A(this.offsetNode):P0,t=this.dashScaleNode?A(this.dashScaleNode):w0,n=this.dashSizeNode?A(this.dashSizeNode):N0,i=this.gapSizeNode?A(this.gapSizeNode):C0;Cu.assign(n),mf.assign(i);const r=li(ys("lineDistance").mul(t));(e?r.add(e):r).mod(Cu.add(mf)).greaterThan(Cu).discard()}}let Sd=null;class C1 extends Dh{static get type(){return"ViewportSharedTextureNode"}constructor(e=Ss,t=null){Sd===null&&(Sd=new Gx),super(e,t,Sd)}updateReference(){return this}}const P1=j(C1),Y0=s=>J(s).mul(.5).add(.5),D1=s=>J(s).mul(2).sub(1),L1=new vM;class U1 extends tn{static get type(){return"MeshNormalNodeMaterial"}constructor(e){super(),this.isMeshNormalNodeMaterial=!0,this.setDefaultValues(L1),this.setValues(e)}setupDiffuseColor(){const e=this.opacityNode?A(this.opacityNode):Qp;bt.assign(Ue(Y0(Qt),e))}}class I1 extends ln{static get type(){return"EquirectUVNode"}constructor(e=Yp){super("vec2"),this.dirNode=e}setup(){const e=this.dirNode,t=e.z.atan(e.x).mul(1/(Math.PI*2)).add(.5),n=e.y.clamp(-1,1).asin().mul(1/Math.PI).add(.5);return se(t,n)}}const am=j(I1);class j0 extends Bx{constructor(e=1,t={}){super(e,t),this.isCubeRenderTarget=!0}fromEquirectangularTexture(e,t){const n=t.minFilter,i=t.generateMipmaps;t.generateMipmaps=!0,this.texture.type=t.type,this.texture.colorSpace=t.colorSpace,this.texture.generateMipmaps=t.generateMipmaps,this.texture.minFilter=t.minFilter,this.texture.magFilter=t.magFilter;const r=new Pr(5,5,5),o=am(Yp),a=new tn;a.colorNode=ht(t,o,0),a.side=Wt,a.blending=Si;const c=new On(r,a),l=new dp;l.add(c),t.minFilter===ti&&(t.minFilter=yn);const u=new Fx(1,10,this),h=e.getMRT();return e.setMRT(null),u.update(e,l),e.setMRT(h),t.minFilter=n,t.currentGenerateMipmaps=i,c.geometry.dispose(),c.material.dispose(),this}}const Ic=new WeakMap;class F1 extends ln{static get type(){return"CubeMapNode"}constructor(e){super("vec3"),this.envNode=e,this._cubeTexture=null,this._cubeTextureNode=Za();const t=new hh;t.isRenderTargetTexture=!0,this._defaultTexture=t,this.updateBeforeType=Ye.RENDER}updateBefore(e){const{renderer:t,material:n}=e,i=this.envNode;if(i.isTextureNode||i.isMaterialReferenceNode){const r=i.isTextureNode?i.value:n[i.property];if(r&&r.isTexture){const o=r.mapping;if(o===Mr||o===Er){if(Ic.has(r)){const a=Ic.get(r);Jg(a,r.mapping),this._cubeTexture=a}else{const a=r.image;if(B1(a)){const c=new j0(a.height);c.fromEquirectangularTexture(t,r),Jg(c.texture,r.mapping),this._cubeTexture=c.texture,Ic.set(r,c.texture),r.addEventListener("dispose",K0)}else this._cubeTexture=this._defaultTexture}this._cubeTextureNode.value=this._cubeTexture}else this._cubeTextureNode=this.envNode}}}setup(e){return this.updateBefore(e),this._cubeTextureNode}}function B1(s){return s==null?!1:s.height>0}function K0(s){const e=s.target;e.removeEventListener("dispose",K0);const t=Ic.get(e);t!==void 0&&(Ic.delete(e),t.dispose())}function Jg(s,e){e===Mr?s.mapping=Fi:e===Er&&(s.mapping=Bi)}const Z0=j(F1);class cm extends ac{static get type(){return"BasicEnvironmentNode"}constructor(e=null){super(),this.envNode=e}setup(e){e.context.environment=Z0(this.envNode)}}class O1 extends ac{static get type(){return"BasicLightMapNode"}constructor(e=null){super(),this.lightMapNode=e}setup(e){const t=A(1/Math.PI);e.context.irradianceLightMap=this.lightMapNode.mul(t)}}class Lh{start(){}finish(){}direct(){}directRectArea(){}indirect(){}ambientOcclusion(){}}class Q0 extends Lh{constructor(){super()}indirect(e,t,n){const i=e.ambientOcclusion,r=e.reflectedLight,o=n.context.irradianceLightMap;r.indirectDiffuse.assign(Ue(0)),o?r.indirectDiffuse.addAssign(o):r.indirectDiffuse.addAssign(Ue(1,1,1,0)),r.indirectDiffuse.mulAssign(i),r.indirectDiffuse.mulAssign(bt.rgb)}finish(e,t,n){const i=n.material,r=e.outgoingLight,o=n.context.environment;if(o)switch(i.combine){case vl:r.rgb.assign(Mt(r.rgb,r.rgb.mul(o.rgb),Uc.mul(Lu)));break;case yx:r.rgb.assign(Mt(r.rgb,o.rgb,Uc.mul(Lu)));break;case vx:r.rgb.addAssign(o.rgb.mul(Uc.mul(Lu)));break;default:console.warn("THREE.BasicLightingModel: Unsupported .combine value:",i.combine);break}}}const V1=new uh;class J0 extends tn{static get type(){return"MeshBasicNodeMaterial"}constructor(e){super(),this.isMeshBasicNodeMaterial=!0,this.lights=!0,this.setDefaultValues(V1),this.setValues(e)}setupNormal(){return Oi}setupEnvironment(e){const t=super.setupEnvironment(e);return t?new cm(t):null}setupLightMap(e){let t=null;return e.material.lightMap&&(t=new O1(Jp)),t}setupOutgoingLight(){return bt.rgb}setupLightingModel(){return new Q0}}const Qa=z(({f0:s,f90:e,dotVH:t})=>{const n=t.mul(-5.55473).sub(6.98316).mul(t).exp2();return s.mul(n.oneMinus()).add(e.mul(n))}),Mo=z(s=>s.diffuseColor.mul(1/Math.PI)),G1=()=>A(.25),z1=z(({dotNH:s})=>Xu.mul(A(.5)).add(1).mul(A(1/Math.PI)).mul(s.pow(Xu))),k1=z(({lightDirection:s})=>{const e=s.add(Vt).normalize(),t=Qt.dot(e).clamp(),n=Vt.dot(e).clamp(),i=Qa({f0:Qn,f90:1,dotVH:n}),r=G1(),o=z1({dotNH:t});return i.mul(r).mul(o)});class eT extends Q0{constructor(e=!0){super(),this.specular=e}direct({lightDirection:e,lightColor:t,reflectedLight:n}){const r=Qt.dot(e).clamp().mul(t);n.directDiffuse.addAssign(r.mul(Mo({diffuseColor:bt.rgb}))),this.specular===!0&&n.directSpecular.addAssign(r.mul(k1({lightDirection:e})).mul(Uc))}indirect({ambientOcclusion:e,irradiance:t,reflectedLight:n}){n.indirectDiffuse.addAssign(t.mul(Mo({diffuseColor:bt}))),n.indirectDiffuse.mulAssign(e)}}const H1=new TM;class W1 extends tn{static get type(){return"MeshLambertNodeMaterial"}constructor(e){super(),this.isMeshLambertNodeMaterial=!0,this.lights=!0,this.setDefaultValues(H1),this.setValues(e)}setupEnvironment(e){const t=super.setupEnvironment(e);return t?new cm(t):null}setupLightingModel(){return new eT(!1)}}const $1=new xM;class X1 extends tn{static get type(){return"MeshPhongNodeMaterial"}constructor(e){super(),this.isMeshPhongNodeMaterial=!0,this.lights=!0,this.shininessNode=null,this.specularNode=null,this.setDefaultValues($1),this.setValues(e)}setupEnvironment(e){const t=super.setupEnvironment(e);return t?new cm(t):null}setupLightingModel(){return new eT}setupVariants(){const e=(this.shininessNode?A(this.shininessNode):o0).max(1e-4);Xu.assign(e);const t=this.specularNode||c0;Qn.assign(t)}copy(e){return this.shininessNode=e.shininessNode,this.specularNode=e.specularNode,super.copy(e)}}const tT=z(s=>{if(s.geometry.hasAttribute("normal")===!1)return A(0);const e=Oi.dFdx().abs().max(Oi.dFdy().abs());return e.x.max(e.y).max(e.z)}),lm=z(s=>{const{roughness:e}=s,t=tT();let n=e.max(.0525);return n=n.add(t),n=n.min(1),n}),nT=z(({alpha:s,dotNL:e,dotNV:t})=>{const n=s.pow2(),i=e.mul(n.add(n.oneMinus().mul(t.pow2())).sqrt()),r=t.mul(n.add(n.oneMinus().mul(e.pow2())).sqrt());return Zi(.5,i.add(r).max(zy))}).setLayout({name:"V_GGX_SmithCorrelated",type:"float",inputs:[{name:"alpha",type:"float"},{name:"dotNL",type:"float"},{name:"dotNV",type:"float"}]}),q1=z(({alphaT:s,alphaB:e,dotTV:t,dotBV:n,dotTL:i,dotBL:r,dotNV:o,dotNL:a})=>{const c=a.mul(I(s.mul(t),e.mul(n),o).length()),l=o.mul(I(s.mul(i),e.mul(r),a).length());return Zi(.5,c.add(l)).saturate()}).setLayout({name:"V_GGX_SmithCorrelated_Anisotropic",type:"float",inputs:[{name:"alphaT",type:"float",qualifier:"in"},{name:"alphaB",type:"float",qualifier:"in"},{name:"dotTV",type:"float",qualifier:"in"},{name:"dotBV",type:"float",qualifier:"in"},{name:"dotTL",type:"float",qualifier:"in"},{name:"dotBL",type:"float",qualifier:"in"},{name:"dotNV",type:"float",qualifier:"in"},{name:"dotNL",type:"float",qualifier:"in"}]}),iT=z(({alpha:s,dotNH:e})=>{const t=s.pow2(),n=e.pow2().mul(t.oneMinus()).oneMinus();return t.div(n.pow2()).mul(1/Math.PI)}).setLayout({name:"D_GGX",type:"float",inputs:[{name:"alpha",type:"float"},{name:"dotNH",type:"float"}]}),Y1=A(1/Math.PI),j1=z(({alphaT:s,alphaB:e,dotNH:t,dotTH:n,dotBH:i})=>{const r=s.mul(e),o=I(e.mul(n),s.mul(i),r.mul(t)),a=o.dot(o),c=r.div(a);return Y1.mul(r.mul(c.pow2()))}).setLayout({name:"D_GGX_Anisotropic",type:"float",inputs:[{name:"alphaT",type:"float",qualifier:"in"},{name:"alphaB",type:"float",qualifier:"in"},{name:"dotNH",type:"float",qualifier:"in"},{name:"dotTH",type:"float",qualifier:"in"},{name:"dotBH",type:"float",qualifier:"in"}]}),vf=z(s=>{const{lightDirection:e,f0:t,f90:n,roughness:i,f:r,USE_IRIDESCENCE:o,USE_ANISOTROPY:a}=s,c=s.normalView||Qt,l=i.pow2(),u=e.add(Vt).normalize(),h=c.dot(e).clamp(),d=c.dot(Vt).clamp(),f=c.dot(u).clamp(),m=Vt.dot(u).clamp();let _=Qa({f0:t,f90:n,dotVH:m}),g,p;if(il(o)&&(_=vh.mix(_,r)),il(a)){const T=Pc.dot(e),S=Pc.dot(Vt),v=Pc.dot(u),P=go.dot(e),N=go.dot(Vt),w=go.dot(u);g=q1({alphaT:$u,alphaB:l,dotTV:S,dotBV:N,dotTL:T,dotBL:P,dotNV:d,dotNL:h}),p=j1({alphaT:$u,alphaB:l,dotNH:f,dotTH:v,dotBH:w})}else g=nT({alpha:l,dotNL:h,dotNV:d}),p=iT({alpha:l,dotNH:f});return _.mul(g).mul(p)}),um=z(({roughness:s,dotNV:e})=>{const t=Ue(-1,-.0275,-.572,.022),n=Ue(1,.0425,1.04,-.04),i=s.mul(t).add(n),r=i.x.mul(i.x).min(e.mul(-9.28).exp2()).mul(i.x).add(i.y);return se(-1.04,1.04).mul(r).add(i.zw)}).setLayout({name:"DFGApprox",type:"vec2",inputs:[{name:"roughness",type:"float"},{name:"dotNV",type:"vec3"}]}),sT=z(s=>{const{dotNV:e,specularColor:t,specularF90:n,roughness:i}=s,r=um({dotNV:e,roughness:i});return t.mul(r.x).add(n.mul(r.y))}),rT=z(({f:s,f90:e,dotVH:t})=>{const n=t.oneMinus().saturate(),i=n.mul(n),r=n.mul(i,i).clamp(0,.9999);return s.sub(I(e).mul(r)).div(r.oneMinus())}).setLayout({name:"Schlick_to_F0",type:"vec3",inputs:[{name:"f",type:"vec3"},{name:"f90",type:"float"},{name:"dotVH",type:"float"}]}),K1=z(({roughness:s,dotNH:e})=>{const t=s.pow2(),n=A(1).div(t),r=e.pow2().oneMinus().max(.0078125);return A(2).add(n).mul(r.pow(n.mul(.5))).div(2*Math.PI)}).setLayout({name:"D_Charlie",type:"float",inputs:[{name:"roughness",type:"float"},{name:"dotNH",type:"float"}]}),Z1=z(({dotNV:s,dotNL:e})=>A(1).div(A(4).mul(e.add(s).sub(e.mul(s))))).setLayout({name:"V_Neubelt",type:"float",inputs:[{name:"dotNV",type:"float"},{name:"dotNL",type:"float"}]}),Q1=z(({lightDirection:s})=>{const e=s.add(Vt).normalize(),t=Qt.dot(s).clamp(),n=Qt.dot(Vt).clamp(),i=Qt.dot(e).clamp(),r=K1({roughness:yh,dotNH:i}),o=Z1({dotNV:n,dotNL:t});return Jr.mul(r).mul(o)}),J1=z(({N:s,V:e,roughness:t})=>{const r=.0078125,o=s.dot(e).saturate(),a=se(t,o.oneMinus().sqrt());return a.assign(a.mul(.984375).add(r)),a}).setLayout({name:"LTC_Uv",type:"vec2",inputs:[{name:"N",type:"vec3"},{name:"V",type:"vec3"},{name:"roughness",type:"float"}]}),eP=z(({f:s})=>{const e=s.length();return en(e.mul(e).add(s.z).div(e.add(1)),0)}).setLayout({name:"LTC_ClippedSphereFormFactor",type:"float",inputs:[{name:"f",type:"vec3"}]}),uu=z(({v1:s,v2:e})=>{const t=s.dot(e),n=t.abs().toVar(),i=n.mul(.0145206).add(.4965155).mul(n).add(.8543985).toVar(),r=n.add(4.1616724).mul(n).add(3.417594).toVar(),o=i.div(r),a=t.greaterThan(0).select(o,en(t.mul(t).oneMinus(),1e-7).inverseSqrt().mul(.5).sub(o));return s.cross(e).mul(a)}).setLayout({name:"LTC_EdgeVectorFormFactor",type:"vec3",inputs:[{name:"v1",type:"vec3"},{name:"v2",type:"vec3"}]}),e_=z(({N:s,V:e,P:t,mInv:n,p0:i,p1:r,p2:o,p3:a})=>{const c=r.sub(i).toVar(),l=a.sub(i).toVar(),u=c.cross(l),h=I().toVar();return it(u.dot(t.sub(i)).greaterThanEqual(0),()=>{const d=e.sub(s.mul(e.dot(s))).normalize(),f=s.cross(d).negate(),m=n.mul(Wn(d,f,s).transpose()).toVar(),_=m.mul(i.sub(t)).normalize().toVar(),g=m.mul(r.sub(t)).normalize().toVar(),p=m.mul(o.sub(t)).normalize().toVar(),T=m.mul(a.sub(t)).normalize().toVar(),S=I(0).toVar();S.addAssign(uu({v1:_,v2:g})),S.addAssign(uu({v1:g,v2:p})),S.addAssign(uu({v1:p,v2:T})),S.addAssign(uu({v1:T,v2:_})),h.assign(I(eP({f:S})))}),h}).setLayout({name:"LTC_Evaluate",type:"vec3",inputs:[{name:"N",type:"vec3"},{name:"V",type:"vec3"},{name:"P",type:"vec3"},{name:"mInv",type:"mat3"},{name:"p0",type:"vec3"},{name:"p1",type:"vec3"},{name:"p2",type:"vec3"},{name:"p3",type:"vec3"}]}),Uh=1/6,oT=s=>Ke(Uh,Ke(s,Ke(s,s.negate().add(3)).sub(3)).add(1)),Tf=s=>Ke(Uh,Ke(s,Ke(s,Ke(3,s).sub(6))).add(4)),aT=s=>Ke(Uh,Ke(s,Ke(s,Ke(-3,s).add(3)).add(3)).add(1)),Sf=s=>Ke(Uh,ji(s,3)),t_=s=>oT(s).add(Tf(s)),n_=s=>aT(s).add(Sf(s)),i_=s=>cn(-1,Tf(s).div(oT(s).add(Tf(s)))),s_=s=>cn(1,Sf(s).div(aT(s).add(Sf(s)))),r_=(s,e,t)=>{const n=s.uvNode,i=Ke(n,e.zw).add(.5),r=fs(i),o=Js(i),a=t_(o.x),c=n_(o.x),l=i_(o.x),u=s_(o.x),h=i_(o.y),d=s_(o.y),f=se(r.x.add(l),r.y.add(h)).sub(.5).mul(e.xy),m=se(r.x.add(u),r.y.add(h)).sub(.5).mul(e.xy),_=se(r.x.add(l),r.y.add(d)).sub(.5).mul(e.xy),g=se(r.x.add(u),r.y.add(d)).sub(.5).mul(e.xy),p=t_(o.y).mul(cn(a.mul(s.sample(f).level(t)),c.mul(s.sample(m).level(t)))),T=n_(o.y).mul(cn(a.mul(s.sample(_).level(t)),c.mul(s.sample(g).level(t))));return p.add(T)},cT=z(([s,e=A(3)])=>{const t=se(s.size(C(e))),n=se(s.size(C(e.add(1)))),i=Zi(1,t),r=Zi(1,n),o=r_(s,Ue(i,t),fs(e)),a=r_(s,Ue(r,n),Sh(e));return Js(e).mix(o,a)}),o_=z(([s,e,t,n,i])=>{const r=I(Wp(e.negate(),js(s),Zi(1,n))),o=I($s(i[0].xyz),$s(i[1].xyz),$s(i[2].xyz));return js(r).mul(t.mul(o))}).setLayout({name:"getVolumeTransmissionRay",type:"vec3",inputs:[{name:"n",type:"vec3"},{name:"v",type:"vec3"},{name:"thickness",type:"float"},{name:"ior",type:"float"},{name:"modelMatrix",type:"mat4"}]}),tP=z(([s,e])=>s.mul(xs(e.mul(2).sub(2),0,1))).setLayout({name:"applyIorToRoughness",type:"float",inputs:[{name:"roughness",type:"float"},{name:"ior",type:"float"}]}),nP=nm(),iP=nm(),a_=z(([s,e,t],{material:n})=>{const r=(n.side===Wt?nP:iP).sample(s),o=ds(hl.x).mul(tP(e,t));return cT(r,o)}),c_=z(([s,e,t])=>(it(t.notEqual(0),()=>{const n=Th(e).negate().div(t);return Fp(n.negate().mul(s))}),I(1))).setLayout({name:"volumeAttenuation",type:"vec3",inputs:[{name:"transmissionDistance",type:"float"},{name:"attenuationColor",type:"vec3"},{name:"attenuationDistance",type:"float"}]}),sP=z(([s,e,t,n,i,r,o,a,c,l,u,h,d,f,m])=>{let _,g;if(m){_=Ue().toVar(),g=I().toVar();const P=u.sub(1).mul(m.mul(.025)),N=I(u.sub(P),u,u.add(P));Et({start:0,end:3},({i:w})=>{const F=N.element(w),E=o_(s,e,h,F,a),M=o.add(E),D=l.mul(c.mul(Ue(M,1))),Z=se(D.xy.div(D.w)).toVar();Z.addAssign(1),Z.divAssign(2),Z.assign(se(Z.x,Z.y.oneMinus()));const $=a_(Z,t,F);_.element(w).assign($.element(w)),_.a.addAssign($.a),g.element(w).assign(n.element(w).mul(c_($s(E),d,f).element(w)))}),_.a.divAssign(3)}else{const P=o_(s,e,h,u,a),N=o.add(P),w=l.mul(c.mul(Ue(N,1))),F=se(w.xy.div(w.w)).toVar();F.addAssign(1),F.divAssign(2),F.assign(se(F.x,F.y.oneMinus())),_=a_(F,t,u),g=n.mul(c_($s(P),d,f))}const p=g.rgb.mul(_.rgb),T=s.dot(e).clamp(),S=I(sT({dotNV:T,specularColor:i,specularF90:r,roughness:t})),v=g.r.add(g.g,g.b).div(3);return Ue(S.oneMinus().mul(p),_.a.oneMinus().mul(v).oneMinus())}),rP=Wn(3.2404542,-.969266,.0556434,-1.5371385,1.8760108,-.2040259,-.4985314,.041556,1.0572252),oP=s=>{const e=s.sqrt();return I(1).add(e).div(I(1).sub(e))},l_=(s,e)=>s.sub(e).div(s.add(e)).pow2(),aP=(s,e)=>{const t=s.mul(2*Math.PI*1e-9),n=I(54856e-17,44201e-17,52481e-17),i=I(1681e3,1795300,2208400),r=I(43278e5,93046e5,66121e5),o=A(9747e-17*Math.sqrt(2*Math.PI*45282e5)).mul(t.mul(2239900).add(e.x).cos()).mul(t.pow2().mul(-45282e5).exp());let a=n.mul(r.mul(2*Math.PI).sqrt()).mul(i.mul(t).add(e).cos()).mul(t.pow2().negate().mul(r).exp());return a=I(a.x.add(o),a.y,a.z).div(10685e-11),rP.mul(a)},cP=z(({outsideIOR:s,eta2:e,cosTheta1:t,thinFilmThickness:n,baseF0:i})=>{const r=Mt(s,e,Ks(0,.03,n)),a=s.div(r).pow2().mul(t.pow2().oneMinus()).oneMinus();it(a.lessThan(0),()=>I(1));const c=a.sqrt(),l=l_(r,s),u=Qa({f0:l,f90:1,dotVH:t}),h=u.oneMinus(),d=r.lessThan(s).select(Math.PI,0),f=A(Math.PI).sub(d),m=oP(i.clamp(0,.9999)),_=l_(m,r.toVec3()),g=Qa({f0:_,f90:1,dotVH:c}),p=I(m.x.lessThan(r).select(Math.PI,0),m.y.lessThan(r).select(Math.PI,0),m.z.lessThan(r).select(Math.PI,0)),T=r.mul(n,c,2),S=I(f).add(p),v=u.mul(g).clamp(1e-5,.9999),P=v.sqrt(),N=h.pow2().mul(g).div(I(1).sub(v)),F=u.add(N).toVar(),E=N.sub(h).toVar();return Et({start:1,end:2,condition:"<=",name:"m"},({m:M})=>{E.mulAssign(P);const D=aP(A(M).mul(T),A(M).mul(S)).mul(2);F.addAssign(E.mul(D))}),F.max(I(0))}).setLayout({name:"evalIridescence",type:"vec3",inputs:[{name:"outsideIOR",type:"float"},{name:"eta2",type:"float"},{name:"cosTheta1",type:"float"},{name:"thinFilmThickness",type:"float"},{name:"baseF0",type:"vec3"}]}),lP=z(({normal:s,viewDir:e,roughness:t})=>{const n=s.dot(e).saturate(),i=t.pow2(),r=Cn(t.lessThan(.25),A(-339.2).mul(i).add(A(161.4).mul(t)).sub(25.9),A(-8.48).mul(i).add(A(14.3).mul(t)).sub(9.95)),o=Cn(t.lessThan(.25),A(44).mul(i).sub(A(23.7).mul(t)).add(3.26),A(1.97).mul(i).sub(A(3.27).mul(t)).add(.72));return Cn(t.lessThan(.25),0,A(.1).mul(t).sub(.025)).add(r.mul(n).add(o).exp()).mul(1/Math.PI).saturate()}),bd=I(.04),Md=A(1);class lT extends Lh{constructor(e=!1,t=!1,n=!1,i=!1,r=!1,o=!1){super(),this.clearcoat=e,this.sheen=t,this.iridescence=n,this.anisotropy=i,this.transmission=r,this.dispersion=o,this.clearcoatRadiance=null,this.clearcoatSpecularDirect=null,this.clearcoatSpecularIndirect=null,this.sheenSpecularDirect=null,this.sheenSpecularIndirect=null,this.iridescenceFresnel=null,this.iridescenceF0=null}start(e){if(this.clearcoat===!0&&(this.clearcoatRadiance=I().toVar("clearcoatRadiance"),this.clearcoatSpecularDirect=I().toVar("clearcoatSpecularDirect"),this.clearcoatSpecularIndirect=I().toVar("clearcoatSpecularIndirect")),this.sheen===!0&&(this.sheenSpecularDirect=I().toVar("sheenSpecularDirect"),this.sheenSpecularIndirect=I().toVar("sheenSpecularIndirect")),this.iridescence===!0){const t=Qt.dot(Vt).clamp();this.iridescenceFresnel=cP({outsideIOR:A(1),eta2:Rp,cosTheta1:t,thinFilmThickness:wp,baseF0:Qn}),this.iridescenceF0=rT({f:this.iridescenceFresnel,f90:1,dotVH:t})}if(this.transmission===!0){const t=Xs,n=Vv.sub(Xs).normalize(),i=Nh;e.backdrop=sP(i,n,as,bt,Qn,cl,t,Li,ui,wo,Dc,Np,Pp,Cp,this.dispersion?Dp:null),e.backdropAlpha=qu,bt.a.mulAssign(Mt(1,e.backdrop.a,qu))}}computeMultiscattering(e,t,n){const i=Qt.dot(Vt).clamp(),r=um({roughness:as,dotNV:i}),a=(this.iridescenceF0?vh.mix(Qn,this.iridescenceF0):Qn).mul(r.x).add(n.mul(r.y)),l=r.x.add(r.y).oneMinus(),u=Qn.add(Qn.oneMinus().mul(.047619)),h=a.mul(u).div(l.mul(u).oneMinus());e.addAssign(a),t.addAssign(h.mul(l))}direct({lightDirection:e,lightColor:t,reflectedLight:n}){const r=Qt.dot(e).clamp().mul(t);if(this.sheen===!0&&this.sheenSpecularDirect.addAssign(r.mul(Q1({lightDirection:e}))),this.clearcoat===!0){const a=oa.dot(e).clamp().mul(t);this.clearcoatSpecularDirect.addAssign(a.mul(vf({lightDirection:e,f0:bd,f90:Md,roughness:al,normalView:oa})))}n.directDiffuse.addAssign(r.mul(Mo({diffuseColor:bt.rgb}))),n.directSpecular.addAssign(r.mul(vf({lightDirection:e,f0:Qn,f90:1,roughness:as,iridescence:this.iridescence,f:this.iridescenceFresnel,USE_IRIDESCENCE:this.iridescence,USE_ANISOTROPY:this.anisotropy})))}directRectArea({lightColor:e,lightPosition:t,halfWidth:n,halfHeight:i,reflectedLight:r,ltc_1:o,ltc_2:a}){const c=t.add(n).sub(i),l=t.sub(n).sub(i),u=t.sub(n).add(i),h=t.add(n).add(i),d=Qt,f=Vt,m=on.toVar(),_=J1({N:d,V:f,roughness:as}),g=o.sample(_).toVar(),p=a.sample(_).toVar(),T=Wn(I(g.x,0,g.y),I(0,1,0),I(g.z,0,g.w)).toVar(),S=Qn.mul(p.x).add(Qn.oneMinus().mul(p.y)).toVar();r.directSpecular.addAssign(e.mul(S).mul(e_({N:d,V:f,P:m,mInv:T,p0:c,p1:l,p2:u,p3:h}))),r.directDiffuse.addAssign(e.mul(bt).mul(e_({N:d,V:f,P:m,mInv:Wn(1,0,0,0,1,0,0,0,1),p0:c,p1:l,p2:u,p3:h})))}indirect(e,t,n){this.indirectDiffuse(e,t,n),this.indirectSpecular(e,t,n),this.ambientOcclusion(e,t,n)}indirectDiffuse({irradiance:e,reflectedLight:t}){t.indirectDiffuse.addAssign(e.mul(Mo({diffuseColor:bt})))}indirectSpecular({radiance:e,iblIrradiance:t,reflectedLight:n}){if(this.sheen===!0&&this.sheenSpecularIndirect.addAssign(t.mul(Jr,lP({normal:Qt,viewDir:Vt,roughness:yh}))),this.clearcoat===!0){const l=oa.dot(Vt).clamp(),u=sT({dotNV:l,specularColor:bd,specularF90:Md,roughness:al});this.clearcoatSpecularIndirect.addAssign(this.clearcoatRadiance.mul(u))}const i=I().toVar("singleScattering"),r=I().toVar("multiScattering"),o=t.mul(1/Math.PI);this.computeMultiscattering(i,r,cl);const a=i.add(r),c=bt.mul(a.r.max(a.g).max(a.b).oneMinus());n.indirectSpecular.addAssign(e.mul(i)),n.indirectSpecular.addAssign(r.mul(o)),n.indirectDiffuse.addAssign(c.mul(o))}ambientOcclusion({ambientOcclusion:e,reflectedLight:t}){const i=Qt.dot(Vt).clamp().add(e),r=as.mul(-16).oneMinus().negate().exp2(),o=e.sub(i.pow(r).oneMinus()).clamp();this.clearcoat===!0&&this.clearcoatSpecularIndirect.mulAssign(e),this.sheen===!0&&this.sheenSpecularIndirect.mulAssign(e),t.indirectDiffuse.mulAssign(e),t.indirectSpecular.mulAssign(o)}finish(e){const{outgoingLight:t}=e;if(this.clearcoat===!0){const n=oa.dot(Vt).clamp(),i=Qa({dotVH:n,f0:bd,f90:Md}),r=t.mul(Wu.mul(i).oneMinus()).add(this.clearcoatSpecularDirect.add(this.clearcoatSpecularIndirect).mul(Wu));t.assign(r)}if(this.sheen===!0){const n=Jr.r.max(Jr.g).max(Jr.b).mul(.157).oneMinus(),i=t.mul(n).add(this.sheenSpecularDirect,this.sheenSpecularIndirect);t.assign(i)}}}const u_=A(1),bf=A(-2),hu=A(.8),Ed=A(-1),du=A(.4),Ad=A(2),fu=A(.305),Rd=A(3),h_=A(.21),uP=A(4),d_=A(4),hP=A(16),dP=z(([s])=>{const e=I(Ft(s)).toVar(),t=A(-1).toVar();return it(e.x.greaterThan(e.z),()=>{it(e.x.greaterThan(e.y),()=>{t.assign(Cn(s.x.greaterThan(0),0,3))}).Else(()=>{t.assign(Cn(s.y.greaterThan(0),1,4))})}).Else(()=>{it(e.z.greaterThan(e.y),()=>{t.assign(Cn(s.z.greaterThan(0),2,5))}).Else(()=>{t.assign(Cn(s.y.greaterThan(0),1,4))})}),t}).setLayout({name:"getFace",type:"float",inputs:[{name:"direction",type:"vec3"}]}),fP=z(([s,e])=>{const t=se().toVar();return it(e.equal(0),()=>{t.assign(se(s.z,s.y).div(Ft(s.x)))}).ElseIf(e.equal(1),()=>{t.assign(se(s.x.negate(),s.z.negate()).div(Ft(s.y)))}).ElseIf(e.equal(2),()=>{t.assign(se(s.x.negate(),s.y).div(Ft(s.z)))}).ElseIf(e.equal(3),()=>{t.assign(se(s.z.negate(),s.y).div(Ft(s.x)))}).ElseIf(e.equal(4),()=>{t.assign(se(s.x.negate(),s.z).div(Ft(s.y)))}).Else(()=>{t.assign(se(s.x,s.y).div(Ft(s.z)))}),Ke(.5,t.add(1))}).setLayout({name:"getUV",type:"vec2",inputs:[{name:"direction",type:"vec3"},{name:"face",type:"float"}]}),pP=z(([s])=>{const e=A(0).toVar();return it(s.greaterThanEqual(hu),()=>{e.assign(u_.sub(s).mul(Ed.sub(bf)).div(u_.sub(hu)).add(bf))}).ElseIf(s.greaterThanEqual(du),()=>{e.assign(hu.sub(s).mul(Ad.sub(Ed)).div(hu.sub(du)).add(Ed))}).ElseIf(s.greaterThanEqual(fu),()=>{e.assign(du.sub(s).mul(Rd.sub(Ad)).div(du.sub(fu)).add(Ad))}).ElseIf(s.greaterThanEqual(h_),()=>{e.assign(fu.sub(s).mul(uP.sub(Rd)).div(fu.sub(h_)).add(Rd))}).Else(()=>{e.assign(A(-2).mul(ds(Ke(1.16,s))))}),e}).setLayout({name:"roughnessToMip",type:"float",inputs:[{name:"roughness",type:"float"}]}),uT=z(([s,e])=>{const t=s.toVar();t.assign(Ke(2,t).sub(1));const n=I(t,1).toVar();return it(e.equal(0),()=>{n.assign(n.zyx)}).ElseIf(e.equal(1),()=>{n.assign(n.xzy),n.xz.mulAssign(-1)}).ElseIf(e.equal(2),()=>{n.x.mulAssign(-1)}).ElseIf(e.equal(3),()=>{n.assign(n.zyx),n.xz.mulAssign(-1)}).ElseIf(e.equal(4),()=>{n.assign(n.xzy),n.xy.mulAssign(-1)}).ElseIf(e.equal(5),()=>{n.z.mulAssign(-1)}),n}).setLayout({name:"getDirection",type:"vec3",inputs:[{name:"uv",type:"vec2"},{name:"face",type:"float"}]}),hT=z(([s,e,t,n,i,r])=>{const o=A(t),a=I(e),c=xs(pP(o),bf,r),l=Js(c),u=fs(c),h=I(Mf(s,a,u,n,i,r)).toVar();return it(l.notEqual(0),()=>{const d=I(Mf(s,a,u.add(1),n,i,r)).toVar();h.assign(Mt(h,d,l))}),h}),Mf=z(([s,e,t,n,i,r])=>{const o=A(t).toVar(),a=I(e),c=A(dP(a)).toVar(),l=A(en(d_.sub(o),0)).toVar();o.assign(en(o,d_));const u=A(Ka(o)).toVar(),h=se(fP(a,c).mul(u.sub(2)).add(1)).toVar();return it(c.greaterThan(2),()=>{h.y.addAssign(u),c.subAssign(3)}),h.x.addAssign(c.mul(u)),h.x.addAssign(l.mul(Ke(3,hP))),h.y.addAssign(Ke(4,Ka(r).sub(u))),h.x.mulAssign(n),h.y.mulAssign(i),s.sample(h).grad(se(),se())}),wd=z(({envMap:s,mipInt:e,outputDirection:t,theta:n,axis:i,CUBEUV_TEXEL_WIDTH:r,CUBEUV_TEXEL_HEIGHT:o,CUBEUV_MAX_MIP:a})=>{const c=Us(n),l=t.mul(c).add(i.cross(t).mul(yi(n))).add(i.mul(i.dot(t).mul(c.oneMinus())));return Mf(s,l,e,r,o,a)}),dT=z(({n:s,latitudinal:e,poleAxis:t,outputDirection:n,weights:i,samples:r,dTheta:o,mipInt:a,envMap:c,CUBEUV_TEXEL_WIDTH:l,CUBEUV_TEXEL_HEIGHT:u,CUBEUV_MAX_MIP:h})=>{const d=I(Cn(e,t,Mh(t,n))).toVar();it(Ip(d.equals(I(0))),()=>{d.assign(I(n.z,0,n.x.negate()))}),d.assign(js(d));const f=I().toVar();return f.addAssign(i.element(C(0)).mul(wd({theta:0,axis:d,outputDirection:n,mipInt:a,envMap:c,CUBEUV_TEXEL_WIDTH:l,CUBEUV_TEXEL_HEIGHT:u,CUBEUV_MAX_MIP:h}))),Et({start:C(1),end:s},({i:m})=>{it(m.greaterThanEqual(r),()=>{z0()});const _=A(o.mul(A(m))).toVar();f.addAssign(i.element(m).mul(wd({theta:_.mul(-1),axis:d,outputDirection:n,mipInt:a,envMap:c,CUBEUV_TEXEL_WIDTH:l,CUBEUV_TEXEL_HEIGHT:u,CUBEUV_MAX_MIP:h}))),f.addAssign(i.element(m).mul(wd({theta:_,axis:d,outputDirection:n,mipInt:a,envMap:c,CUBEUV_TEXEL_WIDTH:l,CUBEUV_TEXEL_HEIGHT:u,CUBEUV_MAX_MIP:h})))}),Ue(f,1)});let Qu=null;const f_=new WeakMap;function mP(s){const e=Math.log2(s)-2,t=1/s;return{texelWidth:1/(3*Math.max(Math.pow(2,e),7*16)),texelHeight:t,maxMip:e}}function gP(s){let e=f_.get(s);if((e!==void 0?e.pmremVersion:-1)!==s.pmremVersion){const n=s.image;if(s.isCubeTexture)if(xP(n))e=Qu.fromCubemap(s,e);else return null;else if(yP(n))e=Qu.fromEquirectangular(s,e);else return null;e.pmremVersion=s.pmremVersion,f_.set(s,e)}return e.texture}class _P extends ln{static get type(){return"PMREMNode"}constructor(e,t=null,n=null){super("vec3"),this._value=e,this._pmrem=null,this.uvNode=t,this.levelNode=n,this._generator=null;const i=new En;i.isRenderTargetTexture=!0,this._texture=ht(i),this._width=Ie(0),this._height=Ie(0),this._maxMip=Ie(0),this.updateBeforeType=Ye.RENDER}set value(e){this._value=e,this._pmrem=null}get value(){return this._value}updateFromTexture(e){const t=mP(e.image.height);this._texture.value=e,this._width.value=t.texelWidth,this._height.value=t.texelHeight,this._maxMip.value=t.maxMip}updateBefore(){let e=this._pmrem;const t=e?e.pmremVersion:-1,n=this._value;t!==n.pmremVersion&&(n.isPMREMTexture===!0?e=n:e=gP(n),e!==null&&(this._pmrem=e,this.updateFromTexture(e)))}setup(e){Qu===null&&(Qu=e.createPMREMGenerator()),this.updateBefore(e);let t=this.uvNode;t===null&&e.context.getUV&&(t=e.context.getUV(this));const n=this.value;e.renderer.coordinateSystem===ni&&n.isPMREMTexture!==!0&&n.isRenderTargetTexture===!0&&(t=I(t.x.negate(),t.yz)),t=I(t.x,t.y.negate(),t.z);let i=this.levelNode;return i===null&&e.context.getTextureLevel&&(i=e.context.getTextureLevel(this)),hT(this._texture,t,i,this._width,this._height,this._maxMip)}}function xP(s){if(s==null)return!1;let e=0;const t=6;for(let n=0;n<t;n++)s[n]!==void 0&&e++;return e===t}function yP(s){return s==null?!1:s.height>0}const hm=j(_P),p_=new WeakMap;class vP extends ac{static get type(){return"EnvironmentNode"}constructor(e=null){super(),this.envNode=e}setup(e){const{material:t}=e;let n=this.envNode;if(n.isTextureNode||n.isMaterialReferenceNode){const f=n.isTextureNode?n.value:t[n.property];let m=p_.get(f);m===void 0&&(m=hm(f),p_.set(f,m)),n=m}const r=t.envMap?Ct("envMapIntensity","float",e.material):Ct("environmentIntensity","float",e.scene),a=t.useAnisotropy===!0||t.anisotropy>0?n0:Qt,c=n.context(m_(as,a)).mul(r),l=n.context(TP(Nh)).mul(Math.PI).mul(r),u=Lc(c),h=Lc(l);e.context.radiance.addAssign(u),e.context.iblIrradiance.addAssign(h);const d=e.context.lightingModel.clearcoatRadiance;if(d){const f=n.context(m_(al,oa)).mul(r),m=Lc(f);d.addAssign(m)}}}const m_=(s,e)=>{let t=null;return{getUV:()=>(t===null&&(t=Vt.negate().reflect(e),t=s.mul(s).mix(t,e).normalize(),t=t.transformDirection(ui)),t),getTextureLevel:()=>s}},TP=s=>({getUV:()=>s,getTextureLevel:()=>A(1)}),SP=new zx;class fT extends tn{static get type(){return"MeshStandardNodeMaterial"}constructor(e){super(),this.isMeshStandardNodeMaterial=!0,this.lights=!0,this.emissiveNode=null,this.metalnessNode=null,this.roughnessNode=null,this.setDefaultValues(SP),this.setValues(e)}setupEnvironment(e){let t=super.setupEnvironment(e);return t===null&&e.environmentNode&&(t=e.environmentNode),t?new vP(t):null}setupLightingModel(){return new lT}setupSpecular(){const e=Mt(I(.04),bt.rgb,ol);Qn.assign(e),cl.assign(1)}setupVariants(){const e=this.metalnessNode?A(this.metalnessNode):h0;ol.assign(e);let t=this.roughnessNode?A(this.roughnessNode):u0;t=lm({roughness:t}),as.assign(t),this.setupSpecular(),bt.assign(Ue(bt.rgb.mul(e.oneMinus()),bt.a))}copy(e){return this.emissiveNode=e.emissiveNode,this.metalnessNode=e.metalnessNode,this.roughnessNode=e.roughnessNode,super.copy(e)}}const bP=new _M;class MP extends fT{static get type(){return"MeshPhysicalNodeMaterial"}constructor(e){super(),this.isMeshPhysicalNodeMaterial=!0,this.clearcoatNode=null,this.clearcoatRoughnessNode=null,this.clearcoatNormalNode=null,this.sheenNode=null,this.sheenRoughnessNode=null,this.iridescenceNode=null,this.iridescenceIORNode=null,this.iridescenceThicknessNode=null,this.specularIntensityNode=null,this.specularColorNode=null,this.iorNode=null,this.transmissionNode=null,this.thicknessNode=null,this.attenuationDistanceNode=null,this.attenuationColorNode=null,this.dispersionNode=null,this.anisotropyNode=null,this.setDefaultValues(bP),this.setValues(e)}get useClearcoat(){return this.clearcoat>0||this.clearcoatNode!==null}get useIridescence(){return this.iridescence>0||this.iridescenceNode!==null}get useSheen(){return this.sheen>0||this.sheenNode!==null}get useAnisotropy(){return this.anisotropy>0||this.anisotropyNode!==null}get useTransmission(){return this.transmission>0||this.transmissionNode!==null}get useDispersion(){return this.dispersion>0||this.dispersionNode!==null}setupSpecular(){const e=this.iorNode?A(this.iorNode):E0;Dc.assign(e),Qn.assign(Mt(ai(Hp(Dc.sub(1).div(Dc.add(1))).mul(l0),I(1)).mul(yf),bt.rgb,ol)),cl.assign(Mt(yf,1,ol))}setupLightingModel(){return new lT(this.useClearcoat,this.useSheen,this.useIridescence,this.useAnisotropy,this.useTransmission,this.useDispersion)}setupVariants(e){if(super.setupVariants(e),this.useClearcoat){const t=this.clearcoatNode?A(this.clearcoatNode):f0,n=this.clearcoatRoughnessNode?A(this.clearcoatRoughnessNode):p0;Wu.assign(t),al.assign(lm({roughness:n}))}if(this.useSheen){const t=this.sheenNode?I(this.sheenNode):_0,n=this.sheenRoughnessNode?A(this.sheenRoughnessNode):x0;Jr.assign(t),yh.assign(n)}if(this.useIridescence){const t=this.iridescenceNode?A(this.iridescenceNode):v0,n=this.iridescenceIORNode?A(this.iridescenceIORNode):T0,i=this.iridescenceThicknessNode?A(this.iridescenceThicknessNode):S0;vh.assign(t),Rp.assign(n),wp.assign(i)}if(this.useAnisotropy){const t=(this.anisotropyNode?se(this.anisotropyNode):y0).toVar();lr.assign(t.length()),it(lr.equal(0),()=>{t.assign(se(1,0))}).Else(()=>{t.divAssign(se(lr)),lr.assign(lr.saturate())}),$u.assign(lr.pow2().mix(as.pow2(),1)),Pc.assign(eo[0].mul(t.x).add(eo[1].mul(t.y))),go.assign(eo[1].mul(t.x).sub(eo[0].mul(t.y)))}if(this.useTransmission){const t=this.transmissionNode?A(this.transmissionNode):b0,n=this.thicknessNode?A(this.thicknessNode):M0,i=this.attenuationDistanceNode?A(this.attenuationDistanceNode):A0,r=this.attenuationColorNode?I(this.attenuationColorNode):R0;if(qu.assign(t),Np.assign(n),Cp.assign(i),Pp.assign(r),this.useDispersion){const o=this.dispersionNode?A(this.dispersionNode):D0;Dp.assign(o)}}}setupClearcoatNormal(){return this.clearcoatNormalNode?I(this.clearcoatNormalNode):m0}setup(e){e.context.setupClearcoatNormal=()=>this.setupClearcoatNormal(e),super.setup(e)}copy(e){return this.clearcoatNode=e.clearcoatNode,this.clearcoatRoughnessNode=e.clearcoatRoughnessNode,this.clearcoatNormalNode=e.clearcoatNormalNode,this.sheenNode=e.sheenNode,this.sheenRoughnessNode=e.sheenRoughnessNode,this.iridescenceNode=e.iridescenceNode,this.iridescenceIORNode=e.iridescenceIORNode,this.iridescenceThicknessNode=e.iridescenceThicknessNode,this.specularIntensityNode=e.specularIntensityNode,this.specularColorNode=e.specularColorNode,this.transmissionNode=e.transmissionNode,this.thicknessNode=e.thicknessNode,this.attenuationDistanceNode=e.attenuationDistanceNode,this.attenuationColorNode=e.attenuationColorNode,this.dispersionNode=e.dispersionNode,this.anisotropyNode=e.anisotropyNode,super.copy(e)}}const EP=z(({normal:s,lightDirection:e,builder:t})=>{const n=s.dot(e),i=se(n.mul(.5).add(.5),0);if(t.material.gradientMap){const r=ks("gradientMap","texture").context({getUV:()=>i});return I(r.r)}else{const r=i.fwidth().mul(.5);return Mt(I(.7),I(1),Ks(A(.7).sub(r.x),A(.7).add(r.x),i.x))}});class AP extends Lh{direct({lightDirection:e,lightColor:t,reflectedLight:n},i,r){const o=EP({normal:Rh,lightDirection:e,builder:r}).mul(t);n.directDiffuse.addAssign(o.mul(Mo({diffuseColor:bt.rgb})))}indirect({ambientOcclusion:e,irradiance:t,reflectedLight:n}){n.indirectDiffuse.addAssign(t.mul(Mo({diffuseColor:bt}))),n.indirectDiffuse.mulAssign(e)}}const RP=new yM;class wP extends tn{static get type(){return"MeshToonNodeMaterial"}constructor(e){super(),this.isMeshToonNodeMaterial=!0,this.lights=!0,this.setDefaultValues(RP),this.setValues(e)}setupLightingModel(){return new AP}}class NP extends ln{static get type(){return"MatcapUVNode"}constructor(){super("vec2")}setup(){const e=I(Vt.z,0,Vt.x.negate()).normalize(),t=Vt.cross(e);return se(e.dot(Qt),t.dot(Qt)).mul(.495).add(.5)}}const pT=de(NP),CP=new MM;class PP extends tn{static get type(){return"MeshMatcapNodeMaterial"}constructor(e){super(),this.isMeshMatcapNodeMaterial=!0,this.setDefaultValues(CP),this.setValues(e)}setupVariants(e){const t=pT;let n;e.material.matcap?n=ks("matcap","texture").context({getUV:()=>t}):n=I(Mt(.2,.8,t.y)),bt.rgb.mulAssign(n.rgb)}}const DP=new mM;class LP extends tn{static get type(){return"PointsNodeMaterial"}constructor(e){super(),this.isPointsNodeMaterial=!0,this.setDefaultValues(DP),this.setValues(e)}}class UP extends ln{static get type(){return"RotateNode"}constructor(e,t){super(),this.positionNode=e,this.rotationNode=t}getNodeType(e){return this.positionNode.getNodeType(e)}setup(e){const{rotationNode:t,positionNode:n}=this;if(this.getNodeType(e)==="vec2"){const r=t.cos(),o=t.sin();return xh(r,o,o.negate(),r).mul(n)}else{const r=t,o=mo(Ue(1,0,0,0),Ue(0,Us(r.x),yi(r.x).negate(),0),Ue(0,yi(r.x),Us(r.x),0),Ue(0,0,0,1)),a=mo(Ue(Us(r.y),0,yi(r.y),0),Ue(0,1,0,0),Ue(yi(r.y).negate(),0,Us(r.y),0),Ue(0,0,0,1)),c=mo(Ue(Us(r.z),yi(r.z).negate(),0,0),Ue(yi(r.z),Us(r.z),0,0),Ue(0,0,1,0),Ue(0,0,0,1));return o.mul(a).mul(c).mul(Ue(n,1)).xyz}}}const dm=j(UP),IP=new hM;class FP extends tn{static get type(){return"SpriteNodeMaterial"}constructor(e){super(),this.isSpriteNodeMaterial=!0,this._useSizeAttenuation=!0,this.positionNode=null,this.rotationNode=null,this.scaleNode=null,this.setDefaultValues(IP),this.setValues(e)}setupPositionView(e){const{object:t,camera:n}=e,i=this.sizeAttenuation,{positionNode:r,rotationNode:o,scaleNode:a}=this,c=oc.mul(I(r||0));let l=se(Li[0].xyz.length(),Li[1].xyz.length());if(a!==null&&(l=l.mul(a)),i===!1)if(n.isPerspectiveCamera)l=l.mul(c.z.negate());else{const f=A(2).div(wo.element(1).element(1));l=l.mul(f.mul(2))}let u=Ah.xy;if(t.center&&t.center.isVector2===!0){const f=iC("center","vec2",t);u=u.sub(f.sub(.5))}u=u.mul(l);const h=A(o||g0),d=dm(u,h);return Ue(c.xy.add(d),c.zw)}copy(e){return this.positionNode=e.positionNode,this.rotationNode=e.rotationNode,this.scaleNode=e.scaleNode,super.copy(e)}get sizeAttenuation(){return this._useSizeAttenuation}set sizeAttenuation(e){this._useSizeAttenuation!==e&&(this._useSizeAttenuation=e,this.needsUpdate=!0)}}class BP extends Lh{constructor(){super(),this.shadowNode=A(1).toVar("shadowMask")}direct({shadowMask:e}){this.shadowNode.mulAssign(e)}finish(e){bt.a.mulAssign(this.shadowNode.oneMinus()),e.outgoingLight.rgb.assign(bt.rgb)}}const OP=new gM;class VP extends tn{static get type(){return"ShadowNodeMaterial"}constructor(e){super(),this.isShadowNodeMaterial=!0,this.lights=!0,this.setDefaultValues(OP),this.setValues(e)}setupLightingModel(){return new BP}}const GP=z(({texture:s,uv:e})=>{const n=I().toVar();return it(e.x.lessThan(1e-4),()=>{n.assign(I(1,0,0))}).ElseIf(e.y.lessThan(1e-4),()=>{n.assign(I(0,1,0))}).ElseIf(e.z.lessThan(1e-4),()=>{n.assign(I(0,0,1))}).ElseIf(e.x.greaterThan(1-1e-4),()=>{n.assign(I(-1,0,0))}).ElseIf(e.y.greaterThan(1-1e-4),()=>{n.assign(I(0,-1,0))}).ElseIf(e.z.greaterThan(1-1e-4),()=>{n.assign(I(0,0,-1))}).Else(()=>{const r=s.sample(e.add(I(-.01,0,0))).r.sub(s.sample(e.add(I(.01,0,0))).r),o=s.sample(e.add(I(0,-.01,0))).r.sub(s.sample(e.add(I(0,.01,0))).r),a=s.sample(e.add(I(0,0,-.01))).r.sub(s.sample(e.add(I(0,0,.01))).r);n.assign(I(r,o,a))}),n.normalize()});class zP extends vs{static get type(){return"Texture3DNode"}constructor(e,t=null,n=null){super(e,t,n),this.isTexture3DNode=!0}getInputType(){return"texture3D"}getDefaultUV(){return I(.5,.5,.5)}setUpdateMatrix(){}setupUV(e,t){const n=this.value;return e.isFlipY()&&(n.isRenderTargetTexture===!0||n.isFramebufferTexture===!0)&&(this.sampler?t=t.flipY():t=t.setY(C(Sr(this,this.levelNode).y).sub(t.y).sub(1))),t}generateUV(e,t){return t.build(e,"vec3")}normal(e){return GP({texture:this,uv:e})}}const kP=j(zP);class HP{constructor(e,t){this.nodes=e,this.info=t,this._context=self,this._animationLoop=null,this._requestId=null}start(){const e=(t,n)=>{this._requestId=this._context.requestAnimationFrame(e),this.info.autoReset===!0&&this.info.reset(),this.nodes.nodeFrame.update(),this.info.frame=this.nodes.nodeFrame.frameId,this._animationLoop!==null&&this._animationLoop(t,n)};e()}stop(){this._context.cancelAnimationFrame(this._requestId),this._requestId=null}setAnimationLoop(e){this._animationLoop=e}setContext(e){this._context=e}dispose(){this.stop()}}class bs{constructor(){this.weakMap=new WeakMap}get(e){let t=this.weakMap;for(let n=0;n<e.length;n++)if(t=t.get(e[n]),t===void 0)return;return t.get(e[e.length-1])}set(e,t){let n=this.weakMap;for(let i=0;i<e.length;i++){const r=e[i];n.has(r)===!1&&n.set(r,new WeakMap),n=n.get(r)}return n.set(e[e.length-1],t),this}delete(e){let t=this.weakMap;for(let n=0;n<e.length;n++)if(t=t.get(e[n]),t===void 0)return!1;return t.delete(e[e.length-1])}}let WP=0;function $P(s){const e=Object.keys(s);let t=Object.getPrototypeOf(s);for(;t;){const n=Object.getOwnPropertyDescriptors(t);for(const i in n)if(n[i]!==void 0){const r=n[i];r&&typeof r.get=="function"&&e.push(i)}t=Object.getPrototypeOf(t)}return e}class XP{constructor(e,t,n,i,r,o,a,c,l,u){this.id=WP++,this._nodes=e,this._geometries=t,this.renderer=n,this.object=i,this.material=r,this.scene=o,this.camera=a,this.lightsNode=c,this.context=l,this.geometry=i.geometry,this.version=r.version,this.drawRange=null,this.attributes=null,this.pipeline=null,this.vertexBuffers=null,this.drawParams=null,this.bundle=null,this.clippingContext=u,this.clippingContextCacheKey=u!==null?u.cacheKey:"",this.initialNodesCacheKey=this.getDynamicCacheKey(),this.initialCacheKey=this.getCacheKey(),this._nodeBuilderState=null,this._bindings=null,this._monitor=null,this.onDispose=null,this.isRenderObject=!0,this.onMaterialDispose=()=>{this.dispose()},this.material.addEventListener("dispose",this.onMaterialDispose)}updateClipping(e){this.clippingContext=e}get clippingNeedsUpdate(){return this.clippingContext===null||this.clippingContext.cacheKey===this.clippingContextCacheKey?!1:(this.clippingContextCacheKey=this.clippingContext.cacheKey,!0)}get hardwareClippingPlanes(){return this.material.hardwareClipping===!0?this.clippingContext.unionClippingCount:0}getNodeBuilderState(){return this._nodeBuilderState||(this._nodeBuilderState=this._nodes.getForRender(this))}getMonitor(){return this._monitor||(this._monitor=this.getNodeBuilderState().monitor)}getBindings(){return this._bindings||(this._bindings=this.getNodeBuilderState().createBindings())}getIndex(){return this._geometries.getIndex(this)}getIndirect(){return this._geometries.getIndirect(this)}getChainArray(){return[this.object,this.material,this.context,this.lightsNode]}setGeometry(e){this.geometry=e,this.attributes=null}getAttributes(){if(this.attributes!==null)return this.attributes;const e=this.getNodeBuilderState().nodeAttributes,t=this.geometry,n=[],i=new Set;for(const r of e){const o=r.node&&r.node.attribute?r.node.attribute:t.getAttribute(r.name);if(o===void 0)continue;n.push(o);const a=o.isInterleavedBufferAttribute?o.data:o;i.add(a)}return this.attributes=n,this.vertexBuffers=Array.from(i.values()),n}getVertexBuffers(){return this.vertexBuffers===null&&this.getAttributes(),this.vertexBuffers}getDrawParameters(){const{object:e,material:t,geometry:n,group:i,drawRange:r}=this,o=this.drawParams||(this.drawParams={vertexCount:0,firstVertex:0,instanceCount:0,firstInstance:0}),a=this.getIndex(),c=a!==null,l=n.isInstancedBufferGeometry?n.instanceCount:e.count>1?e.count:1;if(l===0)return null;if(o.instanceCount=l,e.isBatchedMesh===!0)return o;let u=1;t.wireframe===!0&&!e.isPoints&&!e.isLineSegments&&!e.isLine&&!e.isLineLoop&&(u=2);let h=r.start*u,d=(r.start+r.count)*u;i!==null&&(h=Math.max(h,i.start*u),d=Math.min(d,(i.start+i.count)*u));const f=n.attributes.position;let m=1/0;c?m=a.count:f!=null&&(m=f.count),h=Math.max(h,0),d=Math.min(d,m);const _=d-h;return _<0||_===1/0?null:(o.vertexCount=_,o.firstVertex=h,o)}getGeometryCacheKey(){const{geometry:e}=this;let t="";for(const n of Object.keys(e.attributes).sort()){const i=e.attributes[n];t+=n+",",i.data&&(t+=i.data.stride+","),i.offset&&(t+=i.offset+","),i.itemSize&&(t+=i.itemSize+","),i.normalized&&(t+="n,")}return e.index&&(t+="index,"),t}getMaterialCacheKey(){const{object:e,material:t}=this;let n=t.customProgramCacheKey();for(const i of $P(t)){if(/^(is[A-Z]|_)|^(visible|version|uuid|name|opacity|userData)$/.test(i))continue;const r=t[i];let o;if(r!==null){const a=typeof r;a==="number"?o=r!==0?"1":"0":a==="object"?(o="{",r.isTexture&&(o+=r.mapping),o+="}"):o=String(r)}else o=String(r);n+=o+","}return n+=this.clippingContextCacheKey+",",e.geometry&&(n+=this.getGeometryCacheKey()),e.skeleton&&(n+=e.skeleton.bones.length+","),e.morphTargetInfluences&&(n+=e.morphTargetInfluences.length+","),e.isBatchedMesh&&(n+=e._matricesTexture.uuid+",",e._colorsTexture!==null&&(n+=e._colorsTexture.uuid+",")),e.count>1&&(n+=e.uuid+","),n+=e.receiveShadow+",",Yx(n)}get needsGeometryUpdate(){return this.geometry.id!==this.object.geometry.id}get needsUpdate(){return this.initialNodesCacheKey!==this.getDynamicCacheKey()||this.clippingNeedsUpdate}getDynamicCacheKey(){let e=this._nodes.getCacheKey(this.scene,this.lightsNode);return this.object.receiveShadow&&(e+=1),e}getCacheKey(){return this.getMaterialCacheKey()+this.getDynamicCacheKey()}dispose(){this.material.removeEventListener("dispose",this.onMaterialDispose),this.onDispose()}}const Xo=[];class qP{constructor(e,t,n,i,r,o){this.renderer=e,this.nodes=t,this.geometries=n,this.pipelines=i,this.bindings=r,this.info=o,this.chainMaps={}}get(e,t,n,i,r,o,a,c){const l=this.getChainMap(c);Xo[0]=e,Xo[1]=t,Xo[2]=o,Xo[3]=r;let u=l.get(Xo);return u===void 0?(u=this.createRenderObject(this.nodes,this.geometries,this.renderer,e,t,n,i,r,o,a,c),l.set(Xo,u)):(u.updateClipping(a),u.needsGeometryUpdate&&u.setGeometry(e.geometry),(u.version!==t.version||u.needsUpdate)&&(u.initialCacheKey!==u.getCacheKey()?(u.dispose(),u=this.get(e,t,n,i,r,o,a,c)):u.version=t.version)),u}getChainMap(e="default"){return this.chainMaps[e]||(this.chainMaps[e]=new bs)}dispose(){this.chainMaps={}}createRenderObject(e,t,n,i,r,o,a,c,l,u,h){const d=this.getChainMap(h),f=new XP(e,t,n,i,r,o,a,c,l,u);return f.onDispose=()=>{this.pipelines.delete(f),this.bindings.delete(f),this.nodes.delete(f),d.delete(f.getChainArray())},f}}class Lr{constructor(){this.data=new WeakMap}get(e){let t=this.data.get(e);return t===void 0&&(t={},this.data.set(e,t)),t}delete(e){let t=null;return this.data.has(e)&&(t=this.data.get(e),this.data.delete(e)),t}has(e){return this.data.has(e)}dispose(){this.data=new WeakMap}}const us={VERTEX:1,INDEX:2,STORAGE:3,INDIRECT:4},dr=16,YP=211,jP=212;class KP extends Lr{constructor(e){super(),this.backend=e}delete(e){const t=super.delete(e);return t!==void 0&&this.backend.destroyAttribute(e),t}update(e,t){const n=this.get(e);if(n.version===void 0)t===us.VERTEX?this.backend.createAttribute(e):t===us.INDEX?this.backend.createIndexAttribute(e):t===us.STORAGE?this.backend.createStorageAttribute(e):t===us.INDIRECT&&this.backend.createIndirectStorageAttribute(e),n.version=this._getBufferAttribute(e).version;else{const i=this._getBufferAttribute(e);(n.version<i.version||i.usage===ia)&&(this.backend.updateAttribute(e),n.version=i.version)}}_getBufferAttribute(e){return e.isInterleavedBufferAttribute&&(e=e.data),e}}function ZP(s){for(let e=s.length-1;e>=0;--e)if(s[e]>=65535)return!0;return!1}function mT(s){return s.index!==null?s.index.version:s.attributes.position.version}function g_(s){const e=[],t=s.index,n=s.attributes.position;if(t!==null){const r=t.array;for(let o=0,a=r.length;o<a;o+=3){const c=r[o+0],l=r[o+1],u=r[o+2];e.push(c,l,l,u,u,c)}}else{const r=n.array;for(let o=0,a=r.length/3-1;o<a;o+=3){const c=o+0,l=o+1,u=o+2;e.push(c,l,l,u,u,c)}}const i=new(ZP(e)?hp:up)(e,1);return i.version=mT(s),i}class QP extends Lr{constructor(e,t){super(),this.attributes=e,this.info=t,this.wireframes=new WeakMap,this.attributeCall=new WeakMap}has(e){const t=e.geometry;return super.has(t)&&this.get(t).initialized===!0}updateForRender(e){this.has(e)===!1&&this.initGeometry(e),this.updateAttributes(e)}initGeometry(e){const t=e.geometry,n=this.get(t);n.initialized=!0,this.info.memory.geometries++;const i=()=>{this.info.memory.geometries--;const r=t.index,o=e.getAttributes();r!==null&&this.attributes.delete(r);for(const c of o)this.attributes.delete(c);const a=this.wireframes.get(t);a!==void 0&&this.attributes.delete(a),t.removeEventListener("dispose",i)};t.addEventListener("dispose",i)}updateAttributes(e){const t=e.getAttributes();for(const r of t)r.isStorageBufferAttribute||r.isStorageInstancedBufferAttribute?this.updateAttribute(r,us.STORAGE):this.updateAttribute(r,us.VERTEX);const n=this.getIndex(e);n!==null&&this.updateAttribute(n,us.INDEX);const i=e.geometry.indirect;i!==null&&this.updateAttribute(i,us.INDIRECT)}updateAttribute(e,t){const n=this.info.render.calls;e.isInterleavedBufferAttribute?this.attributeCall.get(e)===void 0?(this.attributes.update(e,t),this.attributeCall.set(e,n)):this.attributeCall.get(e.data)!==n&&(this.attributes.update(e,t),this.attributeCall.set(e.data,n),this.attributeCall.set(e,n)):this.attributeCall.get(e)!==n&&(this.attributes.update(e,t),this.attributeCall.set(e,n))}getIndirect(e){return e.geometry.indirect}getIndex(e){const{geometry:t,material:n}=e;let i=t.index;if(n.wireframe===!0){const r=this.wireframes;let o=r.get(t);o===void 0?(o=g_(t),r.set(t,o)):o.version!==mT(t)&&(this.attributes.delete(o),o=g_(t),r.set(t,o)),i=o}return i}}class JP{constructor(){this.autoReset=!0,this.frame=0,this.calls=0,this.render={calls:0,frameCalls:0,drawCalls:0,triangles:0,points:0,lines:0,timestamp:0,previousFrameCalls:0,timestampCalls:0},this.compute={calls:0,frameCalls:0,timestamp:0,previousFrameCalls:0,timestampCalls:0},this.memory={geometries:0,textures:0}}update(e,t,n){this.render.drawCalls++,e.isMesh||e.isSprite?this.render.triangles+=n*(t/3):e.isPoints?this.render.points+=n*t:e.isLineSegments?this.render.lines+=n*(t/2):e.isLine?this.render.lines+=n*(t-1):console.error("THREE.WebGPUInfo: Unknown object type.")}updateTimestamp(e,t){this[e].timestampCalls===0&&(this[e].timestamp=0),this[e].timestamp+=t,this[e].timestampCalls++,this[e].timestampCalls>=this[e].previousFrameCalls&&(this[e].timestampCalls=0)}reset(){const e=this.render.frameCalls;this.render.previousFrameCalls=e;const t=this.compute.frameCalls;this.compute.previousFrameCalls=t,this.render.drawCalls=0,this.render.frameCalls=0,this.compute.frameCalls=0,this.render.triangles=0,this.render.points=0,this.render.lines=0}dispose(){this.reset(),this.calls=0,this.render.calls=0,this.compute.calls=0,this.render.timestamp=0,this.compute.timestamp=0,this.memory.geometries=0,this.memory.textures=0}}class gT{constructor(e){this.cacheKey=e,this.usedTimes=0}}class eD extends gT{constructor(e,t,n){super(e),this.vertexProgram=t,this.fragmentProgram=n}}class tD extends gT{constructor(e,t){super(e),this.computeProgram=t,this.isComputePipeline=!0}}let nD=0;class Nd{constructor(e,t,n,i=null,r=null){this.id=nD++,this.code=e,this.stage=t,this.name=n,this.transforms=i,this.attributes=r,this.usedTimes=0}}class iD extends Lr{constructor(e,t){super(),this.backend=e,this.nodes=t,this.bindings=null,this.caches=new Map,this.programs={vertex:new Map,fragment:new Map,compute:new Map}}getForCompute(e,t){const{backend:n}=this,i=this.get(e);if(this._needsComputeUpdate(e)){const r=i.pipeline;r&&(r.usedTimes--,r.computeProgram.usedTimes--);const o=this.nodes.getForCompute(e);let a=this.programs.compute.get(o.computeShader);a===void 0&&(r&&r.computeProgram.usedTimes===0&&this._releaseProgram(r.computeProgram),a=new Nd(o.computeShader,"compute",e.name,o.transforms,o.nodeAttributes),this.programs.compute.set(o.computeShader,a),n.createProgram(a));const c=this._getComputeCacheKey(e,a);let l=this.caches.get(c);l===void 0&&(r&&r.usedTimes===0&&this._releasePipeline(r),l=this._getComputePipeline(e,a,c,t)),l.usedTimes++,a.usedTimes++,i.version=e.version,i.pipeline=l}return i.pipeline}getForRender(e,t=null){const{backend:n}=this,i=this.get(e);if(this._needsRenderUpdate(e)){const r=i.pipeline;r&&(r.usedTimes--,r.vertexProgram.usedTimes--,r.fragmentProgram.usedTimes--);const o=e.getNodeBuilderState(),a=e.material?e.material.name:"";let c=this.programs.vertex.get(o.vertexShader);c===void 0&&(r&&r.vertexProgram.usedTimes===0&&this._releaseProgram(r.vertexProgram),c=new Nd(o.vertexShader,"vertex",a),this.programs.vertex.set(o.vertexShader,c),n.createProgram(c));let l=this.programs.fragment.get(o.fragmentShader);l===void 0&&(r&&r.fragmentProgram.usedTimes===0&&this._releaseProgram(r.fragmentProgram),l=new Nd(o.fragmentShader,"fragment",a),this.programs.fragment.set(o.fragmentShader,l),n.createProgram(l));const u=this._getRenderCacheKey(e,c,l);let h=this.caches.get(u);h===void 0?(r&&r.usedTimes===0&&this._releasePipeline(r),h=this._getRenderPipeline(e,c,l,u,t)):e.pipeline=h,h.usedTimes++,c.usedTimes++,l.usedTimes++,i.pipeline=h}return i.pipeline}delete(e){const t=this.get(e).pipeline;return t&&(t.usedTimes--,t.usedTimes===0&&this._releasePipeline(t),t.isComputePipeline?(t.computeProgram.usedTimes--,t.computeProgram.usedTimes===0&&this._releaseProgram(t.computeProgram)):(t.fragmentProgram.usedTimes--,t.vertexProgram.usedTimes--,t.vertexProgram.usedTimes===0&&this._releaseProgram(t.vertexProgram),t.fragmentProgram.usedTimes===0&&this._releaseProgram(t.fragmentProgram))),super.delete(e)}dispose(){super.dispose(),this.caches=new Map,this.programs={vertex:new Map,fragment:new Map,compute:new Map}}updateForRender(e){this.getForRender(e)}_getComputePipeline(e,t,n,i){n=n||this._getComputeCacheKey(e,t);let r=this.caches.get(n);return r===void 0&&(r=new tD(n,t),this.caches.set(n,r),this.backend.createComputePipeline(r,i)),r}_getRenderPipeline(e,t,n,i,r){i=i||this._getRenderCacheKey(e,t,n);let o=this.caches.get(i);return o===void 0&&(o=new eD(i,t,n),this.caches.set(i,o),e.pipeline=o,this.backend.createRenderPipeline(e,r)),o}_getComputeCacheKey(e,t){return e.id+","+t.id}_getRenderCacheKey(e,t,n){return t.id+","+n.id+","+this.backend.getRenderCacheKey(e)}_releasePipeline(e){this.caches.delete(e.cacheKey)}_releaseProgram(e){const t=e.code,n=e.stage;this.programs[n].delete(t)}_needsComputeUpdate(e){const t=this.get(e);return t.pipeline===void 0||t.version!==e.version}_needsRenderUpdate(e){return this.get(e).pipeline===void 0||this.backend.needsRenderUpdate(e)}}class sD extends Lr{constructor(e,t,n,i,r,o){super(),this.backend=e,this.textures=n,this.pipelines=r,this.attributes=i,this.nodes=t,this.info=o,this.pipelines.bindings=this}getForRender(e){const t=e.getBindings();for(const n of t){const i=this.get(n);i.bindGroup===void 0&&(this._init(n),this.backend.createBindings(n,t,0),i.bindGroup=n)}return t}getForCompute(e){const t=this.nodes.getForCompute(e).bindings;for(const n of t){const i=this.get(n);i.bindGroup===void 0&&(this._init(n),this.backend.createBindings(n,t,0),i.bindGroup=n)}return t}updateForCompute(e){this._updateBindings(this.getForCompute(e))}updateForRender(e){this._updateBindings(this.getForRender(e))}_updateBindings(e){for(const t of e)this._update(t,e)}_init(e){for(const t of e.bindings)if(t.isSampledTexture)this.textures.updateTexture(t.texture);else if(t.isStorageBuffer){const n=t.attribute,i=n.isIndirectStorageBufferAttribute?us.INDIRECT:us.STORAGE;this.attributes.update(n,i)}}_update(e,t){const{backend:n}=this;let i=!1,r=!0,o=0,a=0;for(const c of e.bindings)if(!(c.isNodeUniformsGroup&&this.nodes.updateGroup(c)===!1)){if(c.isUniformBuffer)c.update()&&n.updateBinding(c);else if(c.isSampler)c.update();else if(c.isSampledTexture){const l=this.textures.get(c.texture);c.needsBindingsUpdate(l.generation)&&(i=!0);const u=c.update(),h=c.texture;u&&this.textures.updateTexture(h);const d=n.get(h);if(d.externalTexture!==void 0||l.isDefaultTexture?r=!1:(o=o*10+h.id,a+=h.version),n.isWebGPUBackend===!0&&d.texture===void 0&&d.externalTexture===void 0&&(console.error("Bindings._update: binding should be available:",c,u,h,c.textureNode.value,i),this.textures.updateTexture(h),i=!0),h.isStorageTexture===!0){const f=this.get(h);c.store===!0?f.needsMipmap=!0:this.textures.needsMipmaps(h)&&f.needsMipmap===!0&&(this.backend.generateMipmaps(h),f.needsMipmap=!1)}}}i===!0&&this.backend.updateBindings(e,t,r?o:0,a)}}function rD(s,e){return s.groupOrder!==e.groupOrder?s.groupOrder-e.groupOrder:s.renderOrder!==e.renderOrder?s.renderOrder-e.renderOrder:s.material.id!==e.material.id?s.material.id-e.material.id:s.z!==e.z?s.z-e.z:s.id-e.id}function __(s,e){return s.groupOrder!==e.groupOrder?s.groupOrder-e.groupOrder:s.renderOrder!==e.renderOrder?s.renderOrder-e.renderOrder:s.z!==e.z?e.z-s.z:s.id-e.id}function x_(s){return(s.transmission>0||s.transmissionNode)&&s.side===Bn&&s.forceSinglePass===!1}class oD{constructor(e,t,n){this.renderItems=[],this.renderItemsIndex=0,this.opaque=[],this.transparentDoublePass=[],this.transparent=[],this.bundles=[],this.lightsNode=e.getNode(t,n),this.lightsArray=[],this.scene=t,this.camera=n,this.occlusionQueryCount=0}begin(){return this.renderItemsIndex=0,this.opaque.length=0,this.transparentDoublePass.length=0,this.transparent.length=0,this.bundles.length=0,this.lightsArray.length=0,this.occlusionQueryCount=0,this}getNextRenderItem(e,t,n,i,r,o,a){let c=this.renderItems[this.renderItemsIndex];return c===void 0?(c={id:e.id,object:e,geometry:t,material:n,groupOrder:i,renderOrder:e.renderOrder,z:r,group:o,clippingContext:a},this.renderItems[this.renderItemsIndex]=c):(c.id=e.id,c.object=e,c.geometry=t,c.material=n,c.groupOrder=i,c.renderOrder=e.renderOrder,c.z=r,c.group=o,c.clippingContext=a),this.renderItemsIndex++,c}push(e,t,n,i,r,o,a){const c=this.getNextRenderItem(e,t,n,i,r,o,a);e.occlusionTest===!0&&this.occlusionQueryCount++,n.transparent===!0||n.transmission>0?(x_(n)&&this.transparentDoublePass.push(c),this.transparent.push(c)):this.opaque.push(c)}unshift(e,t,n,i,r,o,a){const c=this.getNextRenderItem(e,t,n,i,r,o,a);n.transparent===!0||n.transmission>0?(x_(n)&&this.transparentDoublePass.unshift(c),this.transparent.unshift(c)):this.opaque.unshift(c)}pushBundle(e){this.bundles.push(e)}pushLight(e){this.lightsArray.push(e)}sort(e,t){this.opaque.length>1&&this.opaque.sort(e||rD),this.transparentDoublePass.length>1&&this.transparentDoublePass.sort(t||__),this.transparent.length>1&&this.transparent.sort(t||__)}finish(){this.lightsNode.setLights(this.lightsArray);for(let e=this.renderItemsIndex,t=this.renderItems.length;e<t;e++){const n=this.renderItems[e];if(n.id===null)break;n.id=null,n.object=null,n.geometry=null,n.material=null,n.groupOrder=null,n.renderOrder=null,n.z=null,n.group=null,n.clippingContext=null}}}class aD{constructor(e){this.lighting=e,this.lists=new bs}get(e,t){const n=this.lists,i=[e,t];let r=n.get(i);return r===void 0&&(r=new oD(this.lighting,e,t),n.set(i,r)),r}dispose(){this.lists=new bs}}let cD=0;class lD{constructor(){this.id=cD++,this.color=!0,this.clearColor=!0,this.clearColorValue={r:0,g:0,b:0,a:1},this.depth=!0,this.clearDepth=!0,this.clearDepthValue=1,this.stencil=!1,this.clearStencil=!0,this.clearStencilValue=1,this.viewport=!1,this.viewportValue=new je,this.scissor=!1,this.scissorValue=new je,this.textures=null,this.depthTexture=null,this.activeCubeFace=0,this.sampleCount=1,this.width=0,this.height=0,this.isRenderContext=!0}getCacheKey(){return _T(this)}}function _T(s){const{textures:e,activeCubeFace:t}=s,n=[t];for(const i of e)n.push(i.id);return mh(n)}class uD{constructor(){this.chainMaps={}}get(e=null,t=null,n=null){const i=[];e!==null&&i.push(e),t!==null&&i.push(t),i.length===0&&i.push({id:"default"});let r;if(n===null)r="default";else{const c=n.texture.format;r=`${n.textures.length}:${c}:${n.samples}:${n.depthBuffer}:${n.stencilBuffer}`}const o=this.getChainMap(r);let a=o.get(i);return a===void 0&&(a=new lD,o.set(i,a)),n!==null&&(a.sampleCount=n.samples===0?1:n.samples),a}getChainMap(e){return this.chainMaps[e]||(this.chainMaps[e]=new bs)}dispose(){this.chainMaps={}}}const hD=new U;class dD extends Lr{constructor(e,t,n){super(),this.renderer=e,this.backend=t,this.info=n}updateRenderTarget(e,t=0){const n=this.get(e),i=e.samples===0?1:e.samples,r=n.depthTextureMips||(n.depthTextureMips={}),o=e.textures,a=this.getSize(o[0]),c=a.width>>t,l=a.height>>t;let u=e.depthTexture||r[t];const h=e.depthBuffer===!0||e.stencilBuffer===!0;let d=!1;u===void 0&&h&&(u=new Qs,u.format=e.stencilBuffer?gs:hs,u.type=e.stencilBuffer?ms:Yt,u.image.width=c,u.image.height=l,r[t]=u),(n.width!==a.width||a.height!==n.height)&&(d=!0,u&&(u.needsUpdate=!0,u.image.width=c,u.image.height=l)),n.width=a.width,n.height=a.height,n.textures=o,n.depthTexture=u||null,n.depth=e.depthBuffer,n.stencil=e.stencilBuffer,n.renderTarget=e,n.sampleCount!==i&&(d=!0,u&&(u.needsUpdate=!0),n.sampleCount=i);const f={sampleCount:i};for(let m=0;m<o.length;m++){const _=o[m];d&&(_.needsUpdate=!0),this.updateTexture(_,f)}if(u&&this.updateTexture(u,f),n.initialized!==!0){n.initialized=!0;const m=()=>{e.removeEventListener("dispose",m);for(let _=0;_<o.length;_++)this._destroyTexture(o[_]);u&&this._destroyTexture(u),this.delete(e)};e.addEventListener("dispose",m)}}updateTexture(e,t={}){const n=this.get(e);if(n.initialized===!0&&n.version===e.version)return;const i=e.isRenderTargetTexture||e.isDepthTexture||e.isFramebufferTexture,r=this.backend;if(i&&n.initialized===!0&&(r.destroySampler(e),r.destroyTexture(e)),e.isFramebufferTexture){const l=this.renderer.getRenderTarget();l?e.type=l.texture.type:e.type=Gn}const{width:o,height:a,depth:c}=this.getSize(e);if(t.width=o,t.height=a,t.depth=c,t.needsMipmaps=this.needsMipmaps(e),t.levels=t.needsMipmaps?this.getMipLevels(e,o,a):1,i||e.isStorageTexture===!0)r.createSampler(e),r.createTexture(e,t),n.generation=e.version;else if(n.initialized!==!0&&r.createSampler(e),e.version>0){const u=e.image;if(u===void 0)console.warn("THREE.Renderer: Texture marked for update but image is undefined.");else if(u.complete===!1)console.warn("THREE.Renderer: Texture marked for update but image is incomplete.");else{if(e.images){const h=[];for(const d of e.images)h.push(d);t.images=h}else t.image=u;(n.isDefaultTexture===void 0||n.isDefaultTexture===!0)&&(r.createTexture(e,t),n.isDefaultTexture=!1,n.generation=e.version),e.source.dataReady===!0&&r.updateTexture(e,t),t.needsMipmaps&&e.mipmaps.length===0&&r.generateMipmaps(e)}}else r.createDefaultTexture(e),n.isDefaultTexture=!0,n.generation=e.version;if(n.initialized!==!0){n.initialized=!0,n.generation=e.version,this.info.memory.textures++;const l=()=>{e.removeEventListener("dispose",l),this._destroyTexture(e),this.info.memory.textures--};e.addEventListener("dispose",l)}n.version=e.version}getSize(e,t=hD){let n=e.images?e.images[0]:e.image;return n?(n.image!==void 0&&(n=n.image),t.width=n.width||1,t.height=n.height||1,t.depth=e.isCubeTexture?6:n.depth||1):t.width=t.height=t.depth=1,t}getMipLevels(e,t,n){let i;return e.isCompressedTexture?e.mipmaps?i=e.mipmaps.length:i=1:i=Math.floor(Math.log2(Math.max(t,n)))+1,i}needsMipmaps(e){return this.isEnvironmentTexture(e)||e.isCompressedTexture===!0||e.generateMipmaps}isEnvironmentTexture(e){const t=e.mapping;return t===Mr||t===Er||t===Fi||t===Bi}_destroyTexture(e){this.backend.destroySampler(e),this.backend.destroyTexture(e),this.delete(e)}}class fm extends De{constructor(e,t,n,i=1){super(e,t,n),this.a=i}set(e,t,n,i=1){return this.a=i,super.set(e,t,n)}copy(e){return e.a!==void 0&&(this.a=e.a),super.copy(e)}clone(){return new this.constructor(this.r,this.g,this.b,this.a)}}class xT extends At{static get type(){return"ParameterNode"}constructor(e,t=null){super(e,t),this.isParameterNode=!0}getHash(){return this.uuid}generate(){return this.name}}const fD=(s,e)=>J(new xT(s,e));class pD extends Ve{static get type(){return"StackNode"}constructor(e=null){super(),this.nodes=[],this.outputNode=null,this.parent=e,this._currentCond=null,this.isStackNode=!0}getNodeType(e){return this.outputNode?this.outputNode.getNodeType(e):"void"}add(e){return this.nodes.push(e),this}If(e,t){const n=new Cc(t);return this._currentCond=Cn(e,n),this.add(this._currentCond)}ElseIf(e,t){const n=new Cc(t),i=Cn(e,n);return this._currentCond.elseNode=i,this._currentCond=i,this}Else(e){return this._currentCond.elseNode=new Cc(e),this}build(e,...t){const n=bp();sl(this);for(const i of this.nodes)i.build(e,"void");return sl(n),this.outputNode?this.outputNode.build(e,...t):super.build(e,...t)}else(...e){return console.warn("TSL.StackNode: .else() has been renamed to .Else()."),this.Else(...e)}elseif(...e){return console.warn("TSL.StackNode: .elseif() has been renamed to .ElseIf()."),this.ElseIf(...e)}}const Uu=j(pD);class yT extends Ve{static get type(){return"OutputStructNode"}constructor(...e){super(),this.members=e,this.isOutputStructNode=!0}setup(e){super.setup(e);const t=this.members,n=[];for(let i=0;i<t.length;i++)n.push(t[i].getNodeType(e));this.nodeType=e.getStructTypeFromNode(this,n).name}generate(e,t){const n=e.getOutputStructName(),i=this.members,r=n!==""?n+".":"";for(let o=0;o<i.length;o++){const a=i[o].build(e,t);e.addLineFlowCode(`${r}m${o} = ${a}`,this)}return n}}const mD=j(yT);function vT(s,e){for(let t=0;t<s.length;t++)if(s[t].name===e)return t;return-1}class gD extends yT{static get type(){return"MRTNode"}constructor(e){super(),this.outputNodes=e,this.isMRTNode=!0}has(e){return this.outputNodes[e]!==void 0}get(e){return this.outputNodes[e]}merge(e){const t={...this.outputNodes,...e.outputNodes};return TT(t)}setup(e){const t=this.outputNodes,n=e.renderer.getRenderTarget(),i=[],r=n.textures;for(const o in t){const a=vT(r,o);i[a]=Ue(t[o])}return this.members=i,super.setup(e)}}const TT=j(gD),_D=z(([s])=>{const e=s.toUint().mul(747796405).add(2891336453),t=e.shiftRight(e.shiftRight(28).add(4)).bitXor(e).mul(277803737);return t.shiftRight(22).bitXor(t).toFloat().mul(1/2**32)}),Ef=(s,e)=>ji(Ke(4,s.mul(pt(1,s))),e),xD=(s,e)=>s.lessThan(.5)?Ef(s.mul(2),e).div(2):pt(1,Ef(Ke(pt(1,s),2),e).div(2)),yD=(s,e,t)=>ji(Zi(ji(s,e),cn(ji(s,e),ji(pt(1,s),t))),1/e),vD=(s,e)=>yi(Yu.mul(e.mul(s).sub(1))).div(Yu.mul(e.mul(s).sub(1))),Is=z(([s])=>s.fract().sub(.5).abs()).setLayout({name:"tri",type:"float",inputs:[{name:"x",type:"float"}]}),TD=z(([s])=>I(Is(s.z.add(Is(s.y.mul(1)))),Is(s.z.add(Is(s.x.mul(1)))),Is(s.y.add(Is(s.x.mul(1)))))).setLayout({name:"tri3",type:"vec3",inputs:[{name:"p",type:"vec3"}]}),SD=z(([s,e,t])=>{const n=I(s).toVar(),i=A(1.4).toVar(),r=A(0).toVar(),o=I(n).toVar();return Et({start:A(0),end:A(3),type:"float",condition:"<="},()=>{const a=I(TD(o.mul(2))).toVar();n.addAssign(a.add(t.mul(A(.1).mul(e)))),o.mulAssign(1.8),i.mulAssign(1.5),n.mulAssign(1.2);const c=A(Is(n.z.add(Is(n.x.add(Is(n.y)))))).toVar();r.addAssign(c.div(i)),o.addAssign(.14)}),r}).setLayout({name:"triNoise3D",type:"float",inputs:[{name:"position",type:"vec3"},{name:"speed",type:"float"},{name:"time",type:"float"}]});class bD extends Ve{static get type(){return"FunctionOverloadingNode"}constructor(e=[],...t){super(),this.functionNodes=e,this.parametersNodes=t,this._candidateFnCall=null,this.global=!0}getNodeType(){return this.functionNodes[0].shaderNode.layout.type}setup(e){const t=this.parametersNodes;let n=this._candidateFnCall;if(n===null){let i=null,r=-1;for(const o of this.functionNodes){const c=o.shaderNode.layout;if(c===null)throw new Error("FunctionOverloadingNode: FunctionNode must be a layout.");const l=c.inputs;if(t.length===l.length){let u=0;for(let h=0;h<t.length;h++){const d=t[h],f=l[h];d.getNodeType(e)===f.type?u++:u=0}u>r&&(i=o,r=u)}}this._candidateFnCall=n=i(...t)}return n}}const MD=j(bD),Dn=s=>(...e)=>MD(s,...e),No=Ie(0).setGroup(ke).onRenderUpdate(s=>s.time),ST=Ie(0).setGroup(ke).onRenderUpdate(s=>s.deltaTime),ED=Ie(0,"uint").setGroup(ke).onRenderUpdate(s=>s.frameId),AD=(s=1)=>(console.warn('TSL: timerLocal() is deprecated. Use "time" instead.'),No.mul(s)),RD=(s=1)=>(console.warn('TSL: timerGlobal() is deprecated. Use "time" instead.'),No.mul(s)),wD=(s=1)=>(console.warn('TSL: timerDelta() is deprecated. Use "deltaTime" instead.'),ST.mul(s)),ND=(s=No)=>s.add(.75).mul(Math.PI*2).sin().mul(.5).add(.5),CD=(s=No)=>s.fract().round(),PD=(s=No)=>s.add(.5).fract().mul(2).sub(1).abs(),DD=(s=No)=>s.fract(),LD=z(([s,e,t=se(.5)])=>dm(s.sub(t),e).add(t)),UD=z(([s,e,t=se(.5)])=>{const n=s.sub(t),i=n.dot(n),o=i.mul(i).mul(e);return s.add(n.mul(o))}),ID=z(({position:s=null,horizontal:e=!0,vertical:t=!1})=>{let n;s!==null?(n=Li.toVar(),n[3][0]=s.x,n[3][1]=s.y,n[3][2]=s.z):n=Li;const i=ui.mul(n);return il(e)&&(i[0][0]=Li[0].length(),i[0][1]=0,i[0][2]=0),il(t)&&(i[1][0]=0,i[1][1]=Li[1].length(),i[1][2]=0),i[2][0]=0,i[2][1]=0,i[2][2]=1,wo.mul(i).mul(Jt)}),FD=z(([s=null])=>{const e=Zu();return Zu(im(s)).sub(e).lessThan(0).select(Ss,s)});class BD extends Ve{static get type(){return"SpriteSheetUVNode"}constructor(e,t=Xt(),n=A(0)){super("vec2"),this.countNode=e,this.uvNode=t,this.frameNode=n}setup(){const{frameNode:e,uvNode:t,countNode:n}=this,{width:i,height:r}=n,o=e.mod(i.mul(r)).floor(),a=o.mod(i),c=r.sub(o.add(1).div(i).ceil()),l=n.reciprocal(),u=se(a,c);return t.add(u).mul(l)}}const OD=j(BD);class VD extends Ve{static get type(){return"TriplanarTexturesNode"}constructor(e,t=null,n=null,i=A(1),r=Jt,o=ci){super("vec4"),this.textureXNode=e,this.textureYNode=t,this.textureZNode=n,this.scaleNode=i,this.positionNode=r,this.normalNode=o}setup(){const{textureXNode:e,textureYNode:t,textureZNode:n,scaleNode:i,positionNode:r,normalNode:o}=this;let a=o.abs().normalize();a=a.div(a.dot(I(1)));const c=r.yz.mul(i),l=r.zx.mul(i),u=r.xy.mul(i),h=e.value,d=t!==null?t.value:h,f=n!==null?n.value:h,m=ht(h,c).mul(a.x),_=ht(d,l).mul(a.y),g=ht(f,u).mul(a.z);return cn(m,_,g)}}const bT=j(VD),GD=(...s)=>bT(...s),qo=new ei,kr=new U,Yo=new U,Cd=new U,xc=new ut,pu=new U(0,0,-1),es=new je,yc=new U,mu=new U,vc=new je,gu=new Ee,Ju=new Cr,zD=Ss.flipX();Ju.depthTexture=new Qs(1,1);let Pd=!1;class pm extends vs{static get type(){return"ReflectorNode"}constructor(e={}){super(e.defaultTexture||Ju.texture,zD),this._reflectorBaseNode=e.reflector||new kD(this,e),this._depthNode=null,this.setUpdateMatrix(!1)}get reflector(){return this._reflectorBaseNode}get target(){return this._reflectorBaseNode.target}getDepthNode(){if(this._depthNode===null){if(this._reflectorBaseNode.depth!==!0)throw new Error("THREE.ReflectorNode: Depth node can only be requested when the reflector is created with { depth: true }. ");this._depthNode=J(new pm({defaultTexture:Ju.depthTexture,reflector:this._reflectorBaseNode}))}return this._depthNode}setup(e){return e.object.isQuadMesh||this._reflectorBaseNode.build(e),super.setup(e)}clone(){const e=new this.constructor(this.reflectorNode);return e._reflectorBaseNode=this._reflectorBaseNode,e}}class kD extends Ve{static get type(){return"ReflectorBaseNode"}constructor(e,t={}){super();const{target:n=new mn,resolution:i=1,generateMipmaps:r=!1,bounces:o=!0,depth:a=!1}=t;this.textureNode=e,this.target=n,this.resolution=i,this.generateMipmaps=r,this.bounces=o,this.depth=a,this.updateBeforeType=o?Ye.RENDER:Ye.FRAME,this.virtualCameras=new WeakMap,this.renderTargets=new WeakMap}_updateResolution(e,t){const n=this.resolution;t.getDrawingBufferSize(gu),e.setSize(Math.round(gu.width*n),Math.round(gu.height*n))}setup(e){return this._updateResolution(Ju,e.renderer),super.setup(e)}getVirtualCamera(e){let t=this.virtualCameras.get(e);return t===void 0&&(t=e.clone(),this.virtualCameras.set(e,t)),t}getRenderTarget(e){let t=this.renderTargets.get(e);return t===void 0&&(t=new Cr(0,0,{type:zn}),this.generateMipmaps===!0&&(t.texture.minFilter=cb,t.texture.generateMipmaps=!0),this.depth===!0&&(t.depthTexture=new Qs),this.renderTargets.set(e,t)),t}updateBefore(e){if(this.bounces===!1&&Pd)return!1;Pd=!0;const{scene:t,camera:n,renderer:i,material:r}=e,{target:o}=this,a=this.getVirtualCamera(n),c=this.getRenderTarget(a);if(i.getDrawingBufferSize(gu),this._updateResolution(c,i),Yo.setFromMatrixPosition(o.matrixWorld),Cd.setFromMatrixPosition(n.matrixWorld),xc.extractRotation(o.matrixWorld),kr.set(0,0,1),kr.applyMatrix4(xc),yc.subVectors(Yo,Cd),yc.dot(kr)>0)return;yc.reflect(kr).negate(),yc.add(Yo),xc.extractRotation(n.matrixWorld),pu.set(0,0,-1),pu.applyMatrix4(xc),pu.add(Cd),mu.subVectors(Yo,pu),mu.reflect(kr).negate(),mu.add(Yo),a.coordinateSystem=n.coordinateSystem,a.position.copy(yc),a.up.set(0,1,0),a.up.applyMatrix4(xc),a.up.reflect(kr),a.lookAt(mu),a.near=n.near,a.far=n.far,a.updateMatrixWorld(),a.projectionMatrix.copy(n.projectionMatrix),qo.setFromNormalAndCoplanarPoint(kr,Yo),qo.applyMatrix4(a.matrixWorldInverse),es.set(qo.normal.x,qo.normal.y,qo.normal.z,qo.constant);const l=a.projectionMatrix;vc.x=(Math.sign(es.x)+l.elements[8])/l.elements[0],vc.y=(Math.sign(es.y)+l.elements[9])/l.elements[5],vc.z=-1,vc.w=(1+l.elements[10])/l.elements[14],es.multiplyScalar(1/es.dot(vc));const u=0;l.elements[2]=es.x,l.elements[6]=es.y,l.elements[10]=i.coordinateSystem===_s?es.z-u:es.z+1-u,l.elements[14]=es.w,this.textureNode.value=c.texture,this.depth===!0&&(this.textureNode.getDepthNode().value=c.depthTexture),r.visible=!1;const h=i.getRenderTarget(),d=i.getMRT(),f=i.autoClear;i.setMRT(null),i.setRenderTarget(c),i.autoClear=!0,i.render(t,a),i.setMRT(d),i.setRenderTarget(h),i.autoClear=f,r.visible=!0,Pd=!1}}const HD=s=>J(new pm(s)),Dd=new Ml(-1,1,1,-1,0,1);class WD extends Qi{constructor(e=!1){super();const t=e===!1?[0,-1,0,1,2,1]:[0,2,0,0,2,0];this.setAttribute("position",new oi([-1,3,0,-1,-1,0,3,-1,0],3)),this.setAttribute("uv",new oi(t,2))}}const $D=new WD;class mm extends On{constructor(e=null){super($D,e),this.camera=Dd,this.isQuadMesh=!0}async renderAsync(e){return e.renderAsync(this,Dd)}render(e){e.render(this,Dd)}}const XD=new Ee;class qD extends vs{static get type(){return"RTTNode"}constructor(e,t=null,n=null,i={type:zn}){const r=new Cr(t,n,i);super(r.texture,Xt()),this.node=e,this.width=t,this.height=n,this.pixelRatio=1,this.renderTarget=r,this.textureNeedsUpdate=!0,this.autoUpdate=!0,this._rttNode=null,this._quadMesh=new mm(new tn),this.updateBeforeType=Ye.RENDER}get autoSize(){return this.width===null}setup(e){return this._rttNode=this.node.context(e.getSharedContext()),this._quadMesh.material.name="RTT",this._quadMesh.material.needsUpdate=!0,super.setup(e)}setSize(e,t){this.width=e,this.height=t;const n=e*this.pixelRatio,i=t*this.pixelRatio;this.renderTarget.setSize(n,i),this.textureNeedsUpdate=!0}setPixelRatio(e){this.pixelRatio=e,this.setSize(this.width,this.height)}updateBefore({renderer:e}){if(this.textureNeedsUpdate===!1&&this.autoUpdate===!1)return;if(this.textureNeedsUpdate=!1,this.autoSize===!0){this.pixelRatio=e.getPixelRatio();const n=e.getSize(XD);this.setSize(n.width,n.height)}this._quadMesh.material.fragmentNode=this._rttNode;const t=e.getRenderTarget();e.setRenderTarget(this.renderTarget),this._quadMesh.render(e),e.setRenderTarget(t)}clone(){const e=new vs(this.value,this.uvNode,this.levelNode);return e.sampler=this.sampler,e.referenceNode=this,e}}const MT=(s,...e)=>J(new qD(J(s),...e)),YD=(s,...e)=>s.isTextureNode?s:s.isPassNode?s.getTextureNode():MT(s,...e),ta=z(([s,e,t],n)=>{let i;n.renderer.coordinateSystem===_s?(s=se(s.x,s.y.oneMinus()).mul(2).sub(1),i=Ue(I(s,e),1)):i=Ue(I(s.x,s.y.oneMinus(),e).mul(2).sub(1),1);const r=Ue(t.mul(i));return r.xyz.div(r.w)}),jD=z(([s,e])=>{const t=e.mul(Ue(s,1)),n=t.xy.div(t.w).mul(.5).add(.5).toVar();return se(n.x,n.y.oneMinus())}),KD=z(([s,e,t])=>{const n=Sr(Zt(e)),i=xn(s.mul(n)).toVar(),r=Zt(e,i).toVar(),o=Zt(e,i.sub(xn(2,0))).toVar(),a=Zt(e,i.sub(xn(1,0))).toVar(),c=Zt(e,i.add(xn(1,0))).toVar(),l=Zt(e,i.add(xn(2,0))).toVar(),u=Zt(e,i.add(xn(0,2))).toVar(),h=Zt(e,i.add(xn(0,1))).toVar(),d=Zt(e,i.sub(xn(0,1))).toVar(),f=Zt(e,i.sub(xn(0,2))).toVar(),m=Ft(pt(A(2).mul(a).sub(o),r)).toVar(),_=Ft(pt(A(2).mul(c).sub(l),r)).toVar(),g=Ft(pt(A(2).mul(h).sub(u),r)).toVar(),p=Ft(pt(A(2).mul(d).sub(f),r)).toVar(),T=ta(s,r,t).toVar(),S=m.lessThan(_).select(T.sub(ta(s.sub(se(A(1).div(n.x),0)),a,t)),T.negate().add(ta(s.add(se(A(1).div(n.x),0)),c,t))),v=g.lessThan(p).select(T.sub(ta(s.add(se(0,A(1).div(n.y))),h,t)),T.negate().add(ta(s.sub(se(0,A(1).div(n.y))),d,t)));return js(Mh(S,v))});class ZD extends pp{constructor(e,t,n=Float32Array){const i=ArrayBuffer.isView(e)?e:new n(e*t);super(i,t),this.isStorageInstancedBufferAttribute=!0}}class QD extends Pn{constructor(e,t,n=Float32Array){const i=ArrayBuffer.isView(e)?e:new n(e*t);super(i,t),this.isStorageBufferAttribute=!0}}class JD extends Ro{static get type(){return"StorageArrayElementNode"}constructor(e,t){super(e,t),this.isStorageArrayElementNode=!0}set storageBufferNode(e){this.node=e}get storageBufferNode(){return this.node}setup(e){return e.isAvailable("storageBuffer")===!1&&this.node.isPBO===!0&&e.setupPBO(this.node),super.setup(e)}generate(e,t){let n;const i=e.context.assign;if(e.isAvailable("storageBuffer")===!1?this.node.isPBO===!0&&i!==!0&&(this.node.value.isInstancedBufferAttribute||e.shaderStage!=="compute")?n=e.generatePBO(this):n=this.node.build(e):n=super.generate(e),i!==!0){const r=this.getNodeType(e);n=e.format(n,r,t)}return n}}const eL=j(JD);class tL extends Kp{static get type(){return"StorageBufferNode"}constructor(e,t=null,n=0){t===null&&(e.isStorageBufferAttribute||e.isStorageInstancedBufferAttribute)&&(t=Kx(e.itemSize),n=e.count),super(e,t,n),this.isStorageBufferNode=!0,this.access=Vn.READ_WRITE,this.isAtomic=!1,this.isPBO=!1,this._attribute=null,this._varying=null,this.global=!0,e.isStorageBufferAttribute!==!0&&e.isStorageInstancedBufferAttribute!==!0&&(e.isInstancedBufferAttribute?e.isStorageInstancedBufferAttribute=!0:e.isStorageBufferAttribute=!0)}getHash(e){if(this.bufferCount===0){let t=e.globalCache.getData(this.value);return t===void 0&&(t={node:this},e.globalCache.setData(this.value,t)),t.node.uuid}return this.uuid}getInputType(){return this.value.isIndirectStorageBufferAttribute?"indirectStorageBuffer":"storageBuffer"}element(e){return eL(this,e)}setPBO(e){return this.isPBO=e,this}getPBO(){return this.isPBO}setAccess(e){return this.access=e,this}toReadOnly(){return this.setAccess(Vn.READ_ONLY)}setAtomic(e){return this.isAtomic=e,this}toAtomic(){return this.setAtomic(!0)}getAttributeData(){return this._attribute===null&&(this._attribute=Nl(this.value),this._varying=li(this._attribute)),{attribute:this._attribute,varying:this._varying}}getNodeType(e){if(e.isAvailable("storageBuffer")||e.isAvailable("indirectStorageBuffer"))return super.getNodeType(e);const{attribute:t}=this.getAttributeData();return t.getNodeType(e)}generate(e){if(e.isAvailable("storageBuffer")||e.isAvailable("indirectStorageBuffer"))return super.generate(e);const{attribute:t,varying:n}=this.getAttributeData(),i=n.build(e);return e.registerTransform(i,t),i}}const Ih=(s,e=null,t=0)=>J(new tL(s,e,t)),nL=(s,e,t)=>(console.warn('THREE.TSL: "storageObject()" is deprecated. Use "storage().setPBO( true )" instead.'),Ih(s,e,t).setPBO(!0)),iL=(s,e="float")=>{const t=Qx(e),n=Zx(e),i=new QD(s,t,n);return Ih(i,e,s)},sL=(s,e="float")=>{const t=Qx(e),n=Zx(e),i=new ZD(s,t,n);return Ih(i,e,s)};class rL extends Bv{static get type(){return"VertexColorNode"}constructor(e=0){super(null,"vec4"),this.isVertexColorNode=!0,this.index=e}getAttributeName(){const e=this.index;return"color"+(e>0?e:"")}generate(e){const t=this.getAttributeName(e),n=e.hasGeometryAttribute(t);let i;return n===!0?i=super.generate(e):i=e.generateConst(this.nodeType,new je(1,1,1,1)),i}serialize(e){super.serialize(e),e.index=this.index}deserialize(e){super.deserialize(e),this.index=e.index}}const oL=s=>J(new rL(s));class aL extends Ve{static get type(){return"PointUVNode"}constructor(){super("vec2"),this.isPointUVNode=!0}generate(){return"vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y )"}}const cL=de(aL),Tc=new Mi,Ld=new ut;class si extends Ve{static get type(){return"SceneNode"}constructor(e=si.BACKGROUND_BLURRINESS,t=null){super(),this.scope=e,this.scene=t}setup(e){const t=this.scope,n=this.scene!==null?this.scene:e.scene;let i;return t===si.BACKGROUND_BLURRINESS?i=Ct("backgroundBlurriness","float",n):t===si.BACKGROUND_INTENSITY?i=Ct("backgroundIntensity","float",n):t===si.BACKGROUND_ROTATION?i=Ie("mat4").label("backgroundRotation").setGroup(ke).onRenderUpdate(()=>{const r=n.background;return r!==null&&r.isTexture&&r.mapping!==jf?(Tc.copy(n.backgroundRotation),Tc.x*=-1,Tc.y*=-1,Tc.z*=-1,Ld.makeRotationFromEuler(Tc)):Ld.identity(),Ld}):console.error("THREE.SceneNode: Unknown scope:",t),i}}si.BACKGROUND_BLURRINESS="backgroundBlurriness";si.BACKGROUND_INTENSITY="backgroundIntensity";si.BACKGROUND_ROTATION="backgroundRotation";const ET=de(si,si.BACKGROUND_BLURRINESS),Af=de(si,si.BACKGROUND_INTENSITY),AT=de(si,si.BACKGROUND_ROTATION);class lL extends vs{static get type(){return"StorageTextureNode"}constructor(e,t,n=null){super(e,t),this.storeNode=n,this.isStorageTextureNode=!0,this.access=Vn.WRITE_ONLY}getInputType(){return"storageTexture"}setup(e){super.setup(e);const t=e.getNodeProperties(this);t.storeNode=this.storeNode}setAccess(e){return this.access=e,this}generate(e,t){let n;return this.storeNode!==null?n=this.generateStore(e):n=super.generate(e,t),n}toReadWrite(){return this.setAccess(Vn.READ_WRITE)}toReadOnly(){return this.setAccess(Vn.READ_ONLY)}toWriteOnly(){return this.setAccess(Vn.WRITE_ONLY)}generateStore(e){const t=e.getNodeProperties(this),{uvNode:n,storeNode:i}=t,r=super.generate(e,"property"),o=n.build(e,"uvec2"),a=i.build(e,"vec4"),c=e.generateTextureStore(e,r,o,a);e.addLineFlowCode(c,this)}}const RT=j(lL),uL=(s,e,t)=>{const n=RT(s,e,t);return t!==null&&n.append(),n};class hL extends Ch{static get type(){return"UserDataNode"}constructor(e,t,n=null){super(e,t,n),this.userData=n}updateReference(e){return this.reference=this.userData!==null?this.userData:e.object.userData,this.reference}}const dL=(s,e,t)=>J(new hL(s,e,t)),y_=new WeakMap;class fL extends ln{static get type(){return"VelocityNode"}constructor(){super("vec2"),this.projectionMatrix=null,this.updateType=Ye.OBJECT,this.updateAfterType=Ye.OBJECT,this.previousModelWorldMatrix=Ie(new ut),this.previousProjectionMatrix=Ie(new ut).setGroup(ke),this.previousCameraViewMatrix=Ie(new ut)}setProjectionMatrix(e){this.projectionMatrix=e}update({frameId:e,camera:t,object:n}){const i=v_(n);this.previousModelWorldMatrix.value.copy(i);const r=wT(t);r.frameId!==e&&(r.frameId=e,r.previousProjectionMatrix===void 0?(r.previousProjectionMatrix=new ut,r.previousCameraViewMatrix=new ut,r.currentProjectionMatrix=new ut,r.currentCameraViewMatrix=new ut,r.previousProjectionMatrix.copy(this.projectionMatrix||t.projectionMatrix),r.previousCameraViewMatrix.copy(t.matrixWorldInverse)):(r.previousProjectionMatrix.copy(r.currentProjectionMatrix),r.previousCameraViewMatrix.copy(r.currentCameraViewMatrix)),r.currentProjectionMatrix.copy(this.projectionMatrix||t.projectionMatrix),r.currentCameraViewMatrix.copy(t.matrixWorldInverse),this.previousProjectionMatrix.value.copy(r.previousProjectionMatrix),this.previousCameraViewMatrix.value.copy(r.previousCameraViewMatrix))}updateAfter({object:e}){v_(e).copy(e.matrixWorld)}setup(){const e=this.projectionMatrix===null?wo:Ie(this.projectionMatrix),t=this.previousCameraViewMatrix.mul(this.previousModelWorldMatrix),n=e.mul(oc).mul(Jt),i=this.previousProjectionMatrix.mul(t).mul(Ku),r=n.xy.div(n.w),o=i.xy.div(i.w);return pt(r,o)}}function wT(s){let e=y_.get(s);return e===void 0&&(e={},y_.set(s,e)),e}function v_(s,e=0){const t=wT(s);let n=t[e];return n===void 0&&(t[e]=n=new ut),n}const pL=de(fL),NT=z(([s,e])=>ai(1,s.oneMinus().div(e)).oneMinus()).setLayout({name:"blendBurn",type:"vec3",inputs:[{name:"base",type:"vec3"},{name:"blend",type:"vec3"}]}),CT=z(([s,e])=>ai(s.div(e.oneMinus()),1)).setLayout({name:"blendDodge",type:"vec3",inputs:[{name:"base",type:"vec3"},{name:"blend",type:"vec3"}]}),PT=z(([s,e])=>s.oneMinus().mul(e.oneMinus()).oneMinus()).setLayout({name:"blendScreen",type:"vec3",inputs:[{name:"base",type:"vec3"},{name:"blend",type:"vec3"}]}),DT=z(([s,e])=>Mt(s.mul(2).mul(e),s.oneMinus().mul(2).mul(e.oneMinus()).oneMinus(),bh(.5,s))).setLayout({name:"blendOverlay",type:"vec3",inputs:[{name:"base",type:"vec3"},{name:"blend",type:"vec3"}]}),mL=z(([s,e])=>{const t=e.a.add(s.a.mul(e.a.oneMinus()));return Ue(e.rgb.mul(e.a).add(s.rgb.mul(s.a).mul(e.a.oneMinus())).div(t),t)}).setLayout({name:"blendColor",type:"vec4",inputs:[{name:"base",type:"vec4"},{name:"blend",type:"vec4"}]}),gL=(...s)=>(console.warn('THREE.TSL: "burn" has been renamed. Use "blendBurn" instead.'),NT(s)),_L=(...s)=>(console.warn('THREE.TSL: "dodge" has been renamed. Use "blendDodge" instead.'),CT(s)),xL=(...s)=>(console.warn('THREE.TSL: "screen" has been renamed. Use "blendScreen" instead.'),PT(s)),yL=(...s)=>(console.warn('THREE.TSL: "overlay" has been renamed. Use "blendOverlay" instead.'),DT(s)),vL=z(([s])=>gm(s.rgb)),TL=z(([s,e=A(1)])=>e.mix(gm(s.rgb),s.rgb)),SL=z(([s,e=A(1)])=>{const t=cn(s.r,s.g,s.b).div(3),n=s.r.max(s.g.max(s.b)),i=n.sub(t).mul(e).mul(-3);return Mt(s.rgb,n,i)}),bL=z(([s,e=A(1)])=>{const t=I(.57735,.57735,.57735),n=e.cos();return I(s.rgb.mul(n).add(t.cross(s.rgb).mul(e.sin()).add(t.mul(Dr(t,s.rgb).mul(n.oneMinus())))))}),gm=(s,e=I(rt.getLuminanceCoefficients(new U)))=>Dr(s,e),ML=z(([s,e=I(1),t=I(0),n=I(1),i=A(1),r=I(rt.getLuminanceCoefficients(new U,bi))])=>{const o=s.rgb.dot(I(r)),a=en(s.rgb.mul(e).add(t),0).toVar(),c=a.pow(n).toVar();return it(a.r.greaterThan(0),()=>{a.r.assign(c.r)}),it(a.g.greaterThan(0),()=>{a.g.assign(c.g)}),it(a.b.greaterThan(0),()=>{a.b.assign(c.b)}),a.assign(o.add(a.sub(o).mul(i))),Ue(a.rgb,s.a)});class EL extends ln{static get type(){return"PosterizeNode"}constructor(e,t){super(),this.sourceNode=e,this.stepsNode=t}setup(){const{sourceNode:e,stepsNode:t}=this;return e.mul(t).floor().div(t)}}const AL=j(EL),RL=new Ee;class LT extends vs{static get type(){return"PassTextureNode"}constructor(e,t){super(t),this.passNode=e,this.setUpdateMatrix(!1)}setup(e){return e.object.isQuadMesh&&this.passNode.build(e),super.setup(e)}clone(){return new this.constructor(this.passNode,this.value)}}class T_ extends LT{static get type(){return"PassMultipleTextureNode"}constructor(e,t,n=!1){super(e,null),this.textureName=t,this.previousTexture=n}updateTexture(){this.value=this.previousTexture?this.passNode.getPreviousTexture(this.textureName):this.passNode.getTexture(this.textureName)}setup(e){return this.updateTexture(),super.setup(e)}clone(){return new this.constructor(this.passNode,this.textureName,this.previousTexture)}}class Ms extends ln{static get type(){return"PassNode"}constructor(e,t,n,i={}){super("vec4"),this.scope=e,this.scene=t,this.camera=n,this.options=i,this._pixelRatio=1,this._width=1,this._height=1;const r=new Qs;r.isRenderTargetTexture=!0,r.name="depth";const o=new Cr(this._width*this._pixelRatio,this._height*this._pixelRatio,{type:zn,...i});o.texture.name="output",o.depthTexture=r,this.renderTarget=o,this._textures={output:o.texture,depth:r},this._textureNodes={},this._linearDepthNodes={},this._viewZNodes={},this._previousTextures={},this._previousTextureNodes={},this._cameraNear=Ie(0),this._cameraFar=Ie(0),this._mrt=null,this.isPassNode=!0,this.updateBeforeType=Ye.FRAME}setMRT(e){return this._mrt=e,this}getMRT(){return this._mrt}isGlobal(){return!0}getTexture(e){let t=this._textures[e];return t===void 0&&(t=this.renderTarget.texture.clone(),t.name=e,this._textures[e]=t,this.renderTarget.textures.push(t)),t}getPreviousTexture(e){let t=this._previousTextures[e];return t===void 0&&(t=this.getTexture(e).clone(),this._previousTextures[e]=t),t}toggleTexture(e){const t=this._previousTextures[e];if(t!==void 0){const n=this._textures[e],i=this.renderTarget.textures.indexOf(n);this.renderTarget.textures[i]=t,this._textures[e]=t,this._previousTextures[e]=n,this._textureNodes[e].updateTexture(),this._previousTextureNodes[e].updateTexture()}}getTextureNode(e="output"){let t=this._textureNodes[e];return t===void 0&&(t=J(new T_(this,e)),t.updateTexture(),this._textureNodes[e]=t),t}getPreviousTextureNode(e="output"){let t=this._previousTextureNodes[e];return t===void 0&&(this._textureNodes[e]===void 0&&this.getTextureNode(e),t=J(new T_(this,e,!0)),t.updateTexture(),this._previousTextureNodes[e]=t),t}getViewZNode(e="depth"){let t=this._viewZNodes[e];if(t===void 0){const n=this._cameraNear,i=this._cameraFar;this._viewZNodes[e]=t=sm(this.getTextureNode(e),n,i)}return t}getLinearDepthNode(e="depth"){let t=this._linearDepthNodes[e];if(t===void 0){const n=this._cameraNear,i=this._cameraFar,r=this.getViewZNode(e);this._linearDepthNodes[e]=t=fa(r,n,i)}return t}setup({renderer:e}){return this.renderTarget.samples=this.options.samples===void 0?e.samples:this.options.samples,e.backend.isWebGLBackend===!0&&(this.renderTarget.samples=0),this.scope===Ms.COLOR?this.getTextureNode():this.getLinearDepthNode()}updateBefore(e){const{renderer:t}=e,{scene:n,camera:i}=this;this._pixelRatio=t.getPixelRatio();const r=t.getSize(RL);this.setSize(r.width,r.height);const o=t.getRenderTarget(),a=t.getMRT();this._cameraNear.value=i.near,this._cameraFar.value=i.far;for(const c in this._previousTextures)this.toggleTexture(c);t.setRenderTarget(this.renderTarget),t.setMRT(this._mrt),t.render(n,i),t.setRenderTarget(o),t.setMRT(a)}setSize(e,t){this._width=e,this._height=t;const n=this._width*this._pixelRatio,i=this._height*this._pixelRatio;this.renderTarget.setSize(n,i)}setPixelRatio(e){this._pixelRatio=e,this.setSize(this._width,this._height)}dispose(){this.renderTarget.dispose()}}Ms.COLOR="color";Ms.DEPTH="depth";const wL=(s,e,t)=>J(new Ms(Ms.COLOR,s,e,t)),NL=(s,e)=>J(new LT(s,e)),CL=(s,e,t)=>J(new Ms(Ms.DEPTH,s,e,t));class PL extends Ms{static get type(){return"ToonOutlinePassNode"}constructor(e,t,n,i,r){super(Ms.COLOR,e,t),this.colorNode=n,this.thicknessNode=i,this.alphaNode=r,this._materialCache=new WeakMap}updateBefore(e){const{renderer:t}=e,n=t.getRenderObjectFunction();t.setRenderObjectFunction((i,r,o,a,c,l,u,h)=>{if((c.isMeshToonMaterial||c.isMeshToonNodeMaterial)&&c.wireframe===!1){const d=this._getOutlineMaterial(c);t.renderObject(i,r,o,a,d,l,u,h)}t.renderObject(i,r,o,a,c,l,u,h)}),super.updateBefore(e),t.setRenderObjectFunction(n)}_createMaterial(){const e=new tn;e.isMeshToonOutlineMaterial=!0,e.name="Toon_Outline",e.side=Wt;const t=ci.negate(),n=wo.mul(oc),i=A(1),r=n.mul(Ue(Jt,1)),o=n.mul(Ue(Jt.add(t),1)),a=js(r.sub(o));return e.vertexNode=r.add(a.mul(this.thicknessNode).mul(r.w).mul(i)),e.colorNode=Ue(this.colorNode,this.alphaNode),e}_getOutlineMaterial(e){let t=this._materialCache.get(e);return t===void 0&&(t=this._createMaterial(),this._materialCache.set(e,t)),t}}const DL=(s,e,t=new De(0,0,0),n=.003,i=1)=>J(new PL(s,e,J(t),J(n),J(i))),UT=z(([s,e])=>s.mul(e).clamp()).setLayout({name:"linearToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),IT=z(([s,e])=>(s=s.mul(e),s.div(s.add(1)).clamp())).setLayout({name:"reinhardToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),FT=z(([s,e])=>{s=s.mul(e),s=s.sub(.004).max(0);const t=s.mul(s.mul(6.2).add(.5)),n=s.mul(s.mul(6.2).add(1.7)).add(.06);return t.div(n).pow(2.2)}).setLayout({name:"cineonToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),LL=z(([s])=>{const e=s.mul(s.add(.0245786)).sub(90537e-9),t=s.mul(s.add(.432951).mul(.983729)).add(.238081);return e.div(t)}),BT=z(([s,e])=>{const t=Wn(.59719,.35458,.04823,.076,.90834,.01566,.0284,.13383,.83777),n=Wn(1.60475,-.53108,-.07367,-.10208,1.10813,-.00605,-.00327,-.07276,1.07602);return s=s.mul(e).div(.6),s=t.mul(s),s=LL(s),s=n.mul(s),s.clamp()}).setLayout({name:"acesFilmicToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),UL=Wn(I(1.6605,-.1246,-.0182),I(-.5876,1.1329,-.1006),I(-.0728,-.0083,1.1187)),IL=Wn(I(.6274,.0691,.0164),I(.3293,.9195,.088),I(.0433,.0113,.8956)),FL=z(([s])=>{const e=I(s).toVar(),t=I(e.mul(e)).toVar(),n=I(t.mul(t)).toVar();return A(15.5).mul(n.mul(t)).sub(Ke(40.14,n.mul(e))).add(Ke(31.96,n).sub(Ke(6.868,t.mul(e))).add(Ke(.4298,t).add(Ke(.1191,e).sub(.00232))))}),OT=z(([s,e])=>{const t=I(s).toVar(),n=Wn(I(.856627153315983,.137318972929847,.11189821299995),I(.0951212405381588,.761241990602591,.0767994186031903),I(.0482516061458583,.101439036467562,.811302368396859)),i=Wn(I(1.1271005818144368,-.1413297634984383,-.14132976349843826),I(-.11060664309660323,1.157823702216272,-.11060664309660294),I(-.016493938717834573,-.016493938717834257,1.2519364065950405)),r=A(-12.47393),o=A(4.026069);return t.mulAssign(e),t.assign(IL.mul(t)),t.assign(n.mul(t)),t.assign(en(t,1e-10)),t.assign(ds(t)),t.assign(t.sub(r).div(o.sub(r))),t.assign(xs(t,0,1)),t.assign(FL(t)),t.assign(i.mul(t)),t.assign(ji(en(I(0),t),I(2.2))),t.assign(UL.mul(t)),t.assign(xs(t,0,1)),t}).setLayout({name:"agxToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),VT=z(([s,e])=>{const t=A(.76),n=A(.15);s=s.mul(e);const i=ai(s.r,ai(s.g,s.b)),r=Cn(i.lessThan(.08),i.sub(Ke(6.25,i.mul(i))),.04);s.subAssign(r);const o=en(s.r,en(s.g,s.b));it(o.lessThan(t),()=>s);const a=pt(1,t),c=pt(1,a.mul(a).div(o.add(a.sub(t))));s.mulAssign(c.div(o));const l=pt(1,Zi(1,n.mul(o.sub(c)).add(1)));return Mt(s,I(c),l)}).setLayout({name:"neutralToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]});class fn extends Ve{static get type(){return"CodeNode"}constructor(e="",t=[],n=""){super("code"),this.isCodeNode=!0,this.code=e,this.includes=t,this.language=n}isGlobal(){return!0}setIncludes(e){return this.includes=e,this}getIncludes(){return this.includes}generate(e){const t=this.getIncludes(e);for(const i of t)i.build(e);const n=e.getCodeFromNode(this,this.getNodeType(e));return n.code=this.code,n.code}serialize(e){super.serialize(e),e.code=this.code,e.language=this.language}deserialize(e){super.deserialize(e),this.code=e.code,this.language=e.language}}const Fh=j(fn),BL=(s,e)=>Fh(s,e,"js"),OL=(s,e)=>Fh(s,e,"wgsl"),VL=(s,e)=>Fh(s,e,"glsl");class GT extends fn{static get type(){return"FunctionNode"}constructor(e="",t=[],n=""){super(e,t,n)}getNodeType(e){return this.getNodeFunction(e).type}getInputs(e){return this.getNodeFunction(e).inputs}getNodeFunction(e){const t=e.getDataFromNode(this);let n=t.nodeFunction;return n===void 0&&(n=e.parser.parseFunction(this.code),t.nodeFunction=n),n}generate(e,t){super.generate(e);const n=this.getNodeFunction(e),i=n.name,r=n.type,o=e.getCodeFromNode(this,r);i!==""&&(o.name=i);const a=e.getPropertyName(o),c=this.getNodeFunction(e).getCode(a);return o.code=c+`
`,t==="property"?a:e.format(`${a}()`,r,t)}}const zT=(s,e=[],t="")=>{for(let r=0;r<e.length;r++){const o=e[r];typeof o=="function"&&(e[r]=o.functionNode)}const n=J(new GT(s,e,t)),i=(...r)=>n.call(...r);return i.functionNode=n,i},GL=(s,e)=>zT(s,e,"glsl"),zL=(s,e)=>zT(s,e,"wgsl");class kL extends Ve{static get type(){return"ScriptableValueNode"}constructor(e=null){super(),this._value=e,this._cache=null,this.inputType=null,this.outputType=null,this.events=new Zs,this.isScriptableValueNode=!0}get isScriptableOutputNode(){return this.outputType!==null}set value(e){this._value!==e&&(this._cache&&this.inputType==="URL"&&this.value.value instanceof ArrayBuffer&&(URL.revokeObjectURL(this._cache),this._cache=null),this._value=e,this.events.dispatchEvent({type:"change"}),this.refresh())}get value(){return this._value}refresh(){this.events.dispatchEvent({type:"refresh"})}getValue(){const e=this.value;if(e&&this._cache===null&&this.inputType==="URL"&&e.value instanceof ArrayBuffer)this._cache=URL.createObjectURL(new Blob([e.value]));else if(e&&e.value!==null&&e.value!==void 0&&((this.inputType==="URL"||this.inputType==="String")&&typeof e.value=="string"||this.inputType==="Number"&&typeof e.value=="number"||this.inputType==="Vector2"&&e.value.isVector2||this.inputType==="Vector3"&&e.value.isVector3||this.inputType==="Vector4"&&e.value.isVector4||this.inputType==="Color"&&e.value.isColor||this.inputType==="Matrix3"&&e.value.isMatrix3||this.inputType==="Matrix4"&&e.value.isMatrix4))return e.value;return this._cache||e}getNodeType(e){return this.value&&this.value.isNode?this.value.getNodeType(e):"float"}setup(){return this.value&&this.value.isNode?this.value:A()}serialize(e){super.serialize(e),this.value!==null?this.inputType==="ArrayBuffer"?e.value=ty(this.value):e.value=this.value?this.value.toJSON(e.meta).uuid:null:e.value=null,e.inputType=this.inputType,e.outputType=this.outputType}deserialize(e){super.deserialize(e);let t=null;e.value!==null&&(e.inputType==="ArrayBuffer"?t=ny(e.value):e.inputType==="Texture"?t=e.meta.textures[e.value]:t=e.meta.nodes[e.value]||null),this.value=t,this.inputType=e.inputType,this.outputType=e.outputType}}const Iu=j(kL);class kT extends Map{get(e,t=null,...n){if(this.has(e))return super.get(e);if(t!==null){const i=t(...n);return this.set(e,i),i}}}class HL{constructor(e){this.scriptableNode=e}get parameters(){return this.scriptableNode.parameters}get layout(){return this.scriptableNode.getLayout()}getInputLayout(e){return this.scriptableNode.getInputLayout(e)}get(e){const t=this.parameters[e];return t?t.getValue():null}}const Fu=new kT;class WL extends Ve{static get type(){return"ScriptableNode"}constructor(e=null,t={}){super(),this.codeNode=e,this.parameters=t,this._local=new kT,this._output=Iu(),this._outputs={},this._source=this.source,this._method=null,this._object=null,this._value=null,this._needsOutputUpdate=!0,this.onRefresh=this.onRefresh.bind(this),this.isScriptableNode=!0}get source(){return this.codeNode?this.codeNode.code:""}setLocal(e,t){return this._local.set(e,t)}getLocal(e){return this._local.get(e)}onRefresh(){this._refresh()}getInputLayout(e){for(const t of this.getLayout())if(t.inputType&&(t.id===e||t.name===e))return t}getOutputLayout(e){for(const t of this.getLayout())if(t.outputType&&(t.id===e||t.name===e))return t}setOutput(e,t){const n=this._outputs;return n[e]===void 0?n[e]=Iu(t):n[e].value=t,this}getOutput(e){return this._outputs[e]}getParameter(e){return this.parameters[e]}setParameter(e,t){const n=this.parameters;return t&&t.isScriptableNode?(this.deleteParameter(e),n[e]=t,n[e].getDefaultOutput().events.addEventListener("refresh",this.onRefresh)):t&&t.isScriptableValueNode?(this.deleteParameter(e),n[e]=t,n[e].events.addEventListener("refresh",this.onRefresh)):n[e]===void 0?(n[e]=Iu(t),n[e].events.addEventListener("refresh",this.onRefresh)):n[e].value=t,this}getValue(){return this.getDefaultOutput().getValue()}deleteParameter(e){let t=this.parameters[e];return t&&(t.isScriptableNode&&(t=t.getDefaultOutput()),t.events.removeEventListener("refresh",this.onRefresh)),this}clearParameters(){for(const e of Object.keys(this.parameters))this.deleteParameter(e);return this.needsUpdate=!0,this}call(e,...t){const i=this.getObject()[e];if(typeof i=="function")return i(...t)}async callAsync(e,...t){const i=this.getObject()[e];if(typeof i=="function")return i.constructor.name==="AsyncFunction"?await i(...t):i(...t)}getNodeType(e){return this.getDefaultOutputNode().getNodeType(e)}refresh(e=null){e!==null?this.getOutput(e).refresh():this._refresh()}getObject(){if(this.needsUpdate&&this.dispose(),this._object!==null)return this._object;const e=()=>this.refresh(),t=(l,u)=>this.setOutput(l,u),n=new HL(this),i=Fu.get("THREE"),r=Fu.get("TSL"),o=this.getMethod(),a=[n,this._local,Fu,e,t,i,r];this._object=o(...a);const c=this._object.layout;if(c&&(c.cache===!1&&this._local.clear(),this._output.outputType=c.outputType||null,Array.isArray(c.elements)))for(const l of c.elements){const u=l.id||l.name;l.inputType&&(this.getParameter(u)===void 0&&this.setParameter(u,null),this.getParameter(u).inputType=l.inputType),l.outputType&&(this.getOutput(u)===void 0&&this.setOutput(u,null),this.getOutput(u).outputType=l.outputType)}return this._object}deserialize(e){super.deserialize(e);for(const t in this.parameters){let n=this.parameters[t];n.isScriptableNode&&(n=n.getDefaultOutput()),n.events.addEventListener("refresh",this.onRefresh)}}getLayout(){return this.getObject().layout}getDefaultOutputNode(){const e=this.getDefaultOutput().value;return e&&e.isNode?e:A()}getDefaultOutput(){return this._exec()._output}getMethod(){if(this.needsUpdate&&this.dispose(),this._method!==null)return this._method;const e=["parameters","local","global","refresh","setOutput","THREE","TSL"],n=["layout","init","main","dispose"].join(", "),i="var "+n+`; var output = {};
`,r=`
return { ...output, `+n+" };",o=i+this.codeNode.code+r;return this._method=new Function(...e,o),this._method}dispose(){this._method!==null&&(this._object&&typeof this._object.dispose=="function"&&this._object.dispose(),this._method=null,this._object=null,this._source=null,this._value=null,this._needsOutputUpdate=!0,this._output.value=null,this._outputs={})}setup(){return this.getDefaultOutputNode()}getCacheKey(e){const t=[Yx(this.source),this.getDefaultOutputNode().getCacheKey(e)];for(const n in this.parameters)t.push(this.parameters[n].getCacheKey(e));return mh(t)}set needsUpdate(e){e===!0&&this.dispose()}get needsUpdate(){return this.source!==this._source}_exec(){return this.codeNode===null?this:(this._needsOutputUpdate===!0&&(this._value=this.call("main"),this._needsOutputUpdate=!1),this._output.value=this._value,this)}_refresh(){this.needsUpdate=!0,this._exec(),this._output.refresh()}}const $L=j(WL);function HT(s){let e;const t=s.context.getViewZ;return t!==void 0&&(e=t(this)),(e||on.z).negate()}const _m=z(([s,e],t)=>{const n=HT(t);return Ks(s,e,n)}),xm=z(([s],e)=>{const t=HT(e);return s.mul(s,t,t).negate().exp().oneMinus()}),dl=z(([s,e])=>Ue(e.toFloat().mix(ll.rgb,s.toVec3()),ll.a));function XL(s,e,t){return console.warn('THREE.TSL: "rangeFog( color, near, far )" is deprecated. Use "fog( color, rangeFogFactor( near, far ) )" instead.'),dl(s,_m(e,t))}function qL(s,e){return console.warn('THREE.TSL: "densityFog( color, density )" is deprecated. Use "fog( color, densityFogFactor( density ) )" instead.'),dl(s,xm(e))}let Hr=null,Wr=null;class YL extends Ve{static get type(){return"RangeNode"}constructor(e=A(),t=A()){super(),this.minNode=e,this.maxNode=t}getVectorLength(e){const t=e.getTypeLength(xr(this.minNode.value)),n=e.getTypeLength(xr(this.maxNode.value));return t>n?t:n}getNodeType(e){return e.object.count>1?e.getTypeFromLength(this.getVectorLength(e)):"float"}setup(e){const t=e.object;let n=null;if(t.count>1){const i=this.minNode.value,r=this.maxNode.value,o=e.getTypeLength(xr(i)),a=e.getTypeLength(xr(r));Hr=Hr||new je,Wr=Wr||new je,Hr.setScalar(0),Wr.setScalar(0),o===1?Hr.setScalar(i):i.isColor?Hr.set(i.r,i.g,i.b,1):Hr.set(i.x,i.y,i.z||0,i.w||0),a===1?Wr.setScalar(r):r.isColor?Wr.set(r.r,r.g,r.b,1):Wr.set(r.x,r.y,r.z||0,r.w||0);const c=4,l=c*t.count,u=new Float32Array(l);for(let d=0;d<l;d++){const f=d%c,m=Hr.getComponent(f),_=Wr.getComponent(f);u[d]=ap.lerp(m,_,Math.random())}const h=this.getNodeType(e);if(t.count<=4096)n=Pl(u,"vec4",t.count).element(Il).convert(h);else{const d=new pp(u,4);e.geometry.setAttribute("__range"+this.id,d),n=ju(d).convert(h)}}else n=A(0);return n}}const jL=j(YL);class KL extends Ve{static get type(){return"ComputeBuiltinNode"}constructor(e,t){super(t),this._builtinName=e}getHash(e){return this.getBuiltinName(e)}getNodeType(){return this.nodeType}setBuiltinName(e){return this._builtinName=e,this}getBuiltinName(){return this._builtinName}hasBuiltin(e){e.hasBuiltin(this._builtinName)}generate(e,t){const n=this.getBuiltinName(e),i=this.getNodeType(e);return e.shaderStage==="compute"?e.format(n,i,t):(console.warn(`ComputeBuiltinNode: Compute built-in value ${n} can not be accessed in the ${e.shaderStage} stage`),e.generateConst(i))}serialize(e){super.serialize(e),e.global=this.global,e._builtinName=this._builtinName}deserialize(e){super.deserialize(e),this.global=e.global,this._builtinName=e._builtinName}}const Bh=(s,e)=>J(new KL(s,e)),ZL=Bh("numWorkgroups","uvec3"),QL=Bh("workgroupId","uvec3"),JL=Bh("localId","uvec3"),eU=Bh("subgroupSize","uint");class tU extends Ve{constructor(e){super(),this.scope=e}generate(e){const{scope:t}=this,{renderer:n}=e;n.backend.isWebGLBackend===!0?e.addFlowCode(`	// ${t}Barrier 
`):e.addLineFlowCode(`${t}Barrier()`,this)}}const ym=j(tU),nU=()=>ym("workgroup").append(),iU=()=>ym("storage").append(),sU=()=>ym("texture").append();class rU extends Ro{constructor(e,t){super(e,t),this.isWorkgroupInfoElementNode=!0}generate(e,t){let n;const i=e.context.assign;if(n=super.generate(e),i!==!0){const r=this.getNodeType(e);n=e.format(n,r,t)}return n}}class oU extends Ve{constructor(e,t,n=0){super(t),this.bufferType=t,this.bufferCount=n,this.isWorkgroupInfoNode=!0,this.elementType=t,this.scope=e}label(e){return this.name=e,this}setScope(e){return this.scope=e,this}getElementType(){return this.elementType}getInputType(){return`${this.scope}Array`}element(e){return J(new rU(this,e))}generate(e){return e.getScopedArray(this.name||`${this.scope}Array_${this.id}`,this.scope.toLowerCase(),this.bufferType,this.bufferCount)}}const aU=(s,e)=>J(new oU("Workgroup",s,e));class An extends ln{static get type(){return"AtomicFunctionNode"}constructor(e,t,n,i=null){super("uint"),this.method=e,this.pointerNode=t,this.valueNode=n,this.storeNode=i}getInputType(e){return this.pointerNode.getNodeType(e)}getNodeType(e){return this.getInputType(e)}generate(e){const t=this.method,n=this.getNodeType(e),i=this.getInputType(e),r=this.pointerNode,o=this.valueNode,a=[];a.push(`&${r.build(e,i)}`),a.push(o.build(e,i));const c=`${e.getMethod(t,n)}( ${a.join(", ")} )`;if(this.storeNode!==null){const l=this.storeNode.build(e,i);e.addLineFlowCode(`${l} = ${c}`,this)}else e.addLineFlowCode(c,this)}}An.ATOMIC_LOAD="atomicLoad";An.ATOMIC_STORE="atomicStore";An.ATOMIC_ADD="atomicAdd";An.ATOMIC_SUB="atomicSub";An.ATOMIC_MAX="atomicMax";An.ATOMIC_MIN="atomicMin";An.ATOMIC_AND="atomicAnd";An.ATOMIC_OR="atomicOr";An.ATOMIC_XOR="atomicXor";const cU=j(An),er=(s,e,t,n=null)=>{const i=cU(s,e,t,n);return i.append(),i},lU=(s,e,t=null)=>er(An.ATOMIC_STORE,s,e,t),uU=(s,e,t=null)=>er(An.ATOMIC_ADD,s,e,t),hU=(s,e,t=null)=>er(An.ATOMIC_SUB,s,e,t),dU=(s,e,t=null)=>er(An.ATOMIC_MAX,s,e,t),fU=(s,e,t=null)=>er(An.ATOMIC_MIN,s,e,t),pU=(s,e,t=null)=>er(An.ATOMIC_AND,s,e,t),mU=(s,e,t=null)=>er(An.ATOMIC_OR,s,e,t),gU=(s,e,t=null)=>er(An.ATOMIC_XOR,s,e,t);let _u;function Bl(s){_u=_u||new WeakMap;let e=_u.get(s);return e===void 0&&_u.set(s,e={}),e}function vm(s){const e=Bl(s);return e.shadowMatrix||(e.shadowMatrix=Ie("mat4").setGroup(ke).onRenderUpdate(()=>(s.castShadow!==!0&&s.shadow.updateMatrices(s),s.shadow.matrix)))}function WT(s){const e=Bl(s);if(e.projectionUV===void 0){const t=vm(s).mul(Xs);e.projectionUV=t.xyz.div(t.w)}return e.projectionUV}function Tm(s){const e=Bl(s);return e.position||(e.position=Ie(new U).setGroup(ke).onRenderUpdate((t,n)=>n.value.setFromMatrixPosition(s.matrixWorld)))}function $T(s){const e=Bl(s);return e.targetPosition||(e.targetPosition=Ie(new U).setGroup(ke).onRenderUpdate((t,n)=>n.value.setFromMatrixPosition(s.target.matrixWorld)))}function Oh(s){const e=Bl(s);return e.viewPosition||(e.viewPosition=Ie(new U).setGroup(ke).onRenderUpdate(({camera:t},n)=>{n.value=n.value||new U,n.value.setFromMatrixPosition(s.matrixWorld),n.value.applyMatrix4(t.matrixWorldInverse)}))}const Sm=s=>ui.transformDirection(Tm(s).sub($T(s))),_U=s=>s.sort((e,t)=>e.id-t.id),xU=(s,e)=>{for(const t of e)if(t.isAnalyticLightNode&&t.light.id===s)return t;return null},Ud=new WeakMap;class bm extends Ve{static get type(){return"LightsNode"}constructor(){super("vec3"),this.totalDiffuseNode=I().toVar("totalDiffuse"),this.totalSpecularNode=I().toVar("totalSpecular"),this.outgoingLightNode=I().toVar("outgoingLight"),this._lights=[],this._lightNodes=null,this._lightNodesHash=null,this.global=!0}customCacheKey(){const e=[],t=this._lights;for(let n=0;n<t.length;n++)e.push(t[n].id);return mh(e)}getHash(e){if(this._lightNodesHash===null){this._lightNodes===null&&this.setupLightsNode(e);const t=[];for(const n of this._lightNodes)t.push(n.getSelf().getHash());this._lightNodesHash="lights-"+t.join(",")}return this._lightNodesHash}analyze(e){const t=e.getDataFromNode(this);for(const n of t.nodes)n.build(e)}setupLightsNode(e){const t=[],n=this._lightNodes,i=_U(this._lights),r=e.renderer.library;for(const o of i)if(o.isNode)t.push(J(o));else{let a=null;if(n!==null&&(a=xU(o.id,n)),a===null){const c=r.getLightNodeClass(o.constructor);if(c===null){console.warn(`LightsNode.setupNodeLights: Light node not found for ${o.constructor.name}`);continue}let l=null;Ud.has(o)?l=Ud.get(o):(l=J(new c(o)),Ud.set(o,l)),t.push(l)}}this._lightNodes=t}setupLights(e,t){for(const n of t)n.build(e)}setup(e){this._lightNodes===null&&this.setupLightsNode(e);const t=e.context,n=t.lightingModel;let i=this.outgoingLightNode;if(n){const{_lightNodes:r,totalDiffuseNode:o,totalSpecularNode:a}=this;t.outgoingLight=i;const c=e.addStack(),l=e.getDataFromNode(this);l.nodes=c.nodes,n.start(t,c,e),this.setupLights(e,r),n.indirect(t,c,e);const{backdrop:u,backdropAlpha:h}=t,{directDiffuse:d,directSpecular:f,indirectDiffuse:m,indirectSpecular:_}=t.reflectedLight;let g=d.add(m);u!==null&&(h!==null?g=I(h.mix(g,u)):g=I(u),t.material.transparent=!0),o.assign(g),a.assign(f.add(_)),i.assign(o.add(a)),n.finish(t,c,e),i=i.bypass(e.removeStack())}return i}setLights(e){return this._lights=e,this._lightNodes=null,this._lightNodesHash=null,this}getLights(){return this._lights}get hasLights(){return this._lights.length>0}}const yU=(s=[])=>J(new bm).setLights(s);class vU extends Ve{static get type(){return"ShadowBaseNode"}constructor(e){super(),this.light=e,this.updateBeforeType=Ye.RENDER,this.isShadowBaseNode=!0}setupShadowPosition({material:e}){Mm.assign(e.shadowPositionNode||Xs)}dispose(){this.updateBeforeType=Ye.NONE}}const Mm=I().toVar("shadowPositionWorld");function TU(s,e={}){return e.toneMapping=s.toneMapping,e.toneMappingExposure=s.toneMappingExposure,e.outputColorSpace=s.outputColorSpace,e.renderTarget=s.getRenderTarget(),e.activeCubeFace=s.getActiveCubeFace(),e.activeMipmapLevel=s.getActiveMipmapLevel(),e.renderObjectFunction=s.getRenderObjectFunction(),e.pixelRatio=s.getPixelRatio(),e.mrt=s.getMRT(),e.clearColor=s.getClearColor(e.clearColor||new De),e.clearAlpha=s.getClearAlpha(),e.autoClear=s.autoClear,e.scissorTest=s.getScissorTest(),e}function SU(s,e){return e=TU(s,e),s.setMRT(null),s.setRenderObjectFunction(null),s.setClearColor(0,1),s.autoClear=!0,e}function bU(s,e){s.toneMapping=e.toneMapping,s.toneMappingExposure=e.toneMappingExposure,s.outputColorSpace=e.outputColorSpace,s.setRenderTarget(e.renderTarget,e.activeCubeFace,e.activeMipmapLevel),s.setRenderObjectFunction(e.renderObjectFunction),s.setPixelRatio(e.pixelRatio),s.setMRT(e.mrt),s.setClearColor(e.clearColor,e.clearAlpha),s.autoClear=e.autoClear,s.setScissorTest(e.scissorTest)}function MU(s,e={}){return e.background=s.background,e.backgroundNode=s.backgroundNode,e.overrideMaterial=s.overrideMaterial,e}function EU(s,e){return e=MU(s,e),s.background=null,s.backgroundNode=null,s.overrideMaterial=null,e}function AU(s,e){s.background=e.background,s.backgroundNode=e.backgroundNode,s.overrideMaterial=e.overrideMaterial}function RU(s,e,t){return t=SU(s,t),t=EU(e,t),t}function wU(s,e,t){bU(s,t),AU(e,t)}const S_=new WeakMap,NU=z(([s,e,t])=>{let n=Xs.sub(s).length();return n=n.sub(e).div(t.sub(e)),n=n.saturate(),n}),CU=s=>{const e=s.shadow.camera,t=Ct("near","float",e).setGroup(ke),n=Ct("far","float",e).setGroup(ke),i=Gv(s);return NU(i,t,n)},PU=s=>{let e=S_.get(s);if(e===void 0){const t=s.isPointLight?CU(s):null;e=new tn,e.colorNode=Ue(0,0,0,1),e.depthNode=t,e.isShadowNodeMaterial=!0,e.name="ShadowMaterial",e.fog=!1,S_.set(s,e)}return e},XT=z(({depthTexture:s,shadowCoord:e})=>ht(s,e.xy).compare(e.z)),qT=z(({depthTexture:s,shadowCoord:e,shadow:t})=>{const n=(_,g)=>ht(s,_).compare(g),i=Ct("mapSize","vec2",t).setGroup(ke),r=Ct("radius","float",t).setGroup(ke),o=se(1).div(i),a=o.x.negate().mul(r),c=o.y.negate().mul(r),l=o.x.mul(r),u=o.y.mul(r),h=a.div(2),d=c.div(2),f=l.div(2),m=u.div(2);return cn(n(e.xy.add(se(a,c)),e.z),n(e.xy.add(se(0,c)),e.z),n(e.xy.add(se(l,c)),e.z),n(e.xy.add(se(h,d)),e.z),n(e.xy.add(se(0,d)),e.z),n(e.xy.add(se(f,d)),e.z),n(e.xy.add(se(a,0)),e.z),n(e.xy.add(se(h,0)),e.z),n(e.xy,e.z),n(e.xy.add(se(f,0)),e.z),n(e.xy.add(se(l,0)),e.z),n(e.xy.add(se(h,m)),e.z),n(e.xy.add(se(0,m)),e.z),n(e.xy.add(se(f,m)),e.z),n(e.xy.add(se(a,u)),e.z),n(e.xy.add(se(0,u)),e.z),n(e.xy.add(se(l,u)),e.z)).mul(1/17)}),YT=z(({depthTexture:s,shadowCoord:e,shadow:t})=>{const n=(u,h)=>ht(s,u).compare(h),i=Ct("mapSize","vec2",t).setGroup(ke),r=se(1).div(i),o=r.x,a=r.y,c=e.xy,l=Js(c.mul(i).add(.5));return c.subAssign(l.mul(r)),cn(n(c,e.z),n(c.add(se(o,0)),e.z),n(c.add(se(0,a)),e.z),n(c.add(r),e.z),Mt(n(c.add(se(o.negate(),0)),e.z),n(c.add(se(o.mul(2),0)),e.z),l.x),Mt(n(c.add(se(o.negate(),a)),e.z),n(c.add(se(o.mul(2),a)),e.z),l.x),Mt(n(c.add(se(0,a.negate())),e.z),n(c.add(se(0,a.mul(2))),e.z),l.y),Mt(n(c.add(se(o,a.negate())),e.z),n(c.add(se(o,a.mul(2))),e.z),l.y),Mt(Mt(n(c.add(se(o.negate(),a.negate())),e.z),n(c.add(se(o.mul(2),a.negate())),e.z),l.x),Mt(n(c.add(se(o.negate(),a.mul(2))),e.z),n(c.add(se(o.mul(2),a.mul(2))),e.z),l.x),l.y)).mul(1/9)}),jT=z(({depthTexture:s,shadowCoord:e})=>{const t=A(1).toVar(),n=ht(s).sample(e.xy).rg,i=bh(e.z,n.x);return it(i.notEqual(A(1)),()=>{const r=e.z.sub(n.x),o=en(0,n.y.mul(n.y));let a=o.div(o.add(r.mul(r)));a=xs(pt(a,.3).div(.95-.3)),t.assign(xs(en(i,a)))}),t}),DU=z(({samples:s,radius:e,size:t,shadowPass:n})=>{const i=A(0).toVar(),r=A(0).toVar(),o=s.lessThanEqual(A(1)).select(A(0),A(2).div(s.sub(1))),a=s.lessThanEqual(A(1)).select(A(0),A(-1));Et({start:C(0),end:C(s),type:"int",condition:"<"},({i:l})=>{const u=a.add(A(l).mul(o)),h=n.sample(cn(Fl.xy,se(0,u).mul(e)).div(t)).x;i.addAssign(h),r.addAssign(h.mul(h))}),i.divAssign(s),r.divAssign(s);const c=Es(r.sub(i.mul(i)));return se(i,c)}),LU=z(({samples:s,radius:e,size:t,shadowPass:n})=>{const i=A(0).toVar(),r=A(0).toVar(),o=s.lessThanEqual(A(1)).select(A(0),A(2).div(s.sub(1))),a=s.lessThanEqual(A(1)).select(A(0),A(-1));Et({start:C(0),end:C(s),type:"int",condition:"<"},({i:l})=>{const u=a.add(A(l).mul(o)),h=n.sample(cn(Fl.xy,se(u,0).mul(e)).div(t));i.addAssign(h.x),r.addAssign(cn(h.y.mul(h.y),h.x.mul(h.x)))}),i.divAssign(s),r.divAssign(s);const c=Es(r.sub(i.mul(i)));return se(i,c)}),UU=[XT,qT,YT,jT];let Id;const xu=new mm;class KT extends vU{static get type(){return"ShadowNode"}constructor(e,t=null){super(e),this.shadow=t||e.shadow,this.shadowMap=null,this.vsmShadowMapVertical=null,this.vsmShadowMapHorizontal=null,this.vsmMaterialVertical=null,this.vsmMaterialHorizontal=null,this._node=null,this.isShadowNode=!0}setupShadowFilter(e,{filterFn:t,depthTexture:n,shadowCoord:i,shadow:r}){const o=i.x.greaterThanEqual(0).and(i.x.lessThanEqual(1)).and(i.y.greaterThanEqual(0)).and(i.y.lessThanEqual(1)).and(i.z.lessThanEqual(1)),a=t({depthTexture:n,shadowCoord:i,shadow:r});return o.select(a,A(1))}setupShadowCoord(e,t){const{shadow:n}=this,{renderer:i}=e,r=Ct("bias","float",n).setGroup(ke);let o=t,a;if(n.camera.isOrthographicCamera||i.logarithmicDepthBuffer!==!0)o=o.xyz.div(o.w),a=o.z,i.coordinateSystem===_s&&(a=a.mul(2).sub(1));else{const c=o.w;o=o.xy.div(c);const l=Ct("near","float",n.camera).setGroup(ke),u=Ct("far","float",n.camera).setGroup(ke);a=rm(c.negate(),l,u)}return o=I(o.x,o.y.oneMinus(),a.add(r)),o}getShadowFilterFn(e){return UU[e]}setupShadow(e){const{renderer:t}=e,{light:n,shadow:i}=this,r=t.shadowMap.type,o=new Qs(i.mapSize.width,i.mapSize.height);o.compareFunction=ch;const a=e.createRenderTarget(i.mapSize.width,i.mapSize.height);if(a.depthTexture=o,i.camera.updateProjectionMatrix(),r===_i){o.compareFunction=null,this.vsmShadowMapVertical=e.createRenderTarget(i.mapSize.width,i.mapSize.height,{format:So,type:zn}),this.vsmShadowMapHorizontal=e.createRenderTarget(i.mapSize.width,i.mapSize.height,{format:So,type:zn});const p=ht(o),T=ht(this.vsmShadowMapVertical.texture),S=Ct("blurSamples","float",i).setGroup(ke),v=Ct("radius","float",i).setGroup(ke),P=Ct("mapSize","vec2",i).setGroup(ke);let N=this.vsmMaterialVertical||(this.vsmMaterialVertical=new tn);N.fragmentNode=DU({samples:S,radius:v,size:P,shadowPass:p}).context(e.getSharedContext()),N.name="VSMVertical",N=this.vsmMaterialHorizontal||(this.vsmMaterialHorizontal=new tn),N.fragmentNode=LU({samples:S,radius:v,size:P,shadowPass:T}).context(e.getSharedContext()),N.name="VSMHorizontal"}const c=Ct("intensity","float",i).setGroup(ke),l=Ct("normalBias","float",i).setGroup(ke),u=vm(n).mul(Mm.add(Nh.mul(l))),h=this.setupShadowCoord(e,u),d=i.filterNode||this.getShadowFilterFn(t.shadowMap.type)||null;if(d===null)throw new Error("THREE.WebGPURenderer: Shadow map type not supported yet.");const f=r===_i?this.vsmShadowMapHorizontal.texture:o,m=this.setupShadowFilter(e,{filterFn:d,shadowTexture:a.texture,depthTexture:f,shadowCoord:h,shadow:i}),_=ht(a.texture,h),g=Mt(1,m.rgb.mix(_,1),c.mul(_.a)).toVar();return this.shadowMap=a,this.shadow.map=a,g}setup(e){if(e.renderer.shadowMap.enabled!==!1)return z(()=>{let t=this._node;return this.setupShadowPosition(e),t===null&&(this._node=t=this.setupShadow(e)),e.material.shadowNode&&console.warn('THREE.NodeMaterial: ".shadowNode" is deprecated. Use ".castShadowNode" instead.'),e.material.receivedShadowNode&&(t=e.material.receivedShadowNode(t)),t})()}renderShadow(e){const{shadow:t,shadowMap:n,light:i}=this,{renderer:r,scene:o}=e;t.updateMatrices(i),n.setSize(t.mapSize.width,t.mapSize.height),r.render(o,t.camera)}updateShadow(e){const{shadowMap:t,light:n,shadow:i}=this,{renderer:r,scene:o,camera:a}=e,c=r.shadowMap.type,l=t.depthTexture.version;this._depthVersionCached=l,i.camera.layers.mask=a.layers.mask;const u=r.getRenderObjectFunction(),h=r.getMRT(),d=h?h.has("velocity"):!1;Id=RU(r,o,Id),o.overrideMaterial=PU(n),r.setRenderObjectFunction((f,m,_,g,p,T,...S)=>{(f.castShadow===!0||f.receiveShadow&&c===_i)&&(d&&(ey(f).useVelocity=!0),f.onBeforeShadow(r,f,a,i.camera,g,m.overrideMaterial,T),r.renderObject(f,m,_,g,p,T,...S),f.onAfterShadow(r,f,a,i.camera,g,m.overrideMaterial,T))}),r.setRenderTarget(t),this.renderShadow(e),r.setRenderObjectFunction(u),n.isPointLight!==!0&&c===_i&&this.vsmPass(r),wU(r,o,Id)}vsmPass(e){const{shadow:t}=this;this.vsmShadowMapVertical.setSize(t.mapSize.width,t.mapSize.height),this.vsmShadowMapHorizontal.setSize(t.mapSize.width,t.mapSize.height),e.setRenderTarget(this.vsmShadowMapVertical),xu.material=this.vsmMaterialVertical,xu.render(e),e.setRenderTarget(this.vsmShadowMapHorizontal),xu.material=this.vsmMaterialHorizontal,xu.render(e)}dispose(){this.shadowMap.dispose(),this.shadowMap=null,this.vsmShadowMapVertical!==null&&(this.vsmShadowMapVertical.dispose(),this.vsmShadowMapVertical=null,this.vsmMaterialVertical.dispose(),this.vsmMaterialVertical=null),this.vsmShadowMapHorizontal!==null&&(this.vsmShadowMapHorizontal.dispose(),this.vsmShadowMapHorizontal=null,this.vsmMaterialHorizontal.dispose(),this.vsmMaterialHorizontal=null),super.dispose()}updateBefore(e){const{shadow:t}=this;(t.needsUpdate||t.autoUpdate)&&(this.updateShadow(e),this.shadowMap.depthTexture.version===this._depthVersionCached&&(t.needsUpdate=!1))}}const ZT=(s,e)=>J(new KT(s,e));class Co extends ac{static get type(){return"AnalyticLightNode"}constructor(e=null){super(),this.light=e,this.color=new De,this.colorNode=e&&e.colorNode||Ie(this.color).setGroup(ke),this.baseColorNode=null,this.shadowNode=null,this.shadowColorNode=null,this.isAnalyticLightNode=!0,this.updateType=Ye.FRAME}customCacheKey(){return xp(this.light.id,this.light.castShadow?1:0)}getHash(){return this.light.uuid}setupShadowNode(){return ZT(this.light)}setupShadow(e){const{renderer:t}=e;if(t.shadowMap.enabled===!1)return;let n=this.shadowColorNode;if(n===null){const i=this.light.shadow.shadowNode;let r;i!==void 0?r=J(i):r=this.setupShadowNode(e),this.shadowNode=r,this.shadowColorNode=n=this.colorNode.mul(r),this.baseColorNode=this.colorNode}this.colorNode=n}setup(e){this.colorNode=this.baseColorNode||this.colorNode,this.light.castShadow?e.object.receiveShadow&&this.setupShadow(e):this.shadowNode!==null&&(this.shadowNode.dispose(),this.shadowNode=null,this.shadowColorNode=null)}update(){const{light:e}=this;this.color.copy(e.color).multiplyScalar(e.intensity)}}const Em=z(s=>{const{lightDistance:e,cutoffDistance:t,decayExponent:n}=s,i=e.pow(n).max(.01).reciprocal();return t.greaterThan(0).select(i.mul(e.div(t).pow4().oneMinus().clamp().pow2()),i)}),IU=new De,ts=z(([s,e])=>{const t=s.toVar(),n=Ft(t),i=Zi(1,en(n.x,en(n.y,n.z)));n.mulAssign(i),t.mulAssign(i.mul(e.mul(2).oneMinus()));const r=se(t.xy).toVar(),a=e.mul(1.5).oneMinus();return it(n.z.greaterThanEqual(a),()=>{it(t.z.greaterThan(0),()=>{r.x.assign(pt(4,t.x))})}).ElseIf(n.x.greaterThanEqual(a),()=>{const c=ul(t.x);r.x.assign(t.z.mul(c).add(c.mul(2)))}).ElseIf(n.y.greaterThanEqual(a),()=>{const c=ul(t.y);r.x.assign(t.x.add(c.mul(2)).add(2)),r.y.assign(t.z.mul(c).sub(2))}),se(.125,.25).mul(r).add(se(.375,.75)).flipY()}).setLayout({name:"cubeToUV",type:"vec2",inputs:[{name:"pos",type:"vec3"},{name:"texelSizeY",type:"float"}]}),FU=z(({depthTexture:s,bd3D:e,dp:t,texelSize:n})=>ht(s,ts(e,n.y)).compare(t)),BU=z(({depthTexture:s,bd3D:e,dp:t,texelSize:n,shadow:i})=>{const r=Ct("radius","float",i).setGroup(ke),o=se(-1,1).mul(r).mul(n.y);return ht(s,ts(e.add(o.xyy),n.y)).compare(t).add(ht(s,ts(e.add(o.yyy),n.y)).compare(t)).add(ht(s,ts(e.add(o.xyx),n.y)).compare(t)).add(ht(s,ts(e.add(o.yyx),n.y)).compare(t)).add(ht(s,ts(e,n.y)).compare(t)).add(ht(s,ts(e.add(o.xxy),n.y)).compare(t)).add(ht(s,ts(e.add(o.yxy),n.y)).compare(t)).add(ht(s,ts(e.add(o.xxx),n.y)).compare(t)).add(ht(s,ts(e.add(o.yxx),n.y)).compare(t)).mul(1/9)}),OU=z(({filterFn:s,depthTexture:e,shadowCoord:t,shadow:n})=>{const i=t.xyz.toVar(),r=i.length(),o=Ie("float").setGroup(ke).onRenderUpdate(()=>n.camera.near),a=Ie("float").setGroup(ke).onRenderUpdate(()=>n.camera.far),c=Ct("bias","float",n).setGroup(ke),l=Ie(n.mapSize).setGroup(ke),u=A(1).toVar();return it(r.sub(a).lessThanEqual(0).and(r.sub(o).greaterThanEqual(0)),()=>{const h=r.sub(o).div(a.sub(o)).toVar();h.addAssign(c);const d=i.normalize(),f=se(1).div(l.mul(se(4,2)));u.assign(s({depthTexture:e,bd3D:d,dp:h,texelSize:f,shadow:n}))}),u}),b_=new je,jo=new Ee,Sc=new Ee;class VU extends KT{static get type(){return"PointShadowNode"}constructor(e,t=null){super(e,t)}getShadowFilterFn(e){return e===tb?FU:BU}setupShadowCoord(e,t){return t}setupShadowFilter(e,{filterFn:t,shadowTexture:n,depthTexture:i,shadowCoord:r,shadow:o}){return OU({filterFn:t,shadowTexture:n,depthTexture:i,shadowCoord:r,shadow:o})}renderShadow(e){const{shadow:t,shadowMap:n,light:i}=this,{renderer:r,scene:o}=e,a=t.getFrameExtents();Sc.copy(t.mapSize),Sc.multiply(a),n.setSize(Sc.width,Sc.height),jo.copy(t.mapSize);const c=r.autoClear,l=r.getClearColor(IU),u=r.getClearAlpha();r.autoClear=!1,r.setClearColor(t.clearColor,t.clearAlpha),r.clear();const h=t.getViewportCount();for(let d=0;d<h;d++){const f=t.getViewport(d),m=jo.x*f.x,_=Sc.y-jo.y-jo.y*f.y;b_.set(m,_,jo.x*f.z,jo.y*f.w),n.viewport.copy(b_),t.updateMatrices(i,d),r.render(o,t.camera)}r.autoClear=c,r.setClearColor(l,u)}}const GU=(s,e)=>J(new VU(s,e)),QT=z(({color:s,lightViewPosition:e,cutoffDistance:t,decayExponent:n},i)=>{const r=i.context.lightingModel,o=e.sub(on),a=o.normalize(),c=o.length(),l=Em({lightDistance:c,cutoffDistance:t,decayExponent:n}),u=s.mul(l),h=i.context.reflectedLight;r.direct({lightDirection:a,lightColor:u,reflectedLight:h},i.stack,i)});class zU extends Co{static get type(){return"PointLightNode"}constructor(e=null){super(e),this.cutoffDistanceNode=Ie(0).setGroup(ke),this.decayExponentNode=Ie(2).setGroup(ke)}update(e){const{light:t}=this;super.update(e),this.cutoffDistanceNode.value=t.distance,this.decayExponentNode.value=t.decay}setupShadowNode(){return GU(this.light)}setup(e){super.setup(e),QT({color:this.colorNode,lightViewPosition:Oh(this.light),cutoffDistance:this.cutoffDistanceNode,decayExponent:this.decayExponentNode}).append()}}const kU=z(([s=Xt()])=>{const e=s.mul(2),t=e.x.floor(),n=e.y.floor();return t.add(n).mod(2).sign()}),Fc=z(([s,e,t])=>{const n=A(t).toVar(),i=A(e).toVar(),r=Ys(s).toVar();return Cn(r,i,n)}).setLayout({name:"mx_select",type:"float",inputs:[{name:"b",type:"bool"},{name:"t",type:"float"},{name:"f",type:"float"}]}),eh=z(([s,e])=>{const t=Ys(e).toVar(),n=A(s).toVar();return Cn(t,n.negate(),n)}).setLayout({name:"mx_negate_if",type:"float",inputs:[{name:"val",type:"float"},{name:"b",type:"bool"}]}),an=z(([s])=>{const e=A(s).toVar();return C(fs(e))}).setLayout({name:"mx_floor",type:"int",inputs:[{name:"x",type:"float"}]}),kt=z(([s,e])=>{const t=A(s).toVar();return e.assign(an(t)),t.sub(A(e))}),HU=z(([s,e,t,n,i,r])=>{const o=A(r).toVar(),a=A(i).toVar(),c=A(n).toVar(),l=A(t).toVar(),u=A(e).toVar(),h=A(s).toVar(),d=A(pt(1,a)).toVar();return pt(1,o).mul(h.mul(d).add(u.mul(a))).add(o.mul(l.mul(d).add(c.mul(a))))}).setLayout({name:"mx_bilerp_0",type:"float",inputs:[{name:"v0",type:"float"},{name:"v1",type:"float"},{name:"v2",type:"float"},{name:"v3",type:"float"},{name:"s",type:"float"},{name:"t",type:"float"}]}),WU=z(([s,e,t,n,i,r])=>{const o=A(r).toVar(),a=A(i).toVar(),c=I(n).toVar(),l=I(t).toVar(),u=I(e).toVar(),h=I(s).toVar(),d=A(pt(1,a)).toVar();return pt(1,o).mul(h.mul(d).add(u.mul(a))).add(o.mul(l.mul(d).add(c.mul(a))))}).setLayout({name:"mx_bilerp_1",type:"vec3",inputs:[{name:"v0",type:"vec3"},{name:"v1",type:"vec3"},{name:"v2",type:"vec3"},{name:"v3",type:"vec3"},{name:"s",type:"float"},{name:"t",type:"float"}]}),JT=Dn([HU,WU]),$U=z(([s,e,t,n,i,r,o,a,c,l,u])=>{const h=A(u).toVar(),d=A(l).toVar(),f=A(c).toVar(),m=A(a).toVar(),_=A(o).toVar(),g=A(r).toVar(),p=A(i).toVar(),T=A(n).toVar(),S=A(t).toVar(),v=A(e).toVar(),P=A(s).toVar(),N=A(pt(1,f)).toVar(),w=A(pt(1,d)).toVar();return A(pt(1,h)).toVar().mul(w.mul(P.mul(N).add(v.mul(f))).add(d.mul(S.mul(N).add(T.mul(f))))).add(h.mul(w.mul(p.mul(N).add(g.mul(f))).add(d.mul(_.mul(N).add(m.mul(f))))))}).setLayout({name:"mx_trilerp_0",type:"float",inputs:[{name:"v0",type:"float"},{name:"v1",type:"float"},{name:"v2",type:"float"},{name:"v3",type:"float"},{name:"v4",type:"float"},{name:"v5",type:"float"},{name:"v6",type:"float"},{name:"v7",type:"float"},{name:"s",type:"float"},{name:"t",type:"float"},{name:"r",type:"float"}]}),XU=z(([s,e,t,n,i,r,o,a,c,l,u])=>{const h=A(u).toVar(),d=A(l).toVar(),f=A(c).toVar(),m=I(a).toVar(),_=I(o).toVar(),g=I(r).toVar(),p=I(i).toVar(),T=I(n).toVar(),S=I(t).toVar(),v=I(e).toVar(),P=I(s).toVar(),N=A(pt(1,f)).toVar(),w=A(pt(1,d)).toVar();return A(pt(1,h)).toVar().mul(w.mul(P.mul(N).add(v.mul(f))).add(d.mul(S.mul(N).add(T.mul(f))))).add(h.mul(w.mul(p.mul(N).add(g.mul(f))).add(d.mul(_.mul(N).add(m.mul(f))))))}).setLayout({name:"mx_trilerp_1",type:"vec3",inputs:[{name:"v0",type:"vec3"},{name:"v1",type:"vec3"},{name:"v2",type:"vec3"},{name:"v3",type:"vec3"},{name:"v4",type:"vec3"},{name:"v5",type:"vec3"},{name:"v6",type:"vec3"},{name:"v7",type:"vec3"},{name:"s",type:"float"},{name:"t",type:"float"},{name:"r",type:"float"}]}),eS=Dn([$U,XU]),qU=z(([s,e,t])=>{const n=A(t).toVar(),i=A(e).toVar(),r=me(s).toVar(),o=me(r.bitAnd(me(7))).toVar(),a=A(Fc(o.lessThan(me(4)),i,n)).toVar(),c=A(Ke(2,Fc(o.lessThan(me(4)),n,i))).toVar();return eh(a,Ys(o.bitAnd(me(1)))).add(eh(c,Ys(o.bitAnd(me(2)))))}).setLayout({name:"mx_gradient_float_0",type:"float",inputs:[{name:"hash",type:"uint"},{name:"x",type:"float"},{name:"y",type:"float"}]}),YU=z(([s,e,t,n])=>{const i=A(n).toVar(),r=A(t).toVar(),o=A(e).toVar(),a=me(s).toVar(),c=me(a.bitAnd(me(15))).toVar(),l=A(Fc(c.lessThan(me(8)),o,r)).toVar(),u=A(Fc(c.lessThan(me(4)),r,Fc(c.equal(me(12)).or(c.equal(me(14))),o,i))).toVar();return eh(l,Ys(c.bitAnd(me(1)))).add(eh(u,Ys(c.bitAnd(me(2)))))}).setLayout({name:"mx_gradient_float_1",type:"float",inputs:[{name:"hash",type:"uint"},{name:"x",type:"float"},{name:"y",type:"float"},{name:"z",type:"float"}]}),bn=Dn([qU,YU]),jU=z(([s,e,t])=>{const n=A(t).toVar(),i=A(e).toVar(),r=rc(s).toVar();return I(bn(r.x,i,n),bn(r.y,i,n),bn(r.z,i,n))}).setLayout({name:"mx_gradient_vec3_0",type:"vec3",inputs:[{name:"hash",type:"uvec3"},{name:"x",type:"float"},{name:"y",type:"float"}]}),KU=z(([s,e,t,n])=>{const i=A(n).toVar(),r=A(t).toVar(),o=A(e).toVar(),a=rc(s).toVar();return I(bn(a.x,o,r,i),bn(a.y,o,r,i),bn(a.z,o,r,i))}).setLayout({name:"mx_gradient_vec3_1",type:"vec3",inputs:[{name:"hash",type:"uvec3"},{name:"x",type:"float"},{name:"y",type:"float"},{name:"z",type:"float"}]}),Ni=Dn([jU,KU]),ZU=z(([s])=>{const e=A(s).toVar();return Ke(.6616,e)}).setLayout({name:"mx_gradient_scale2d_0",type:"float",inputs:[{name:"v",type:"float"}]}),QU=z(([s])=>{const e=A(s).toVar();return Ke(.982,e)}).setLayout({name:"mx_gradient_scale3d_0",type:"float",inputs:[{name:"v",type:"float"}]}),JU=z(([s])=>{const e=I(s).toVar();return Ke(.6616,e)}).setLayout({name:"mx_gradient_scale2d_1",type:"vec3",inputs:[{name:"v",type:"vec3"}]}),tS=Dn([ZU,JU]),eI=z(([s])=>{const e=I(s).toVar();return Ke(.982,e)}).setLayout({name:"mx_gradient_scale3d_1",type:"vec3",inputs:[{name:"v",type:"vec3"}]}),nS=Dn([QU,eI]),xi=z(([s,e])=>{const t=C(e).toVar(),n=me(s).toVar();return n.shiftLeft(t).bitOr(n.shiftRight(C(32).sub(t)))}).setLayout({name:"mx_rotl32",type:"uint",inputs:[{name:"x",type:"uint"},{name:"k",type:"int"}]}),iS=z(([s,e,t])=>{s.subAssign(t),s.bitXorAssign(xi(t,C(4))),t.addAssign(e),e.subAssign(s),e.bitXorAssign(xi(s,C(6))),s.addAssign(t),t.subAssign(e),t.bitXorAssign(xi(e,C(8))),e.addAssign(s),s.subAssign(t),s.bitXorAssign(xi(t,C(16))),t.addAssign(e),e.subAssign(s),e.bitXorAssign(xi(s,C(19))),s.addAssign(t),t.subAssign(e),t.bitXorAssign(xi(e,C(4))),e.addAssign(s)}),Ol=z(([s,e,t])=>{const n=me(t).toVar(),i=me(e).toVar(),r=me(s).toVar();return n.bitXorAssign(i),n.subAssign(xi(i,C(14))),r.bitXorAssign(n),r.subAssign(xi(n,C(11))),i.bitXorAssign(r),i.subAssign(xi(r,C(25))),n.bitXorAssign(i),n.subAssign(xi(i,C(16))),r.bitXorAssign(n),r.subAssign(xi(n,C(4))),i.bitXorAssign(r),i.subAssign(xi(r,C(14))),n.bitXorAssign(i),n.subAssign(xi(i,C(24))),n}).setLayout({name:"mx_bjfinal",type:"uint",inputs:[{name:"a",type:"uint"},{name:"b",type:"uint"},{name:"c",type:"uint"}]}),kn=z(([s])=>{const e=me(s).toVar();return A(e).div(A(me(C(4294967295))))}).setLayout({name:"mx_bits_to_01",type:"float",inputs:[{name:"bits",type:"uint"}]}),ps=z(([s])=>{const e=A(s).toVar();return e.mul(e).mul(e).mul(e.mul(e.mul(6).sub(15)).add(10))}).setLayout({name:"mx_fade",type:"float",inputs:[{name:"t",type:"float"}]}),tI=z(([s])=>{const e=C(s).toVar(),t=me(me(1)).toVar(),n=me(me(C(3735928559)).add(t.shiftLeft(me(2))).add(me(13))).toVar();return Ol(n.add(me(e)),n,n)}).setLayout({name:"mx_hash_int_0",type:"uint",inputs:[{name:"x",type:"int"}]}),nI=z(([s,e])=>{const t=C(e).toVar(),n=C(s).toVar(),i=me(me(2)).toVar(),r=me().toVar(),o=me().toVar(),a=me().toVar();return r.assign(o.assign(a.assign(me(C(3735928559)).add(i.shiftLeft(me(2))).add(me(13))))),r.addAssign(me(n)),o.addAssign(me(t)),Ol(r,o,a)}).setLayout({name:"mx_hash_int_1",type:"uint",inputs:[{name:"x",type:"int"},{name:"y",type:"int"}]}),iI=z(([s,e,t])=>{const n=C(t).toVar(),i=C(e).toVar(),r=C(s).toVar(),o=me(me(3)).toVar(),a=me().toVar(),c=me().toVar(),l=me().toVar();return a.assign(c.assign(l.assign(me(C(3735928559)).add(o.shiftLeft(me(2))).add(me(13))))),a.addAssign(me(r)),c.addAssign(me(i)),l.addAssign(me(n)),Ol(a,c,l)}).setLayout({name:"mx_hash_int_2",type:"uint",inputs:[{name:"x",type:"int"},{name:"y",type:"int"},{name:"z",type:"int"}]}),sI=z(([s,e,t,n])=>{const i=C(n).toVar(),r=C(t).toVar(),o=C(e).toVar(),a=C(s).toVar(),c=me(me(4)).toVar(),l=me().toVar(),u=me().toVar(),h=me().toVar();return l.assign(u.assign(h.assign(me(C(3735928559)).add(c.shiftLeft(me(2))).add(me(13))))),l.addAssign(me(a)),u.addAssign(me(o)),h.addAssign(me(r)),iS(l,u,h),l.addAssign(me(i)),Ol(l,u,h)}).setLayout({name:"mx_hash_int_3",type:"uint",inputs:[{name:"x",type:"int"},{name:"y",type:"int"},{name:"z",type:"int"},{name:"xx",type:"int"}]}),rI=z(([s,e,t,n,i])=>{const r=C(i).toVar(),o=C(n).toVar(),a=C(t).toVar(),c=C(e).toVar(),l=C(s).toVar(),u=me(me(5)).toVar(),h=me().toVar(),d=me().toVar(),f=me().toVar();return h.assign(d.assign(f.assign(me(C(3735928559)).add(u.shiftLeft(me(2))).add(me(13))))),h.addAssign(me(l)),d.addAssign(me(c)),f.addAssign(me(a)),iS(h,d,f),h.addAssign(me(o)),d.addAssign(me(r)),Ol(h,d,f)}).setLayout({name:"mx_hash_int_4",type:"uint",inputs:[{name:"x",type:"int"},{name:"y",type:"int"},{name:"z",type:"int"},{name:"xx",type:"int"},{name:"yy",type:"int"}]}),Pt=Dn([tI,nI,iI,sI,rI]),oI=z(([s,e])=>{const t=C(e).toVar(),n=C(s).toVar(),i=me(Pt(n,t)).toVar(),r=rc().toVar();return r.x.assign(i.bitAnd(C(255))),r.y.assign(i.shiftRight(C(8)).bitAnd(C(255))),r.z.assign(i.shiftRight(C(16)).bitAnd(C(255))),r}).setLayout({name:"mx_hash_vec3_0",type:"uvec3",inputs:[{name:"x",type:"int"},{name:"y",type:"int"}]}),aI=z(([s,e,t])=>{const n=C(t).toVar(),i=C(e).toVar(),r=C(s).toVar(),o=me(Pt(r,i,n)).toVar(),a=rc().toVar();return a.x.assign(o.bitAnd(C(255))),a.y.assign(o.shiftRight(C(8)).bitAnd(C(255))),a.z.assign(o.shiftRight(C(16)).bitAnd(C(255))),a}).setLayout({name:"mx_hash_vec3_1",type:"uvec3",inputs:[{name:"x",type:"int"},{name:"y",type:"int"},{name:"z",type:"int"}]}),Ci=Dn([oI,aI]),cI=z(([s])=>{const e=se(s).toVar(),t=C().toVar(),n=C().toVar(),i=A(kt(e.x,t)).toVar(),r=A(kt(e.y,n)).toVar(),o=A(ps(i)).toVar(),a=A(ps(r)).toVar(),c=A(JT(bn(Pt(t,n),i,r),bn(Pt(t.add(C(1)),n),i.sub(1),r),bn(Pt(t,n.add(C(1))),i,r.sub(1)),bn(Pt(t.add(C(1)),n.add(C(1))),i.sub(1),r.sub(1)),o,a)).toVar();return tS(c)}).setLayout({name:"mx_perlin_noise_float_0",type:"float",inputs:[{name:"p",type:"vec2"}]}),lI=z(([s])=>{const e=I(s).toVar(),t=C().toVar(),n=C().toVar(),i=C().toVar(),r=A(kt(e.x,t)).toVar(),o=A(kt(e.y,n)).toVar(),a=A(kt(e.z,i)).toVar(),c=A(ps(r)).toVar(),l=A(ps(o)).toVar(),u=A(ps(a)).toVar(),h=A(eS(bn(Pt(t,n,i),r,o,a),bn(Pt(t.add(C(1)),n,i),r.sub(1),o,a),bn(Pt(t,n.add(C(1)),i),r,o.sub(1),a),bn(Pt(t.add(C(1)),n.add(C(1)),i),r.sub(1),o.sub(1),a),bn(Pt(t,n,i.add(C(1))),r,o,a.sub(1)),bn(Pt(t.add(C(1)),n,i.add(C(1))),r.sub(1),o,a.sub(1)),bn(Pt(t,n.add(C(1)),i.add(C(1))),r,o.sub(1),a.sub(1)),bn(Pt(t.add(C(1)),n.add(C(1)),i.add(C(1))),r.sub(1),o.sub(1),a.sub(1)),c,l,u)).toVar();return nS(h)}).setLayout({name:"mx_perlin_noise_float_1",type:"float",inputs:[{name:"p",type:"vec3"}]}),Am=Dn([cI,lI]),uI=z(([s])=>{const e=se(s).toVar(),t=C().toVar(),n=C().toVar(),i=A(kt(e.x,t)).toVar(),r=A(kt(e.y,n)).toVar(),o=A(ps(i)).toVar(),a=A(ps(r)).toVar(),c=I(JT(Ni(Ci(t,n),i,r),Ni(Ci(t.add(C(1)),n),i.sub(1),r),Ni(Ci(t,n.add(C(1))),i,r.sub(1)),Ni(Ci(t.add(C(1)),n.add(C(1))),i.sub(1),r.sub(1)),o,a)).toVar();return tS(c)}).setLayout({name:"mx_perlin_noise_vec3_0",type:"vec3",inputs:[{name:"p",type:"vec2"}]}),hI=z(([s])=>{const e=I(s).toVar(),t=C().toVar(),n=C().toVar(),i=C().toVar(),r=A(kt(e.x,t)).toVar(),o=A(kt(e.y,n)).toVar(),a=A(kt(e.z,i)).toVar(),c=A(ps(r)).toVar(),l=A(ps(o)).toVar(),u=A(ps(a)).toVar(),h=I(eS(Ni(Ci(t,n,i),r,o,a),Ni(Ci(t.add(C(1)),n,i),r.sub(1),o,a),Ni(Ci(t,n.add(C(1)),i),r,o.sub(1),a),Ni(Ci(t.add(C(1)),n.add(C(1)),i),r.sub(1),o.sub(1),a),Ni(Ci(t,n,i.add(C(1))),r,o,a.sub(1)),Ni(Ci(t.add(C(1)),n,i.add(C(1))),r.sub(1),o,a.sub(1)),Ni(Ci(t,n.add(C(1)),i.add(C(1))),r,o.sub(1),a.sub(1)),Ni(Ci(t.add(C(1)),n.add(C(1)),i.add(C(1))),r.sub(1),o.sub(1),a.sub(1)),c,l,u)).toVar();return nS(h)}).setLayout({name:"mx_perlin_noise_vec3_1",type:"vec3",inputs:[{name:"p",type:"vec3"}]}),Rm=Dn([uI,hI]),dI=z(([s])=>{const e=A(s).toVar(),t=C(an(e)).toVar();return kn(Pt(t))}).setLayout({name:"mx_cell_noise_float_0",type:"float",inputs:[{name:"p",type:"float"}]}),fI=z(([s])=>{const e=se(s).toVar(),t=C(an(e.x)).toVar(),n=C(an(e.y)).toVar();return kn(Pt(t,n))}).setLayout({name:"mx_cell_noise_float_1",type:"float",inputs:[{name:"p",type:"vec2"}]}),pI=z(([s])=>{const e=I(s).toVar(),t=C(an(e.x)).toVar(),n=C(an(e.y)).toVar(),i=C(an(e.z)).toVar();return kn(Pt(t,n,i))}).setLayout({name:"mx_cell_noise_float_2",type:"float",inputs:[{name:"p",type:"vec3"}]}),mI=z(([s])=>{const e=Ue(s).toVar(),t=C(an(e.x)).toVar(),n=C(an(e.y)).toVar(),i=C(an(e.z)).toVar(),r=C(an(e.w)).toVar();return kn(Pt(t,n,i,r))}).setLayout({name:"mx_cell_noise_float_3",type:"float",inputs:[{name:"p",type:"vec4"}]}),gI=Dn([dI,fI,pI,mI]),_I=z(([s])=>{const e=A(s).toVar(),t=C(an(e)).toVar();return I(kn(Pt(t,C(0))),kn(Pt(t,C(1))),kn(Pt(t,C(2))))}).setLayout({name:"mx_cell_noise_vec3_0",type:"vec3",inputs:[{name:"p",type:"float"}]}),xI=z(([s])=>{const e=se(s).toVar(),t=C(an(e.x)).toVar(),n=C(an(e.y)).toVar();return I(kn(Pt(t,n,C(0))),kn(Pt(t,n,C(1))),kn(Pt(t,n,C(2))))}).setLayout({name:"mx_cell_noise_vec3_1",type:"vec3",inputs:[{name:"p",type:"vec2"}]}),yI=z(([s])=>{const e=I(s).toVar(),t=C(an(e.x)).toVar(),n=C(an(e.y)).toVar(),i=C(an(e.z)).toVar();return I(kn(Pt(t,n,i,C(0))),kn(Pt(t,n,i,C(1))),kn(Pt(t,n,i,C(2))))}).setLayout({name:"mx_cell_noise_vec3_2",type:"vec3",inputs:[{name:"p",type:"vec3"}]}),vI=z(([s])=>{const e=Ue(s).toVar(),t=C(an(e.x)).toVar(),n=C(an(e.y)).toVar(),i=C(an(e.z)).toVar(),r=C(an(e.w)).toVar();return I(kn(Pt(t,n,i,r,C(0))),kn(Pt(t,n,i,r,C(1))),kn(Pt(t,n,i,r,C(2))))}).setLayout({name:"mx_cell_noise_vec3_3",type:"vec3",inputs:[{name:"p",type:"vec4"}]}),sS=Dn([_I,xI,yI,vI]),th=z(([s,e,t,n])=>{const i=A(n).toVar(),r=A(t).toVar(),o=C(e).toVar(),a=I(s).toVar(),c=A(0).toVar(),l=A(1).toVar();return Et(o,()=>{c.addAssign(l.mul(Am(a))),l.mulAssign(i),a.mulAssign(r)}),c}).setLayout({name:"mx_fractal_noise_float",type:"float",inputs:[{name:"p",type:"vec3"},{name:"octaves",type:"int"},{name:"lacunarity",type:"float"},{name:"diminish",type:"float"}]}),rS=z(([s,e,t,n])=>{const i=A(n).toVar(),r=A(t).toVar(),o=C(e).toVar(),a=I(s).toVar(),c=I(0).toVar(),l=A(1).toVar();return Et(o,()=>{c.addAssign(l.mul(Rm(a))),l.mulAssign(i),a.mulAssign(r)}),c}).setLayout({name:"mx_fractal_noise_vec3",type:"vec3",inputs:[{name:"p",type:"vec3"},{name:"octaves",type:"int"},{name:"lacunarity",type:"float"},{name:"diminish",type:"float"}]}),TI=z(([s,e,t,n])=>{const i=A(n).toVar(),r=A(t).toVar(),o=C(e).toVar(),a=I(s).toVar();return se(th(a,o,r,i),th(a.add(I(C(19),C(193),C(17))),o,r,i))}).setLayout({name:"mx_fractal_noise_vec2",type:"vec2",inputs:[{name:"p",type:"vec3"},{name:"octaves",type:"int"},{name:"lacunarity",type:"float"},{name:"diminish",type:"float"}]}),SI=z(([s,e,t,n])=>{const i=A(n).toVar(),r=A(t).toVar(),o=C(e).toVar(),a=I(s).toVar(),c=I(rS(a,o,r,i)).toVar(),l=A(th(a.add(I(C(19),C(193),C(17))),o,r,i)).toVar();return Ue(c,l)}).setLayout({name:"mx_fractal_noise_vec4",type:"vec4",inputs:[{name:"p",type:"vec3"},{name:"octaves",type:"int"},{name:"lacunarity",type:"float"},{name:"diminish",type:"float"}]}),bI=z(([s,e,t,n,i,r,o])=>{const a=C(o).toVar(),c=A(r).toVar(),l=C(i).toVar(),u=C(n).toVar(),h=C(t).toVar(),d=C(e).toVar(),f=se(s).toVar(),m=I(sS(se(d.add(u),h.add(l)))).toVar(),_=se(m.x,m.y).toVar();_.subAssign(.5),_.mulAssign(c),_.addAssign(.5);const g=se(se(A(d),A(h)).add(_)).toVar(),p=se(g.sub(f)).toVar();return it(a.equal(C(2)),()=>Ft(p.x).add(Ft(p.y))),it(a.equal(C(3)),()=>en(Ft(p.x),Ft(p.y))),Dr(p,p)}).setLayout({name:"mx_worley_distance_0",type:"float",inputs:[{name:"p",type:"vec2"},{name:"x",type:"int"},{name:"y",type:"int"},{name:"xoff",type:"int"},{name:"yoff",type:"int"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]}),MI=z(([s,e,t,n,i,r,o,a,c])=>{const l=C(c).toVar(),u=A(a).toVar(),h=C(o).toVar(),d=C(r).toVar(),f=C(i).toVar(),m=C(n).toVar(),_=C(t).toVar(),g=C(e).toVar(),p=I(s).toVar(),T=I(sS(I(g.add(f),_.add(d),m.add(h)))).toVar();T.subAssign(.5),T.mulAssign(u),T.addAssign(.5);const S=I(I(A(g),A(_),A(m)).add(T)).toVar(),v=I(S.sub(p)).toVar();return it(l.equal(C(2)),()=>Ft(v.x).add(Ft(v.y)).add(Ft(v.z))),it(l.equal(C(3)),()=>en(en(Ft(v.x),Ft(v.y)),Ft(v.z))),Dr(v,v)}).setLayout({name:"mx_worley_distance_1",type:"float",inputs:[{name:"p",type:"vec3"},{name:"x",type:"int"},{name:"y",type:"int"},{name:"z",type:"int"},{name:"xoff",type:"int"},{name:"yoff",type:"int"},{name:"zoff",type:"int"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]}),cc=Dn([bI,MI]),EI=z(([s,e,t])=>{const n=C(t).toVar(),i=A(e).toVar(),r=se(s).toVar(),o=C().toVar(),a=C().toVar(),c=se(kt(r.x,o),kt(r.y,a)).toVar(),l=A(1e6).toVar();return Et({start:-1,end:C(1),name:"x",condition:"<="},({x:u})=>{Et({start:-1,end:C(1),name:"y",condition:"<="},({y:h})=>{const d=A(cc(c,u,h,o,a,i,n)).toVar();l.assign(ai(l,d))})}),it(n.equal(C(0)),()=>{l.assign(Es(l))}),l}).setLayout({name:"mx_worley_noise_float_0",type:"float",inputs:[{name:"p",type:"vec2"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]}),AI=z(([s,e,t])=>{const n=C(t).toVar(),i=A(e).toVar(),r=se(s).toVar(),o=C().toVar(),a=C().toVar(),c=se(kt(r.x,o),kt(r.y,a)).toVar(),l=se(1e6,1e6).toVar();return Et({start:-1,end:C(1),name:"x",condition:"<="},({x:u})=>{Et({start:-1,end:C(1),name:"y",condition:"<="},({y:h})=>{const d=A(cc(c,u,h,o,a,i,n)).toVar();it(d.lessThan(l.x),()=>{l.y.assign(l.x),l.x.assign(d)}).ElseIf(d.lessThan(l.y),()=>{l.y.assign(d)})})}),it(n.equal(C(0)),()=>{l.assign(Es(l))}),l}).setLayout({name:"mx_worley_noise_vec2_0",type:"vec2",inputs:[{name:"p",type:"vec2"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]}),RI=z(([s,e,t])=>{const n=C(t).toVar(),i=A(e).toVar(),r=se(s).toVar(),o=C().toVar(),a=C().toVar(),c=se(kt(r.x,o),kt(r.y,a)).toVar(),l=I(1e6,1e6,1e6).toVar();return Et({start:-1,end:C(1),name:"x",condition:"<="},({x:u})=>{Et({start:-1,end:C(1),name:"y",condition:"<="},({y:h})=>{const d=A(cc(c,u,h,o,a,i,n)).toVar();it(d.lessThan(l.x),()=>{l.z.assign(l.y),l.y.assign(l.x),l.x.assign(d)}).ElseIf(d.lessThan(l.y),()=>{l.z.assign(l.y),l.y.assign(d)}).ElseIf(d.lessThan(l.z),()=>{l.z.assign(d)})})}),it(n.equal(C(0)),()=>{l.assign(Es(l))}),l}).setLayout({name:"mx_worley_noise_vec3_0",type:"vec3",inputs:[{name:"p",type:"vec2"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]}),wI=z(([s,e,t])=>{const n=C(t).toVar(),i=A(e).toVar(),r=I(s).toVar(),o=C().toVar(),a=C().toVar(),c=C().toVar(),l=I(kt(r.x,o),kt(r.y,a),kt(r.z,c)).toVar(),u=A(1e6).toVar();return Et({start:-1,end:C(1),name:"x",condition:"<="},({x:h})=>{Et({start:-1,end:C(1),name:"y",condition:"<="},({y:d})=>{Et({start:-1,end:C(1),name:"z",condition:"<="},({z:f})=>{const m=A(cc(l,h,d,f,o,a,c,i,n)).toVar();u.assign(ai(u,m))})})}),it(n.equal(C(0)),()=>{u.assign(Es(u))}),u}).setLayout({name:"mx_worley_noise_float_1",type:"float",inputs:[{name:"p",type:"vec3"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]}),NI=Dn([EI,wI]),CI=z(([s,e,t])=>{const n=C(t).toVar(),i=A(e).toVar(),r=I(s).toVar(),o=C().toVar(),a=C().toVar(),c=C().toVar(),l=I(kt(r.x,o),kt(r.y,a),kt(r.z,c)).toVar(),u=se(1e6,1e6).toVar();return Et({start:-1,end:C(1),name:"x",condition:"<="},({x:h})=>{Et({start:-1,end:C(1),name:"y",condition:"<="},({y:d})=>{Et({start:-1,end:C(1),name:"z",condition:"<="},({z:f})=>{const m=A(cc(l,h,d,f,o,a,c,i,n)).toVar();it(m.lessThan(u.x),()=>{u.y.assign(u.x),u.x.assign(m)}).ElseIf(m.lessThan(u.y),()=>{u.y.assign(m)})})})}),it(n.equal(C(0)),()=>{u.assign(Es(u))}),u}).setLayout({name:"mx_worley_noise_vec2_1",type:"vec2",inputs:[{name:"p",type:"vec3"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]}),PI=Dn([AI,CI]),DI=z(([s,e,t])=>{const n=C(t).toVar(),i=A(e).toVar(),r=I(s).toVar(),o=C().toVar(),a=C().toVar(),c=C().toVar(),l=I(kt(r.x,o),kt(r.y,a),kt(r.z,c)).toVar(),u=I(1e6,1e6,1e6).toVar();return Et({start:-1,end:C(1),name:"x",condition:"<="},({x:h})=>{Et({start:-1,end:C(1),name:"y",condition:"<="},({y:d})=>{Et({start:-1,end:C(1),name:"z",condition:"<="},({z:f})=>{const m=A(cc(l,h,d,f,o,a,c,i,n)).toVar();it(m.lessThan(u.x),()=>{u.z.assign(u.y),u.y.assign(u.x),u.x.assign(m)}).ElseIf(m.lessThan(u.y),()=>{u.z.assign(u.y),u.y.assign(m)}).ElseIf(m.lessThan(u.z),()=>{u.z.assign(m)})})})}),it(n.equal(C(0)),()=>{u.assign(Es(u))}),u}).setLayout({name:"mx_worley_noise_vec3_1",type:"vec3",inputs:[{name:"p",type:"vec3"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]}),LI=Dn([RI,DI]),UI=z(([s])=>{const e=s.y,t=s.z,n=I().toVar();return it(e.lessThan(1e-4),()=>{n.assign(I(t,t,t))}).Else(()=>{let i=s.x;i=i.sub(fs(i)).mul(6).toVar();const r=C(zp(i)),o=i.sub(A(r)),a=t.mul(e.oneMinus()),c=t.mul(e.mul(o).oneMinus()),l=t.mul(e.mul(o.oneMinus()).oneMinus());it(r.equal(C(0)),()=>{n.assign(I(t,l,a))}).ElseIf(r.equal(C(1)),()=>{n.assign(I(c,t,a))}).ElseIf(r.equal(C(2)),()=>{n.assign(I(a,t,l))}).ElseIf(r.equal(C(3)),()=>{n.assign(I(a,c,t))}).ElseIf(r.equal(C(4)),()=>{n.assign(I(l,a,t))}).Else(()=>{n.assign(I(t,a,c))})}),n}).setLayout({name:"mx_hsvtorgb",type:"vec3",inputs:[{name:"hsv",type:"vec3"}]}),II=z(([s])=>{const e=I(s).toVar(),t=A(e.x).toVar(),n=A(e.y).toVar(),i=A(e.z).toVar(),r=A(ai(t,ai(n,i))).toVar(),o=A(en(t,en(n,i))).toVar(),a=A(o.sub(r)).toVar(),c=A().toVar(),l=A().toVar(),u=A().toVar();return u.assign(o),it(o.greaterThan(0),()=>{l.assign(a.div(o))}).Else(()=>{l.assign(0)}),it(l.lessThanEqual(0),()=>{c.assign(0)}).Else(()=>{it(t.greaterThanEqual(o),()=>{c.assign(n.sub(i).div(a))}).ElseIf(n.greaterThanEqual(o),()=>{c.assign(cn(2,i.sub(t).div(a)))}).Else(()=>{c.assign(cn(4,t.sub(n).div(a)))}),c.mulAssign(1/6),it(c.lessThan(0),()=>{c.addAssign(1)})}),I(c,l,u)}).setLayout({name:"mx_rgbtohsv",type:"vec3",inputs:[{name:"c",type:"vec3"}]}),FI=z(([s])=>{const e=I(s).toVar(),t=Mp(Up(e,I(.04045))).toVar(),n=I(e.div(12.92)).toVar(),i=I(ji(en(e.add(I(.055)),I(0)).div(1.055),I(2.4))).toVar();return Mt(n,i,t)}).setLayout({name:"mx_srgb_texture_to_lin_rec709",type:"vec3",inputs:[{name:"color",type:"vec3"}]}),oS=(s,e)=>{s=A(s),e=A(e);const t=se(e.dFdx(),e.dFdy()).length().mul(.7071067811865476);return Ks(s.sub(t),s.add(t),e)},aS=(s,e,t,n)=>Mt(s,e,t[n].clamp()),BI=(s,e,t=Xt())=>aS(s,e,t,"x"),OI=(s,e,t=Xt())=>aS(s,e,t,"y"),cS=(s,e,t,n,i)=>Mt(s,e,oS(t,n[i])),VI=(s,e,t,n=Xt())=>cS(s,e,t,n,"x"),GI=(s,e,t,n=Xt())=>cS(s,e,t,n,"y"),zI=(s=1,e=0,t=Xt())=>t.mul(s).add(e),kI=(s,e=1)=>(s=A(s),s.abs().pow(e).mul(s.sign())),HI=(s,e=1,t=.5)=>A(s).sub(t).mul(e).add(t),WI=(s=Xt(),e=1,t=0)=>Am(s.convert("vec2|vec3")).mul(e).add(t),$I=(s=Xt(),e=1,t=0)=>Rm(s.convert("vec2|vec3")).mul(e).add(t),XI=(s=Xt(),e=1,t=0)=>(s=s.convert("vec2|vec3"),Ue(Rm(s),Am(s.add(se(19,73)))).mul(e).add(t)),qI=(s=Xt(),e=1)=>NI(s.convert("vec2|vec3"),e,C(1)),YI=(s=Xt(),e=1)=>PI(s.convert("vec2|vec3"),e,C(1)),jI=(s=Xt(),e=1)=>LI(s.convert("vec2|vec3"),e,C(1)),KI=(s=Xt())=>gI(s.convert("vec2|vec3")),ZI=(s=Xt(),e=3,t=2,n=.5,i=1)=>th(s,C(e),t,n).mul(i),QI=(s=Xt(),e=3,t=2,n=.5,i=1)=>TI(s,C(e),t,n).mul(i),JI=(s=Xt(),e=3,t=2,n=.5,i=1)=>rS(s,C(e),t,n).mul(i),eF=(s=Xt(),e=3,t=2,n=.5,i=1)=>SI(s,C(e),t,n).mul(i),tF=z(([s,e,t])=>{const n=js(s).toVar("nDir"),i=pt(A(.5).mul(e.sub(t)),Xs).div(n).toVar("rbmax"),r=pt(A(-.5).mul(e.sub(t)),Xs).div(n).toVar("rbmin"),o=I().toVar("rbminmax");o.x=n.x.greaterThan(A(0)).select(i.x,r.x),o.y=n.y.greaterThan(A(0)).select(i.y,r.y),o.z=n.z.greaterThan(A(0)).select(i.z,r.z);const a=ai(ai(o.x,o.y),o.z).toVar("correction");return Xs.add(n.mul(a)).toVar("boxIntersection").sub(t)}),lS=z(([s,e])=>{const t=s.x,n=s.y,i=s.z;let r=e.element(0).mul(.886227);return r=r.add(e.element(1).mul(2*.511664).mul(n)),r=r.add(e.element(2).mul(2*.511664).mul(i)),r=r.add(e.element(3).mul(2*.511664).mul(t)),r=r.add(e.element(4).mul(2*.429043).mul(t).mul(n)),r=r.add(e.element(5).mul(2*.429043).mul(n).mul(i)),r=r.add(e.element(6).mul(i.mul(i).mul(.743125).sub(.247708))),r=r.add(e.element(7).mul(2*.429043).mul(t).mul(i)),r=r.add(e.element(8).mul(.429043).mul(Ke(t,t).sub(Ke(n,n)))),r});var x=Object.freeze({__proto__:null,BRDF_GGX:vf,BRDF_Lambert:Mo,BasicShadowFilter:XT,Break:z0,Continue:i1,DFGApprox:um,D_GGX:iT,Discard:Iv,EPSILON:zy,F_Schlick:Qa,Fn:z,INFINITY:YN,If:it,Loop:Et,NodeAccess:Vn,NodeShaderStage:lf,NodeType:MN,NodeUpdateType:Ye,PCFShadowFilter:qT,PCFSoftShadowFilter:YT,PI:Yu,PI2:jN,Return:uC,Schlick_to_F0:rT,ScriptableNodeResources:Fu,ShaderNode:Cc,TBNViewMatrix:eo,VSMShadowFilter:jT,V_GGX_SmithCorrelated:nT,abs:Ft,acesFilmicToneMapping:BT,acos:qy,add:cn,addMethodChaining:Y,addNodeElement:dC,agxToneMapping:OT,all:Ip,alphaT:$u,and:Cy,anisotropy:lr,anisotropyB:go,anisotropyT:Pc,any:ky,append:ly,arrayBuffer:HN,asin:Xy,assign:by,atan:Op,atan2:fv,atomicAdd:uU,atomicAnd:pU,atomicFunc:er,atomicMax:dU,atomicMin:fU,atomicOr:mU,atomicStore:lU,atomicSub:hU,atomicXor:gU,attenuationColor:Pp,attenuationDistance:Cp,attribute:ys,attributeArray:iL,backgroundBlurriness:ET,backgroundIntensity:Af,backgroundRotation:AT,batch:O0,billboarding:ID,bitAnd:Uy,bitNot:Iy,bitOr:Fy,bitXor:By,bitangentGeometry:BC,bitangentLocal:OC,bitangentView:Jv,bitangentWorld:VC,bitcast:KN,blendBurn:NT,blendColor:mL,blendDodge:CT,blendOverlay:DT,blendScreen:PT,blur:dT,bool:Ys,buffer:Pl,bufferAttribute:Nl,bumpMap:i0,burn:gL,bvec2:dy,bvec3:Mp,bvec4:gy,bypass:Pv,cache:Lc,call:My,cameraFar:hr,cameraNear:ur,cameraNormalMatrix:xC,cameraPosition:Vv,cameraProjectionMatrix:wo,cameraProjectionMatrixInverse:gC,cameraViewMatrix:ui,cameraWorldMatrix:_C,cbrt:av,cdl:ML,ceil:Sh,checker:kU,cineonToneMapping:FT,clamp:xs,clearcoat:Wu,clearcoatRoughness:al,code:Fh,color:uy,colorSpaceToWorking:qp,colorToDirection:D1,compute:Cv,cond:pv,context:Eh,convert:xy,convertColorSpace:tC,convertToTexture:YD,cos:Us,cross:Mh,cubeTexture:Za,dFdx:Vp,dFdy:Gp,dashSize:Cu,defaultBuildStages:uf,defaultShaderStages:iy,defined:il,degrees:Wy,deltaTime:ST,densityFog:qL,densityFogFactor:xm,depth:om,depthPass:CL,difference:iv,diffuseColor:bt,directPointLight:QT,directionToColor:Y0,dispersion:Dp,distance:nv,div:Zi,dodge:_L,dot:Dr,drawIndex:I0,dynamicBufferAttribute:Nv,element:_y,emissive:pf,equal:Ey,equals:ev,equirectUV:am,exp:Fp,exp2:Ka,expression:wr,faceDirection:Cl,faceForward:$p,faceforward:ZN,float:A,floor:fs,fog:dl,fract:Js,frameGroup:Ty,frameId:ED,frontFacing:Hv,fwidth:Qy,gain:xD,gapSize:mf,getConstNodeType:cy,getCurrentStack:bp,getDirection:uT,getDistanceAttenuation:Em,getGeometryRoughness:tT,getNormalFromDepth:KD,getParallaxCorrectNormal:tF,getRoughness:lm,getScreenPosition:jD,getShIrradianceAt:lS,getTextureIndex:vT,getViewPosition:ta,glsl:VL,glslFn:GL,grayscale:vL,greaterThan:Up,greaterThanEqual:Ny,hash:_D,highpModelNormalViewMatrix:NC,highpModelViewMatrix:wC,hue:bL,instance:QC,instanceIndex:Il,instancedArray:sL,instancedBufferAttribute:ju,instancedDynamicBufferAttribute:gf,instancedMesh:B0,int:C,inverseSqrt:Bp,inversesqrt:QN,invocationLocalIndex:ZC,invocationSubgroupIndex:KC,ior:Dc,iridescence:vh,iridescenceIOR:Rp,iridescenceThickness:wp,ivec2:xn,ivec3:fy,ivec4:py,js:BL,label:gv,length:$s,lengthSq:cv,lessThan:Ry,lessThanEqual:wy,lightPosition:Tm,lightProjectionUV:WT,lightShadowMatrix:vm,lightTargetDirection:Sm,lightTargetPosition:$T,lightViewPosition:Oh,lightingContext:H0,lights:yU,linearDepth:Zu,linearToneMapping:UT,localId:JL,log:Th,log2:ds,logarithmicDepthToViewZ:_1,loop:s1,luminance:gm,mat2:xh,mat3:Wn,mat4:mo,matcapUV:pT,materialAO:L0,materialAlphaTest:s0,materialAnisotropy:y0,materialAnisotropyVector:ea,materialAttenuationColor:R0,materialAttenuationDistance:A0,materialClearcoat:f0,materialClearcoatNormal:m0,materialClearcoatRoughness:p0,materialColor:r0,materialDispersion:D0,materialEmissive:a0,materialIOR:E0,materialIridescence:v0,materialIridescenceIOR:T0,materialIridescenceThickness:S0,materialLightMap:Jp,materialLineDashOffset:P0,materialLineDashSize:N0,materialLineGapSize:C0,materialLineScale:w0,materialLineWidth:qC,materialMetalness:h0,materialNormal:d0,materialOpacity:Qp,materialPointWidth:YC,materialReference:ks,materialReflectivity:Lu,materialRefractionRatio:Xv,materialRotation:g0,materialRoughness:u0,materialSheen:_0,materialSheenRoughness:x0,materialShininess:o0,materialSpecular:c0,materialSpecularColor:l0,materialSpecularIntensity:yf,materialSpecularStrength:Uc,materialThickness:M0,materialTransmission:b0,max:en,maxMipLevel:Ov,mediumpModelViewMatrix:kv,metalness:ol,min:ai,mix:Mt,mixElement:hv,mod:kp,modInt:Lp,modelDirection:bC,modelNormalMatrix:zv,modelPosition:MC,modelScale:EC,modelViewMatrix:oc,modelViewPosition:AC,modelViewProjection:em,modelWorldMatrix:Li,modelWorldMatrixInverse:RC,morphReference:k0,mrt:TT,mul:Ke,mx_aastep:oS,mx_cell_noise_float:KI,mx_contrast:HI,mx_fractal_noise_float:ZI,mx_fractal_noise_vec2:QI,mx_fractal_noise_vec3:JI,mx_fractal_noise_vec4:eF,mx_hsvtorgb:UI,mx_noise_float:WI,mx_noise_vec3:$I,mx_noise_vec4:XI,mx_ramplr:BI,mx_ramptb:OI,mx_rgbtohsv:II,mx_safepower:kI,mx_splitlr:VI,mx_splittb:GI,mx_srgb_texture_to_lin_rec709:FI,mx_transform_uv:zI,mx_worley_noise_float:qI,mx_worley_noise_vec2:YI,mx_worley_noise_vec3:jI,negate:Yy,neutralToneMapping:VT,nodeArray:po,nodeImmutable:de,nodeObject:J,nodeObjects:El,nodeProxy:j,normalFlat:Wv,normalGeometry:Rh,normalLocal:ci,normalMap:xf,normalView:Oi,normalWorld:wh,normalize:js,not:Dy,notEqual:Ay,numWorkgroups:ZL,objectDirection:yC,objectGroup:Ap,objectPosition:Gv,objectScale:TC,objectViewPosition:SC,objectWorldMatrix:vC,oneMinus:jy,or:Py,orthographicDepthToViewZ:g1,oscSawtooth:DD,oscSine:ND,oscSquare:CD,oscTriangle:PD,output:ll,outputStruct:mD,overlay:yL,overloadingFn:Dn,parabola:Ef,parallaxDirection:t0,parallaxUV:zC,parameter:fD,pass:wL,passTexture:NL,pcurve:yD,perspectiveDepthToViewZ:sm,pmremTexture:hm,pointUV:cL,pointWidth:$N,positionGeometry:Ah,positionLocal:Jt,positionPrevious:Ku,positionView:on,positionViewDirection:Vt,positionWorld:Xs,positionWorldDirection:Yp,posterize:AL,pow:ji,pow2:Hp,pow3:sv,pow4:rv,property:Sy,radians:Hy,rand:uv,range:jL,rangeFog:XL,rangeFogFactor:_m,reciprocal:Zy,reference:Ct,referenceBuffer:_f,reflect:tv,reflectVector:jv,reflectView:qv,reflector:HD,refract:Wp,refractVector:Kv,refractView:Yv,reinhardToneMapping:IT,remainder:Gy,remap:Lv,remapClamp:Uv,renderGroup:ke,renderOutput:Fv,rendererReference:Av,rotate:dm,rotateUV:LD,roughness:as,round:Ky,rtt:MT,sRGBTransferEOTF:vv,sRGBTransferOETF:Tv,sampler:mC,saturate:lv,saturation:TL,screen:xL,screenCoordinate:Fl,screenSize:hl,screenUV:Ss,scriptable:$L,scriptableValue:Iu,select:Cn,setCurrentStack:sl,shaderStages:hf,shadow:ZT,shadowPositionWorld:Mm,sharedUniformGroup:Ep,sheen:Jr,sheenRoughness:yh,shiftLeft:Oy,shiftRight:Vy,shininess:Xu,sign:ul,sin:yi,sinc:vD,skinning:t1,skinningReference:G0,smoothstep:Ks,smoothstepElement:dv,specularColor:Qn,specularF90:cl,spherizeUV:UD,split:WN,spritesheetUV:OD,sqrt:Es,stack:Uu,step:bh,storage:Ih,storageBarrier:iU,storageObject:nL,storageTexture:RT,string:kN,sub:pt,subgroupIndex:jC,subgroupSize:eU,tan:$y,tangentGeometry:Ph,tangentLocal:Dl,tangentView:Ll,tangentWorld:Qv,temp:xv,texture:ht,texture3D:kP,textureBarrier:sU,textureBicubic:cT,textureCubeUV:hT,textureLoad:Zt,textureSize:Sr,textureStore:uL,thickness:Np,time:No,timerDelta:wD,timerGlobal:RD,timerLocal:AD,toOutputColorSpace:Sv,toWorkingColorSpace:bv,toneMapping:Rv,toneMappingExposure:wv,toonOutlinePass:DL,transformDirection:ov,transformNormal:$v,transformNormalToView:jp,transformedBentNormalView:n0,transformedBitangentView:e0,transformedBitangentWorld:GC,transformedClearcoatNormalView:oa,transformedNormalView:Qt,transformedNormalWorld:Nh,transformedTangentView:Zp,transformedTangentWorld:FC,transmission:qu,transpose:Jy,triNoise3D:SD,triplanarTexture:GD,triplanarTextures:bT,trunc:zp,tslFn:zN,uint:me,uniform:Ie,uniformArray:zs,uniformGroup:vy,uniforms:LC,userData:dL,uv:Xt,uvec2:hy,uvec3:rc,uvec4:my,varying:li,varyingProperty:rl,vec2:se,vec3:I,vec4:Ue,vectorComponents:Ao,velocity:pL,vertexColor:oL,vertexIndex:U0,vertexStage:yv,vibrance:SL,viewZToLogarithmicDepth:rm,viewZToOrthographicDepth:fa,viewZToPerspectiveDepth:X0,viewport:tm,viewportBottomLeft:f1,viewportCoordinate:$0,viewportDepthTexture:im,viewportLinearDepth:x1,viewportMipTexture:nm,viewportResolution:h1,viewportSafeUV:FD,viewportSharedTexture:P1,viewportSize:W0,viewportTexture:p1,viewportTopLeft:d1,viewportUV:u1,wgsl:OL,wgslFn:zL,workgroupArray:aU,workgroupBarrier:nU,workgroupId:QL,workingToColorSpace:Mv,xor:Ly});const Ds=new fm;class nF extends Lr{constructor(e,t){super(),this.renderer=e,this.nodes=t}update(e,t,n){const i=this.renderer,r=this.nodes.getBackgroundNode(e)||e.background;let o=!1;if(r===null)i._clearColor.getRGB(Ds,bi),Ds.a=i._clearColor.a;else if(r.isColor===!0)r.getRGB(Ds,bi),Ds.a=1,o=!0;else if(r.isNode===!0){const a=this.get(e),c=r;Ds.copy(i._clearColor);let l=a.backgroundMesh;if(l===void 0){const h=Eh(Ue(c).mul(Af),{getUV:()=>AT.mul(wh),getTextureLevel:()=>ET});let d=em;d=d.setZ(d.w);const f=new tn;f.name="Background.material",f.side=Wt,f.depthTest=!1,f.depthWrite=!1,f.fog=!1,f.lights=!1,f.vertexNode=d,f.colorNode=h,a.backgroundMeshNode=h,a.backgroundMesh=l=new On(new mp(1,32,32),f),l.frustumCulled=!1,l.name="Background.mesh",l.onBeforeRender=function(m,_,g){this.matrixWorld.copyPosition(g.matrixWorld)}}const u=c.getCacheKey();a.backgroundCacheKey!==u&&(a.backgroundMeshNode.node=Ue(c).mul(Af),a.backgroundMeshNode.needsUpdate=!0,l.material.needsUpdate=!0,a.backgroundCacheKey=u),t.unshift(l,l.geometry,l.material,0,0,null,null)}else console.error("THREE.Renderer: Unsupported background configuration.",r);if(i.autoClear===!0||o===!0){const a=n.clearColorValue;a.r=Ds.r,a.g=Ds.g,a.b=Ds.b,a.a=Ds.a,(i.backend.isWebGLBackend===!0||i.alpha===!0)&&(a.r*=a.a,a.g*=a.a,a.b*=a.a),n.depthClearValue=i._clearDepth,n.stencilClearValue=i._clearStencil,n.clearColor=i.autoClearColor===!0,n.clearDepth=i.autoClearDepth===!0,n.clearStencil=i.autoClearStencil===!0}else n.clearColor=!1,n.clearDepth=!1,n.clearStencil=!1}}let iF=0;class Rf{constructor(e="",t=[],n=0,i=[]){this.name=e,this.bindings=t,this.index=n,this.bindingsReference=i,this.id=iF++}}class sF{constructor(e,t,n,i,r,o,a,c,l,u=[]){this.vertexShader=e,this.fragmentShader=t,this.computeShader=n,this.transforms=u,this.nodeAttributes=i,this.bindings=r,this.updateNodes=o,this.updateBeforeNodes=a,this.updateAfterNodes=c,this.monitor=l,this.usedTimes=0}createBindings(){const e=[];for(const t of this.bindings)if(t.bindings[0].groupNode.shared!==!0){const i=new Rf(t.name,[],t.index,t);e.push(i);for(const r of t.bindings)i.bindings.push(r.clone())}else e.push(t);return e}}class M_{constructor(e,t,n=null){this.isNodeAttribute=!0,this.name=e,this.type=t,this.node=n}}class rF{constructor(e,t,n){this.isNodeUniform=!0,this.name=e,this.type=t,this.node=n.getSelf()}get value(){return this.node.value}set value(e){this.node.value=e}get id(){return this.node.id}get groupNode(){return this.node.groupNode}}class uS{constructor(e,t){this.isNodeVar=!0,this.name=e,this.type=t}}class oF extends uS{constructor(e,t){super(e,t),this.needsInterpolation=!1,this.isNodeVarying=!0}}class aF{constructor(e,t,n=""){this.name=e,this.type=t,this.code=n,Object.defineProperty(this,"isNodeCode",{value:!0})}}let cF=0;class Fd{constructor(e=null){this.id=cF++,this.nodesData=new WeakMap,this.parent=e}getData(e){let t=this.nodesData.get(e);return t===void 0&&this.parent!==null&&(t=this.parent.getData(e)),t}setData(e,t){this.nodesData.set(e,t)}}class lF extends Ve{static get type(){return"StructTypeNode"}constructor(e,t){super(),this.name=e,this.types=t,this.isStructTypeNode=!0}getMemberTypes(){return this.types}}class Po{constructor(e,t){this.name=e,this.value=t,this.boundary=0,this.itemSize=0,this.offset=0}setValue(e){this.value=e}getValue(){return this.value}}class uF extends Po{constructor(e,t=0){super(e,t),this.isNumberUniform=!0,this.boundary=4,this.itemSize=1}}class hF extends Po{constructor(e,t=new Ee){super(e,t),this.isVector2Uniform=!0,this.boundary=8,this.itemSize=2}}class dF extends Po{constructor(e,t=new U){super(e,t),this.isVector3Uniform=!0,this.boundary=16,this.itemSize=3}}class fF extends Po{constructor(e,t=new je){super(e,t),this.isVector4Uniform=!0,this.boundary=16,this.itemSize=4}}class pF extends Po{constructor(e,t=new De){super(e,t),this.isColorUniform=!0,this.boundary=16,this.itemSize=3}}class mF extends Po{constructor(e,t=new qe){super(e,t),this.isMatrix3Uniform=!0,this.boundary=48,this.itemSize=12}}class gF extends Po{constructor(e,t=new ut){super(e,t),this.isMatrix4Uniform=!0,this.boundary=64,this.itemSize=16}}class _F extends uF{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class xF extends hF{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class yF extends dF{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class vF extends fF{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class TF extends pF{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class SF extends mF{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class bF extends gF{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}const aa=4,E_=[.125,.215,.35,.446,.526,.582],Zr=20,Bd=new Ml(-1,1,1,-1,0,1),MF=new Yn(90,1),A_=new De;let Od=null,Vd=0,Gd=0;const Yr=(1+Math.sqrt(5))/2,Ko=1/Yr,R_=[new U(-Yr,Ko,0),new U(Yr,Ko,0),new U(-Ko,0,Yr),new U(Ko,0,Yr),new U(0,Yr,-Ko),new U(0,Yr,Ko),new U(-1,1,-1),new U(1,1,-1),new U(-1,1,1),new U(1,1,1)],EF=[3,1,5,0,4,2],zd=uT(Xt(),ys("faceIndex")).normalize(),wm=I(zd.x,zd.y,zd.z);class AF{constructor(e){this._renderer=e,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._lodMeshes=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._backgroundBox=null}get _hasInitialized(){return this._renderer.hasInitialized()}fromScene(e,t=0,n=.1,i=100,r=null){if(this._setSize(256),this._hasInitialized===!1){console.warn("THREE.PMREMGenerator: .fromScene() called before the backend is initialized. Try using .fromSceneAsync() instead.");const a=r||this._allocateTargets();return this.fromSceneAsync(e,t,n,i,a),a}Od=this._renderer.getRenderTarget(),Vd=this._renderer.getActiveCubeFace(),Gd=this._renderer.getActiveMipmapLevel();const o=r||this._allocateTargets();return o.depthBuffer=!0,this._sceneToCubeUV(e,n,i,o),t>0&&this._blur(o,0,0,t),this._applyPMREM(o),this._cleanup(o),o}async fromSceneAsync(e,t=0,n=.1,i=100,r=null){return this._hasInitialized===!1&&await this._renderer.init(),this.fromScene(e,t,n,i,r)}fromEquirectangular(e,t=null){if(this._hasInitialized===!1){console.warn("THREE.PMREMGenerator: .fromEquirectangular() called before the backend is initialized. Try using .fromEquirectangularAsync() instead."),this._setSizeFromTexture(e);const n=t||this._allocateTargets();return this.fromEquirectangularAsync(e,n),n}return this._fromTexture(e,t)}async fromEquirectangularAsync(e,t=null){return this._hasInitialized===!1&&await this._renderer.init(),this._fromTexture(e,t)}fromCubemap(e,t=null){if(this._hasInitialized===!1){console.warn("THREE.PMREMGenerator: .fromCubemap() called before the backend is initialized. Try using .fromCubemapAsync() instead."),this._setSizeFromTexture(e);const n=t||this._allocateTargets();return this.fromCubemapAsync(e,t),n}return this._fromTexture(e,t)}async fromCubemapAsync(e,t=null){return this._hasInitialized===!1&&await this._renderer.init(),this._fromTexture(e,t)}async compileCubemapShader(){this._cubemapMaterial===null&&(this._cubemapMaterial=N_(),await this._compileMaterial(this._cubemapMaterial))}async compileEquirectangularShader(){this._equirectMaterial===null&&(this._equirectMaterial=C_(),await this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),this._cubemapMaterial!==null&&this._cubemapMaterial.dispose(),this._equirectMaterial!==null&&this._equirectMaterial.dispose(),this._backgroundBox!==null&&(this._backgroundBox.geometry.dispose(),this._backgroundBox.material.dispose())}_setSizeFromTexture(e){e.mapping===Fi||e.mapping===Bi?this._setSize(e.image.length===0?16:e.image[0].width||e.image[0].image.width):this._setSize(e.image.width/4)}_setSize(e){this._lodMax=Math.floor(Math.log2(e)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){this._blurMaterial!==null&&this._blurMaterial.dispose(),this._pingPongRenderTarget!==null&&this._pingPongRenderTarget.dispose();for(let e=0;e<this._lodPlanes.length;e++)this._lodPlanes[e].dispose()}_cleanup(e){this._renderer.setRenderTarget(Od,Vd,Gd),e.scissorTest=!1,yu(e,0,0,e.width,e.height)}_fromTexture(e,t){this._setSizeFromTexture(e),Od=this._renderer.getRenderTarget(),Vd=this._renderer.getActiveCubeFace(),Gd=this._renderer.getActiveMipmapLevel();const n=t||this._allocateTargets();return this._textureToCubeUV(e,n),this._applyPMREM(n),this._cleanup(n),n}_allocateTargets(){const e=3*Math.max(this._cubeSize,112),t=4*this._cubeSize,n={magFilter:yn,minFilter:yn,generateMipmaps:!1,type:zn,format:Nn,colorSpace:bi},i=w_(e,t,n);if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==e||this._pingPongRenderTarget.height!==t){this._pingPongRenderTarget!==null&&this._dispose(),this._pingPongRenderTarget=w_(e,t,n);const{_lodMax:r}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas,lodMeshes:this._lodMeshes}=RF(r)),this._blurMaterial=wF(r,e,t)}return i}async _compileMaterial(e){const t=new On(this._lodPlanes[0],e);await this._renderer.compile(t,Bd)}_sceneToCubeUV(e,t,n,i){const r=MF;r.near=t,r.far=n;const o=[1,1,1,1,-1,1],a=[1,-1,1,-1,1,-1],c=this._renderer,l=c.autoClear;c.getClearColor(A_),c.autoClear=!1;let u=this._backgroundBox;if(u===null){const f=new uh({name:"PMREM.Background",side:Wt,depthWrite:!1,depthTest:!1});u=new On(new Pr,f)}let h=!1;const d=e.background;d?d.isColor&&(u.material.color.copy(d),e.background=null,h=!0):(u.material.color.copy(A_),h=!0),c.setRenderTarget(i),c.clear(),h&&c.render(u,r);for(let f=0;f<6;f++){const m=f%3;m===0?(r.up.set(0,o[f],0),r.lookAt(a[f],0,0)):m===1?(r.up.set(0,0,o[f]),r.lookAt(0,a[f],0)):(r.up.set(0,o[f],0),r.lookAt(0,0,a[f]));const _=this._cubeSize;yu(i,m*_,f>2?_:0,_,_),c.render(e,r)}c.autoClear=l,e.background=d}_textureToCubeUV(e,t){const n=this._renderer,i=e.mapping===Fi||e.mapping===Bi;i?this._cubemapMaterial===null&&(this._cubemapMaterial=N_(e)):this._equirectMaterial===null&&(this._equirectMaterial=C_(e));const r=i?this._cubemapMaterial:this._equirectMaterial;r.fragmentNode.value=e;const o=this._lodMeshes[0];o.material=r;const a=this._cubeSize;yu(t,0,0,3*a,2*a),n.setRenderTarget(t),n.render(o,Bd)}_applyPMREM(e){const t=this._renderer,n=t.autoClear;t.autoClear=!1;const i=this._lodPlanes.length;for(let r=1;r<i;r++){const o=Math.sqrt(this._sigmas[r]*this._sigmas[r]-this._sigmas[r-1]*this._sigmas[r-1]),a=R_[(i-r-1)%R_.length];this._blur(e,r-1,r,o,a)}t.autoClear=n}_blur(e,t,n,i,r){const o=this._pingPongRenderTarget;this._halfBlur(e,o,t,n,i,"latitudinal",r),this._halfBlur(o,e,n,n,i,"longitudinal",r)}_halfBlur(e,t,n,i,r,o,a){const c=this._renderer,l=this._blurMaterial;o!=="latitudinal"&&o!=="longitudinal"&&console.error("blur direction must be either latitudinal or longitudinal!");const u=3,h=this._lodMeshes[i];h.material=l;const d=l.uniforms,f=this._sizeLods[n]-1,m=isFinite(r)?Math.PI/(2*f):2*Math.PI/(2*Zr-1),_=r/m,g=isFinite(r)?1+Math.floor(u*_):Zr;g>Zr&&console.warn(`sigmaRadians, ${r}, is too large and will clip, as it requested ${g} samples when the maximum is set to ${Zr}`);const p=[];let T=0;for(let w=0;w<Zr;++w){const F=w/_,E=Math.exp(-F*F/2);p.push(E),w===0?T+=E:w<g&&(T+=2*E)}for(let w=0;w<p.length;w++)p[w]=p[w]/T;e.texture.frame=(e.texture.frame||0)+1,d.envMap.value=e.texture,d.samples.value=g,d.weights.array=p,d.latitudinal.value=o==="latitudinal"?1:0,a&&(d.poleAxis.value=a);const{_lodMax:S}=this;d.dTheta.value=m,d.mipInt.value=S-n;const v=this._sizeLods[i],P=3*v*(i>S-aa?i-S+aa:0),N=4*(this._cubeSize-v);yu(t,P,N,3*v,2*v),c.setRenderTarget(t),c.render(h,Bd)}}function RF(s){const e=[],t=[],n=[],i=[];let r=s;const o=s-aa+1+E_.length;for(let a=0;a<o;a++){const c=Math.pow(2,r);t.push(c);let l=1/c;a>s-aa?l=E_[a-s+aa-1]:a===0&&(l=0),n.push(l);const u=1/(c-2),h=-u,d=1+u,f=[h,h,d,h,d,d,h,h,d,d,h,d],m=6,_=6,g=3,p=2,T=1,S=new Float32Array(g*_*m),v=new Float32Array(p*_*m),P=new Float32Array(T*_*m);for(let w=0;w<m;w++){const F=w%3*2/3-1,E=w>2?0:-1,M=[F,E,0,F+2/3,E,0,F+2/3,E+1,0,F,E,0,F+2/3,E+1,0,F,E+1,0],D=EF[w];S.set(M,g*_*D),v.set(f,p*_*D);const Z=[D,D,D,D,D,D];P.set(Z,T*_*D)}const N=new Qi;N.setAttribute("position",new Pn(S,g)),N.setAttribute("uv",new Pn(v,p)),N.setAttribute("faceIndex",new Pn(P,T)),e.push(N),i.push(new On(N,null)),r>aa&&r--}return{lodPlanes:e,sizeLods:t,sigmas:n,lodMeshes:i}}function w_(s,e,t){const n=new Cr(s,e,t);return n.texture.mapping=yo,n.texture.name="PMREM.cubeUv",n.texture.isPMREMTexture=!0,n.scissorTest=!0,n}function yu(s,e,t,n,i){s.viewport.set(e,t,n,i),s.scissor.set(e,t,n,i)}function Nm(s){const e=new tn;return e.depthTest=!1,e.depthWrite=!1,e.blending=Si,e.name=`PMREM_${s}`,e}function wF(s,e,t){const n=zs(new Array(Zr).fill(0)),i=Ie(new U(0,1,0)),r=Ie(0),o=A(Zr),a=Ie(0),c=Ie(1),l=ht(null),u=Ie(0),h=A(1/e),d=A(1/t),f=A(s),m={n:o,latitudinal:a,weights:n,poleAxis:i,outputDirection:wm,dTheta:r,samples:c,envMap:l,mipInt:u,CUBEUV_TEXEL_WIDTH:h,CUBEUV_TEXEL_HEIGHT:d,CUBEUV_MAX_MIP:f},_=Nm("blur");return _.uniforms=m,_.fragmentNode=dT({...m,latitudinal:a.equal(1)}),_}function N_(s){const e=Nm("cubemap");return e.fragmentNode=Za(s,wm),e}function C_(s){const e=Nm("equirect");return e.fragmentNode=ht(s,am(wm),0),e}const P_=new WeakMap,NF=new Map([[Int8Array,"int"],[Int16Array,"int"],[Int32Array,"int"],[Uint8Array,"uint"],[Uint16Array,"uint"],[Uint32Array,"uint"],[Float32Array,"float"]]),vu=s=>/e/g.test(s)?String(s).replace(/\+/g,""):(s=Number(s),s+(s%1?"":".0"));class hS{constructor(e,t,n){this.object=e,this.material=e&&e.material||null,this.geometry=e&&e.geometry||null,this.renderer=t,this.parser=n,this.scene=null,this.camera=null,this.nodes=[],this.sequentialNodes=[],this.updateNodes=[],this.updateBeforeNodes=[],this.updateAfterNodes=[],this.hashNodes={},this.monitor=null,this.lightsNode=null,this.environmentNode=null,this.fogNode=null,this.clippingContext=null,this.vertexShader=null,this.fragmentShader=null,this.computeShader=null,this.flowNodes={vertex:[],fragment:[],compute:[]},this.flowCode={vertex:"",fragment:"",compute:""},this.uniforms={vertex:[],fragment:[],compute:[],index:0},this.structs={vertex:[],fragment:[],compute:[],index:0},this.bindings={vertex:{},fragment:{},compute:{}},this.bindingsIndexes={},this.bindGroups=null,this.attributes=[],this.bufferAttributes=[],this.varyings=[],this.codes={},this.vars={},this.flow={code:""},this.chaining=[],this.stack=Uu(),this.stacks=[],this.tab="	",this.currentFunctionNode=null,this.context={material:this.material},this.cache=new Fd,this.globalCache=this.cache,this.flowsData=new WeakMap,this.shaderStage=null,this.buildStage=null,this.useComparisonMethod=!1}getBindGroupsCache(){let e=P_.get(this.renderer);return e===void 0&&(e=new bs,P_.set(this.renderer,e)),e}createRenderTarget(e,t,n){return new Cr(e,t,n)}createCubeRenderTarget(e,t){return new j0(e,t)}createPMREMGenerator(){return new AF(this.renderer)}includes(e){return this.nodes.includes(e)}_getBindGroup(e,t){const n=this.getBindGroupsCache(),i=[];let r=!0;for(const a of t)i.push(a),r=r&&a.groupNode.shared!==!0;let o;return r?(o=n.get(i),o===void 0&&(o=new Rf(e,i,this.bindingsIndexes[e].group,i),n.set(i,o))):o=new Rf(e,i,this.bindingsIndexes[e].group,i),o}getBindGroupArray(e,t){const n=this.bindings[t];let i=n[e];return i===void 0&&(this.bindingsIndexes[e]===void 0&&(this.bindingsIndexes[e]={binding:0,group:Object.keys(this.bindingsIndexes).length}),n[e]=i=[]),i}getBindings(){let e=this.bindGroups;if(e===null){const t={},n=this.bindings;for(const i of hf)for(const r in n[i]){const o=n[i][r];(t[r]||(t[r]=[])).push(...o)}e=[];for(const i in t){const r=t[i],o=this._getBindGroup(i,r);e.push(o)}this.bindGroups=e}return e}sortBindingGroups(){const e=this.getBindings();e.sort((t,n)=>t.bindings[0].groupNode.order-n.bindings[0].groupNode.order);for(let t=0;t<e.length;t++){const n=e[t];this.bindingsIndexes[n.name].group=t,n.index=t}}setHashNode(e,t){this.hashNodes[t]=e}addNode(e){this.nodes.includes(e)===!1&&(this.nodes.push(e),this.setHashNode(e,e.getHash(this)))}addSequentialNode(e){this.sequentialNodes.includes(e)===!1&&this.sequentialNodes.push(e)}buildUpdateNodes(){for(const e of this.nodes)e.getUpdateType()!==Ye.NONE&&this.updateNodes.push(e.getSelf());for(const e of this.sequentialNodes){const t=e.getUpdateBeforeType(),n=e.getUpdateAfterType();t!==Ye.NONE&&this.updateBeforeNodes.push(e.getSelf()),n!==Ye.NONE&&this.updateAfterNodes.push(e.getSelf())}}get currentNode(){return this.chaining[this.chaining.length-1]}isFilteredTexture(e){return e.magFilter===yn||e.magFilter===ha||e.magFilter===ls||e.magFilter===ti||e.minFilter===yn||e.minFilter===ha||e.minFilter===ls||e.minFilter===ti}addChain(e){this.chaining.push(e)}removeChain(e){if(this.chaining.pop()!==e)throw new Error("NodeBuilder: Invalid node chaining!")}getMethod(e){return e}getNodeFromHash(e){return this.hashNodes[e]}addFlow(e,t){return this.flowNodes[e].push(t),t}setContext(e){this.context=e}getContext(){return this.context}getSharedContext(){return{...this.context},this.context}setCache(e){this.cache=e}getCache(){return this.cache}getCacheFromNode(e,t=!0){const n=this.getDataFromNode(e);return n.cache===void 0&&(n.cache=new Fd(t?this.getCache():null)),n.cache}isAvailable(){return!1}getVertexIndex(){console.warn("Abstract function.")}getInstanceIndex(){console.warn("Abstract function.")}getDrawIndex(){console.warn("Abstract function.")}getFrontFacing(){console.warn("Abstract function.")}getFragCoord(){console.warn("Abstract function.")}isFlipY(){return!1}increaseUsage(e){const t=this.getDataFromNode(e);return t.usageCount=t.usageCount===void 0?1:t.usageCount+1,t.usageCount}generateTexture(){console.warn("Abstract function.")}generateTextureLod(){console.warn("Abstract function.")}generateConst(e,t=null){if(t===null&&(e==="float"||e==="int"||e==="uint"?t=0:e==="bool"?t=!1:e==="color"?t=new De:e==="vec2"?t=new Ee:e==="vec3"?t=new U:e==="vec4"&&(t=new je)),e==="float")return vu(t);if(e==="int")return`${Math.round(t)}`;if(e==="uint")return t>=0?`${Math.round(t)}u`:"0u";if(e==="bool")return t?"true":"false";if(e==="color")return`${this.getType("vec3")}( ${vu(t.r)}, ${vu(t.g)}, ${vu(t.b)} )`;const n=this.getTypeLength(e),i=this.getComponentType(e),r=o=>this.generateConst(i,o);if(n===2)return`${this.getType(e)}( ${r(t.x)}, ${r(t.y)} )`;if(n===3)return`${this.getType(e)}( ${r(t.x)}, ${r(t.y)}, ${r(t.z)} )`;if(n===4)return`${this.getType(e)}( ${r(t.x)}, ${r(t.y)}, ${r(t.z)}, ${r(t.w)} )`;if(n>4&&t&&(t.isMatrix3||t.isMatrix4))return`${this.getType(e)}( ${t.elements.map(r).join(", ")} )`;if(n>4)return`${this.getType(e)}()`;throw new Error(`NodeBuilder: Type '${e}' not found in generate constant attempt.`)}getType(e){return e==="color"?"vec3":e}hasGeometryAttribute(e){return this.geometry&&this.geometry.getAttribute(e)!==void 0}getAttribute(e,t){const n=this.attributes;for(const r of n)if(r.name===e)return r;const i=new M_(e,t);return n.push(i),i}getPropertyName(e){return e.name}isVector(e){return/vec\d/.test(e)}isMatrix(e){return/mat\d/.test(e)}isReference(e){return e==="void"||e==="property"||e==="sampler"||e==="texture"||e==="cubeTexture"||e==="storageTexture"||e==="depthTexture"||e==="texture3D"}needsToWorkingColorSpace(){return!1}getComponentTypeFromTexture(e){const t=e.type;if(e.isDataTexture){if(t===Mn)return"int";if(t===Yt)return"uint"}return"float"}getElementType(e){return e==="mat2"?"vec2":e==="mat3"?"vec3":e==="mat4"?"vec4":this.getComponentType(e)}getComponentType(e){if(e=this.getVectorType(e),e==="float"||e==="bool"||e==="int"||e==="uint")return e;const t=/(b|i|u|)(vec|mat)([2-4])/.exec(e);return t===null?null:t[1]==="b"?"bool":t[1]==="i"?"int":t[1]==="u"?"uint":"float"}getVectorType(e){return e==="color"?"vec3":e==="texture"||e==="cubeTexture"||e==="storageTexture"||e==="texture3D"?"vec4":e}getTypeFromLength(e,t="float"){if(e===1)return t;const n=Kx(e);return(t==="float"?"":t[0])+n}getTypeFromArray(e){return NF.get(e.constructor)}getTypeFromAttribute(e){let t=e;e.isInterleavedBufferAttribute&&(t=e.data);const n=t.array,i=e.itemSize,r=e.normalized;let o;return!(e instanceof Lx)&&r!==!0&&(o=this.getTypeFromArray(n)),this.getTypeFromLength(i,o)}getTypeLength(e){const t=this.getVectorType(e),n=/vec([2-4])/.exec(t);return n!==null?Number(n[1]):t==="float"||t==="bool"||t==="int"||t==="uint"?1:/mat2/.test(e)===!0?4:/mat3/.test(e)===!0?9:/mat4/.test(e)===!0?16:0}getVectorFromMatrix(e){return e.replace("mat","vec")}changeComponentType(e,t){return this.getTypeFromLength(this.getTypeLength(e),t)}getIntegerType(e){const t=this.getComponentType(e);return t==="int"||t==="uint"?e:this.changeComponentType(e,"int")}addStack(){return this.stack=Uu(this.stack),this.stacks.push(bp()||this.stack),sl(this.stack),this.stack}removeStack(){const e=this.stack;return this.stack=e.parent,sl(this.stacks.pop()),e}getDataFromNode(e,t=this.shaderStage,n=null){n=n===null?e.isGlobal(this)?this.globalCache:this.cache:n;let i=n.getData(e);return i===void 0&&(i={},n.setData(e,i)),i[t]===void 0&&(i[t]={}),i[t]}getNodeProperties(e,t="any"){const n=this.getDataFromNode(e,t);return n.properties||(n.properties={outputNode:null})}getBufferAttributeFromNode(e,t){const n=this.getDataFromNode(e);let i=n.bufferAttribute;if(i===void 0){const r=this.uniforms.index++;i=new M_("nodeAttribute"+r,t,e),this.bufferAttributes.push(i),n.bufferAttribute=i}return i}getStructTypeFromNode(e,t,n=this.shaderStage){const i=this.getDataFromNode(e,n);let r=i.structType;if(r===void 0){const o=this.structs.index++;r=new lF("StructType"+o,t),this.structs[n].push(r),i.structType=r}return r}getUniformFromNode(e,t,n=this.shaderStage,i=null){const r=this.getDataFromNode(e,n,this.globalCache);let o=r.uniform;if(o===void 0){const a=this.uniforms.index++;o=new rF(i||"nodeUniform"+a,t,e),this.uniforms[n].push(o),r.uniform=o}return o}getVarFromNode(e,t=null,n=e.getNodeType(this),i=this.shaderStage){const r=this.getDataFromNode(e,i);let o=r.variable;if(o===void 0){const a=this.vars[i]||(this.vars[i]=[]);t===null&&(t="nodeVar"+a.length),o=new uS(t,n),a.push(o),r.variable=o}return o}getVaryingFromNode(e,t=null,n=e.getNodeType(this)){const i=this.getDataFromNode(e,"any");let r=i.varying;if(r===void 0){const o=this.varyings,a=o.length;t===null&&(t="nodeVarying"+a),r=new oF(t,n),o.push(r),i.varying=r}return r}getCodeFromNode(e,t,n=this.shaderStage){const i=this.getDataFromNode(e);let r=i.code;if(r===void 0){const o=this.codes[n]||(this.codes[n]=[]),a=o.length;r=new aF("nodeCode"+a,t),o.push(r),i.code=r}return r}addFlowCodeHierarchy(e,t){const{flowCodes:n,flowCodeBlock:i}=this.getDataFromNode(e);let r=!0,o=t;for(;o;){if(i.get(o)===!0){r=!1;break}o=this.getDataFromNode(o).parentNodeBlock}if(r)for(const a of n)this.addLineFlowCode(a)}addLineFlowCodeBlock(e,t,n){const i=this.getDataFromNode(e),r=i.flowCodes||(i.flowCodes=[]),o=i.flowCodeBlock||(i.flowCodeBlock=new WeakMap);r.push(t),o.set(n,!0)}addLineFlowCode(e,t=null){return e===""?this:(t!==null&&this.context.nodeBlock&&this.addLineFlowCodeBlock(t,e,this.context.nodeBlock),e=this.tab+e,/;\s*$/.test(e)||(e=e+`;
`),this.flow.code+=e,this)}addFlowCode(e){return this.flow.code+=e,this}addFlowTab(){return this.tab+="	",this}removeFlowTab(){return this.tab=this.tab.slice(0,-1),this}getFlowData(e){return this.flowsData.get(e)}flowNode(e){const t=e.getNodeType(this),n=this.flowChildNode(e,t);return this.flowsData.set(e,n),n}buildFunctionNode(e){const t=new GT,n=this.currentFunctionNode;return this.currentFunctionNode=t,t.code=this.buildFunctionCode(e),this.currentFunctionNode=n,t}flowShaderNode(e){const t=e.layout,n={[Symbol.iterator](){let o=0;const a=Object.values(this);return{next:()=>({value:a[o],done:o++>=a.length})}}};for(const o of t.inputs)n[o.name]=new xT(o.type,o.name);e.layout=null;const i=e.call(n),r=this.flowStagesNode(i,t.type);return e.layout=t,r}flowStagesNode(e,t=null){const n=this.flow,i=this.vars,r=this.cache,o=this.buildStage,a=this.stack,c={code:""};this.flow=c,this.vars={},this.cache=new Fd,this.stack=Uu();for(const l of uf)this.setBuildStage(l),c.result=e.build(this,t);return c.vars=this.getVars(this.shaderStage),this.flow=n,this.vars=i,this.cache=r,this.stack=a,this.setBuildStage(o),c}getFunctionOperator(){return null}flowChildNode(e,t=null){const n=this.flow,i={code:""};return this.flow=i,i.result=e.build(this,t),this.flow=n,i}flowNodeFromShaderStage(e,t,n=null,i=null){const r=this.shaderStage;this.setShaderStage(e);const o=this.flowChildNode(t,n);return i!==null&&(o.code+=`${this.tab+i} = ${o.result};
`),this.flowCode[e]=this.flowCode[e]+o.code,this.setShaderStage(r),o}getAttributesArray(){return this.attributes.concat(this.bufferAttributes)}getAttributes(){console.warn("Abstract function.")}getVaryings(){console.warn("Abstract function.")}getVar(e,t){return`${this.getType(e)} ${t}`}getVars(e){let t="";const n=this.vars[e];if(n!==void 0)for(const i of n)t+=`${this.getVar(i.type,i.name)}; `;return t}getUniforms(){console.warn("Abstract function.")}getCodes(e){const t=this.codes[e];let n="";if(t!==void 0)for(const i of t)n+=i.code+`
`;return n}getHash(){return this.vertexShader+this.fragmentShader+this.computeShader}setShaderStage(e){this.shaderStage=e}getShaderStage(){return this.shaderStage}setBuildStage(e){this.buildStage=e}getBuildStage(){return this.buildStage}buildCode(){console.warn("Abstract function.")}build(){const{object:e,material:t,renderer:n}=this;if(t!==null){let i=n.library.fromMaterial(t);i===null&&(console.error(`NodeMaterial: Material "${t.type}" is not compatible.`),i=new tn),i.build(this)}else this.addFlow("compute",e);for(const i of uf){this.setBuildStage(i),this.context.vertex&&this.context.vertex.isNode&&this.flowNodeFromShaderStage("vertex",this.context.vertex);for(const r of hf){this.setShaderStage(r);const o=this.flowNodes[r];for(const a of o)i==="generate"?this.flowNode(a):a.build(this)}}return this.setBuildStage(null),this.setShaderStage(null),this.buildCode(),this.buildUpdateNodes(),this}getNodeUniform(e,t){if(t==="float"||t==="int"||t==="uint")return new _F(e);if(t==="vec2"||t==="ivec2"||t==="uvec2")return new xF(e);if(t==="vec3"||t==="ivec3"||t==="uvec3")return new yF(e);if(t==="vec4"||t==="ivec4"||t==="uvec4")return new vF(e);if(t==="color")return new TF(e);if(t==="mat3")return new SF(e);if(t==="mat4")return new bF(e);throw new Error(`Uniform "${t}" not declared.`)}format(e,t,n){if(t=this.getVectorType(t),n=this.getVectorType(n),t===n||n===null||this.isReference(n))return e;const i=this.getTypeLength(t),r=this.getTypeLength(n);return i===16&&r===9?`${this.getType(n)}(${e}[0].xyz, ${e}[1].xyz, ${e}[2].xyz)`:i===9&&r===4?`${this.getType(n)}(${e}[0].xy, ${e}[1].xy)`:i>4||r>4||r===0?e:i===r?`${this.getType(n)}( ${e} )`:i>r?this.format(`${e}.${"xyz".slice(0,r)}`,this.getTypeFromLength(r,this.getComponentType(t)),n):r===4&&i>1?`${this.getType(n)}( ${this.format(e,t,"vec3")}, 1.0 )`:i===2?`${this.getType(n)}( ${this.format(e,t,"vec2")}, 0.0 )`:(i===1&&r>1&&t!==this.getComponentType(n)&&(e=`${this.getType(this.getComponentType(n))}( ${e} )`),`${this.getType(n)}( ${e} )`)}getSignature(){return`// Three.js r${yl} - Node System
`}createNodeMaterial(e="NodeMaterial"){throw new Error(`THREE.NodeBuilder: createNodeMaterial() was deprecated. Use new ${e}() instead.`)}}class D_{constructor(){this.time=0,this.deltaTime=0,this.frameId=0,this.renderId=0,this.updateMap=new WeakMap,this.updateBeforeMap=new WeakMap,this.updateAfterMap=new WeakMap,this.renderer=null,this.material=null,this.camera=null,this.object=null,this.scene=null}_getMaps(e,t){let n=e.get(t);return n===void 0&&(n={renderMap:new WeakMap,frameMap:new WeakMap},e.set(t,n)),n}updateBeforeNode(e){const t=e.getUpdateBeforeType(),n=e.updateReference(this);if(t===Ye.FRAME){const{frameMap:i}=this._getMaps(this.updateBeforeMap,n);i.get(n)!==this.frameId&&e.updateBefore(this)!==!1&&i.set(n,this.frameId)}else if(t===Ye.RENDER){const{renderMap:i}=this._getMaps(this.updateBeforeMap,n);i.get(n)!==this.renderId&&e.updateBefore(this)!==!1&&i.set(n,this.renderId)}else t===Ye.OBJECT&&e.updateBefore(this)}updateAfterNode(e){const t=e.getUpdateAfterType(),n=e.updateReference(this);if(t===Ye.FRAME){const{frameMap:i}=this._getMaps(this.updateAfterMap,n);i.get(n)!==this.frameId&&e.updateAfter(this)!==!1&&i.set(n,this.frameId)}else if(t===Ye.RENDER){const{renderMap:i}=this._getMaps(this.updateAfterMap,n);i.get(n)!==this.renderId&&e.updateAfter(this)!==!1&&i.set(n,this.renderId)}else t===Ye.OBJECT&&e.updateAfter(this)}updateNode(e){const t=e.getUpdateType(),n=e.updateReference(this);if(t===Ye.FRAME){const{frameMap:i}=this._getMaps(this.updateMap,n);i.get(n)!==this.frameId&&e.update(this)!==!1&&i.set(n,this.frameId)}else if(t===Ye.RENDER){const{renderMap:i}=this._getMaps(this.updateMap,n);i.get(n)!==this.renderId&&e.update(this)!==!1&&i.set(n,this.renderId)}else t===Ye.OBJECT&&e.update(this)}update(){this.frameId++,this.lastTime===void 0&&(this.lastTime=performance.now()),this.deltaTime=(performance.now()-this.lastTime)/1e3,this.lastTime=performance.now(),this.time+=this.deltaTime}}class Cm{constructor(e,t,n=null,i="",r=!1){this.type=e,this.name=t,this.count=n,this.qualifier=i,this.isConst=r}}Cm.isNodeFunctionInput=!0;class CF extends Co{static get type(){return"DirectionalLightNode"}constructor(e=null){super(e)}setup(e){super.setup(e);const t=e.context.lightingModel,n=this.colorNode,i=Sm(this.light),r=e.context.reflectedLight;t.direct({lightDirection:i,lightColor:n,reflectedLight:r},e.stack,e)}}const kd=new ut,Tu=new ut;let bc=null;class PF extends Co{static get type(){return"RectAreaLightNode"}constructor(e=null){super(e),this.halfHeight=Ie(new U).setGroup(ke),this.halfWidth=Ie(new U).setGroup(ke),this.updateType=Ye.RENDER}update(e){super.update(e);const{light:t}=this,n=e.camera.matrixWorldInverse;Tu.identity(),kd.copy(t.matrixWorld),kd.premultiply(n),Tu.extractRotation(kd),this.halfWidth.value.set(t.width*.5,0,0),this.halfHeight.value.set(0,t.height*.5,0),this.halfWidth.value.applyMatrix4(Tu),this.halfHeight.value.applyMatrix4(Tu)}setup(e){super.setup(e);let t,n;e.isAvailable("float32Filterable")?(t=ht(bc.LTC_FLOAT_1),n=ht(bc.LTC_FLOAT_2)):(t=ht(bc.LTC_HALF_1),n=ht(bc.LTC_HALF_2));const{colorNode:i,light:r}=this,o=e.context.lightingModel,a=Oh(r),c=e.context.reflectedLight;o.directRectArea({lightColor:i,lightPosition:a,halfWidth:this.halfWidth,halfHeight:this.halfHeight,reflectedLight:c,ltc_1:t,ltc_2:n},e.stack,e)}static setLTC(e){bc=e}}class dS extends Co{static get type(){return"SpotLightNode"}constructor(e=null){super(e),this.coneCosNode=Ie(0).setGroup(ke),this.penumbraCosNode=Ie(0).setGroup(ke),this.cutoffDistanceNode=Ie(0).setGroup(ke),this.decayExponentNode=Ie(0).setGroup(ke)}update(e){super.update(e);const{light:t}=this;this.coneCosNode.value=Math.cos(t.angle),this.penumbraCosNode.value=Math.cos(t.angle*(1-t.penumbra)),this.cutoffDistanceNode.value=t.distance,this.decayExponentNode.value=t.decay}getSpotAttenuation(e){const{coneCosNode:t,penumbraCosNode:n}=this;return Ks(t,n,e)}setup(e){super.setup(e);const t=e.context.lightingModel,{colorNode:n,cutoffDistanceNode:i,decayExponentNode:r,light:o}=this,a=Oh(o).sub(on),c=a.normalize(),l=c.dot(Sm(o)),u=this.getSpotAttenuation(l),h=a.length(),d=Em({lightDistance:h,cutoffDistance:i,decayExponent:r});let f=n.mul(u).mul(d);if(o.map){const _=WT(o),g=ht(o.map,_.xy).onRenderUpdate(()=>o.map);f=_.mul(2).sub(1).abs().lessThan(1).all().select(f.mul(g),f)}const m=e.context.reflectedLight;t.direct({lightDirection:c,lightColor:f,reflectedLight:m},e.stack,e)}}class DF extends dS{static get type(){return"IESSpotLightNode"}getSpotAttenuation(e){const t=this.light.iesMap;let n=null;if(t&&t.isTexture===!0){const i=e.acos().mul(1/Math.PI);n=ht(t,se(i,0),0).r}else n=super.getSpotAttenuation(e);return n}}class LF extends Co{static get type(){return"AmbientLightNode"}constructor(e=null){super(e)}setup({context:e}){e.irradiance.addAssign(this.colorNode)}}class UF extends Co{static get type(){return"HemisphereLightNode"}constructor(e=null){super(e),this.lightPositionNode=Tm(e),this.lightDirectionNode=this.lightPositionNode.normalize(),this.groundColorNode=Ie(new De).setGroup(ke)}update(e){const{light:t}=this;super.update(e),this.lightPositionNode.object3d=t,this.groundColorNode.value.copy(t.groundColor).multiplyScalar(t.intensity)}setup(e){const{colorNode:t,groundColorNode:n,lightDirectionNode:i}=this,o=Oi.dot(i).mul(.5).add(.5),a=Mt(n,t,o);e.context.irradiance.addAssign(a)}}class IF extends Co{static get type(){return"LightProbeNode"}constructor(e=null){super(e);const t=[];for(let n=0;n<9;n++)t.push(new U);this.lightProbe=zs(t)}update(e){const{light:t}=this;super.update(e);for(let n=0;n<9;n++)this.lightProbe.array[n].copy(t.sh.coefficients[n]).multiplyScalar(t.intensity)}setup(e){const t=lS(wh,this.lightProbe);e.context.irradiance.addAssign(t)}}class fS{parseFunction(){console.warn("Abstract function.")}}class Pm{constructor(e,t,n="",i=""){this.type=e,this.inputs=t,this.name=n,this.precision=i}getCode(){console.warn("Abstract function.")}}Pm.isNodeFunction=!0;const FF=/^\s*(highp|mediump|lowp)?\s*([a-z_0-9]+)\s*([a-z_0-9]+)?\s*\(([\s\S]*?)\)/i,BF=/[a-z_0-9]+/ig,L_="#pragma main",OF=s=>{s=s.trim();const e=s.indexOf(L_),t=e!==-1?s.slice(e+L_.length):s,n=t.match(FF);if(n!==null&&n.length===5){const i=n[4],r=[];let o=null;for(;(o=BF.exec(i))!==null;)r.push(o);const a=[];let c=0;for(;c<r.length;){const m=r[c][0]==="const";m===!0&&c++;let _=r[c][0];_==="in"||_==="out"||_==="inout"?c++:_="";const g=r[c++][0];let p=Number.parseInt(r[c][0]);Number.isNaN(p)===!1?c++:p=null;const T=r[c++][0];a.push(new Cm(g,T,p,_,m))}const l=t.substring(n[0].length),u=n[3]!==void 0?n[3]:"",h=n[2],d=n[1]!==void 0?n[1]:"",f=e!==-1?s.slice(0,e):"";return{type:h,inputs:a,name:u,precision:d,inputsCode:i,blockCode:l,headerCode:f}}else throw new Error("FunctionNode: Function is not a GLSL code.")};class VF extends Pm{constructor(e){const{type:t,inputs:n,name:i,precision:r,inputsCode:o,blockCode:a,headerCode:c}=OF(e);super(t,n,i,r),this.inputsCode=o,this.blockCode=a,this.headerCode=c}getCode(e=this.name){let t;const n=this.blockCode;if(n!==""){const{type:i,inputsCode:r,headerCode:o,precision:a}=this;let c=`${i} ${e} ( ${r.trim()} )`;a!==""&&(c=`${a} ${c}`),t=o+c+n}else t="";return t}}class GF extends fS{parseFunction(e){return new VF(e)}}const U_=new WeakMap;class zF extends Lr{constructor(e,t){super(),this.renderer=e,this.backend=t,this.nodeFrame=new D_,this.nodeBuilderCache=new Map,this.callHashCache=new bs,this.groupsData=new bs,this.cacheLib={}}updateGroup(e){const t=e.groupNode,n=t.name;if(n===Ap.name)return!0;if(n===ke.name){const o=this.get(e),a=this.nodeFrame.renderId;return o.renderId!==a?(o.renderId=a,!0):!1}if(n===Ty.name){const o=this.get(e),a=this.nodeFrame.frameId;return o.frameId!==a?(o.frameId=a,!0):!1}const i=[t,e];let r=this.groupsData.get(i);return r===void 0&&this.groupsData.set(i,r={}),r.version!==t.version?(r.version=t.version,!0):!1}getForRenderCacheKey(e){return e.initialCacheKey}getForRender(e){const t=this.get(e);let n=t.nodeBuilderState;if(n===void 0){const{nodeBuilderCache:i}=this,r=this.getForRenderCacheKey(e);if(n=i.get(r),n===void 0){const o=this.backend.createNodeBuilder(e.object,this.renderer);o.scene=e.scene,o.material=e.material,o.camera=e.camera,o.context.material=e.material,o.lightsNode=e.lightsNode,o.environmentNode=this.getEnvironmentNode(e.scene),o.fogNode=this.getFogNode(e.scene),o.clippingContext=e.clippingContext,o.build(),n=this._createNodeBuilderState(o),i.set(r,n)}n.usedTimes++,t.nodeBuilderState=n}return n}delete(e){if(e.isRenderObject){const t=this.get(e).nodeBuilderState;t.usedTimes--,t.usedTimes===0&&this.nodeBuilderCache.delete(this.getForRenderCacheKey(e))}return super.delete(e)}getForCompute(e){const t=this.get(e);let n=t.nodeBuilderState;if(n===void 0){const i=this.backend.createNodeBuilder(e,this.renderer);i.build(),n=this._createNodeBuilderState(i),t.nodeBuilderState=n}return n}_createNodeBuilderState(e){return new sF(e.vertexShader,e.fragmentShader,e.computeShader,e.getAttributesArray(),e.getBindings(),e.updateNodes,e.updateBeforeNodes,e.updateAfterNodes,e.monitor,e.transforms)}getEnvironmentNode(e){this.updateEnvironment(e);let t=null;if(e.environmentNode&&e.environmentNode.isNode)t=e.environmentNode;else{const n=this.get(e);n.environmentNode&&(t=n.environmentNode)}return t}getBackgroundNode(e){this.updateBackground(e);let t=null;if(e.backgroundNode&&e.backgroundNode.isNode)t=e.backgroundNode;else{const n=this.get(e);n.backgroundNode&&(t=n.backgroundNode)}return t}getFogNode(e){return this.updateFog(e),e.fogNode||this.get(e).fogNode||null}getCacheKey(e,t){const n=[e,t],i=this.renderer.info.calls;let r=this.callHashCache.get(n);if(r===void 0||r.callId!==i){const o=this.getEnvironmentNode(e),a=this.getFogNode(e),c=[];t&&c.push(t.getCacheKey(!0)),o&&c.push(o.getCacheKey()),a&&c.push(a.getCacheKey()),c.push(this.renderer.shadowMap.enabled?1:0),r={callId:i,cacheKey:mh(c)},this.callHashCache.set(n,r)}return r.cacheKey}get isToneMappingState(){return!this.renderer.getRenderTarget()}updateBackground(e){const t=this.get(e),n=e.background;if(n){const i=e.backgroundBlurriness===0&&t.backgroundBlurriness>0||e.backgroundBlurriness>0&&t.backgroundBlurriness===0;if(t.background!==n||i){const r=this.getCacheNode("background",n,()=>{if(n.isCubeTexture===!0||n.mapping===Mr||n.mapping===Er||n.mapping===yo){if(e.backgroundBlurriness>0||n.mapping===yo)return hm(n);{let o;return n.isCubeTexture===!0?o=Za(n):o=ht(n),Z0(o)}}else{if(n.isTexture===!0)return ht(n,Ss.flipY()).setUpdateMatrix(!0);n.isColor!==!0&&console.error("WebGPUNodes: Unsupported background configuration.",n)}},i);t.backgroundNode=r,t.background=n,t.backgroundBlurriness=e.backgroundBlurriness}}else t.backgroundNode&&(delete t.backgroundNode,delete t.background)}getCacheNode(e,t,n,i=!1){const r=this.cacheLib[e]||(this.cacheLib[e]=new WeakMap);let o=r.get(t);return(o===void 0||i)&&(o=n(),r.set(t,o)),o}updateFog(e){const t=this.get(e),n=e.fog;if(n){if(t.fog!==n){const i=this.getCacheNode("fog",n,()=>{if(n.isFogExp2){const r=Ct("color","color",n).setGroup(ke),o=Ct("density","float",n).setGroup(ke);return dl(r,xm(o))}else if(n.isFog){const r=Ct("color","color",n).setGroup(ke),o=Ct("near","float",n).setGroup(ke),a=Ct("far","float",n).setGroup(ke);return dl(r,_m(o,a))}else console.error("THREE.Renderer: Unsupported fog configuration.",n)});t.fogNode=i,t.fog=n}}else delete t.fogNode,delete t.fog}updateEnvironment(e){const t=this.get(e),n=e.environment;if(n){if(t.environment!==n){const i=this.getCacheNode("environment",n,()=>{if(n.isCubeTexture===!0)return Za(n);if(n.isTexture===!0)return ht(n);console.error("Nodes: Unsupported environment configuration.",n)});t.environmentNode=i,t.environment=n}}else t.environmentNode&&(delete t.environmentNode,delete t.environment)}getNodeFrame(e=this.renderer,t=null,n=null,i=null,r=null){const o=this.nodeFrame;return o.renderer=e,o.scene=t,o.object=n,o.camera=i,o.material=r,o}getNodeFrameForRender(e){return this.getNodeFrame(e.renderer,e.scene,e.object,e.camera,e.material)}getOutputCacheKey(){const e=this.renderer;return e.toneMapping+","+e.currentColorSpace}hasOutputChange(e){return U_.get(e)!==this.getOutputCacheKey()}getOutputNode(e){const t=this.renderer,n=this.getOutputCacheKey(),i=ht(e,Ss).renderOutput(t.toneMapping,t.currentColorSpace);return U_.set(e,n),i}updateBefore(e){const t=e.getNodeBuilderState();for(const n of t.updateBeforeNodes)this.getNodeFrameForRender(e).updateBeforeNode(n)}updateAfter(e){const t=e.getNodeBuilderState();for(const n of t.updateAfterNodes)this.getNodeFrameForRender(e).updateAfterNode(n)}updateForCompute(e){const t=this.getNodeFrame(),n=this.getForCompute(e);for(const i of n.updateNodes)t.updateNode(i)}updateForRender(e){const t=this.getNodeFrameForRender(e),n=e.getNodeBuilderState();for(const i of n.updateNodes)t.updateNode(i)}needsRefresh(e){const t=this.getNodeFrameForRender(e);return e.getMonitor().needsRefresh(e,t)}dispose(){super.dispose(),this.nodeFrame=new D_,this.nodeBuilderCache=new Map,this.cacheLib={}}}const Hd=new ei;class nh{constructor(e=null){this.version=0,this.clipIntersection=null,this.cacheKey="",this.shadowPass=!1,this.viewNormalMatrix=new qe,this.clippingGroupContexts=new WeakMap,this.intersectionPlanes=[],this.unionPlanes=[],this.parentVersion=null,e!==null&&(this.viewNormalMatrix=e.viewNormalMatrix,this.clippingGroupContexts=e.clippingGroupContexts,this.shadowPass=e.shadowPass,this.viewMatrix=e.viewMatrix)}projectPlanes(e,t,n){const i=e.length;for(let r=0;r<i;r++){Hd.copy(e[r]).applyMatrix4(this.viewMatrix,this.viewNormalMatrix);const o=t[n+r],a=Hd.normal;o.x=-a.x,o.y=-a.y,o.z=-a.z,o.w=Hd.constant}}updateGlobal(e,t){this.shadowPass=e.overrideMaterial!==null&&e.overrideMaterial.isShadowNodeMaterial,this.viewMatrix=t.matrixWorldInverse,this.viewNormalMatrix.getNormalMatrix(this.viewMatrix)}update(e,t){let n=!1;e.version!==this.parentVersion&&(this.intersectionPlanes=Array.from(e.intersectionPlanes),this.unionPlanes=Array.from(e.unionPlanes),this.parentVersion=e.version),this.clipIntersection!==t.clipIntersection&&(this.clipIntersection=t.clipIntersection,this.clipIntersection?this.unionPlanes.length=e.unionPlanes.length:this.intersectionPlanes.length=e.intersectionPlanes.length);const i=t.clippingPlanes,r=i.length;let o,a;if(this.clipIntersection?(o=this.intersectionPlanes,a=e.intersectionPlanes.length):(o=this.unionPlanes,a=e.unionPlanes.length),o.length!==a+r){o.length=a+r;for(let c=0;c<r;c++)o[a+c]=new je;n=!0}this.projectPlanes(i,o,a),n&&(this.version++,this.cacheKey=`${this.intersectionPlanes.length}:${this.unionPlanes.length}`)}getGroupContext(e){if(this.shadowPass&&!e.clipShadows)return this;let t=this.clippingGroupContexts.get(e);return t===void 0&&(t=new nh(this),this.clippingGroupContexts.set(e,t)),t.update(this,e),t}get unionClippingCount(){return this.unionPlanes.length}}class kF{constructor(e,t){this.bundleGroup=e,this.camera=t}}class HF{constructor(){this.bundles=new bs}get(e,t){const n=this.bundles,i=[e,t];let r=n.get(i);return r===void 0&&(r=new kF(e,t),n.set(i,r)),r}dispose(){this.bundles=new bs}}class pS{constructor(){this.lightNodes=new WeakMap,this.materialNodes=new Map,this.toneMappingNodes=new Map}fromMaterial(e){if(e.isNodeMaterial)return e;let t=null;const n=this.getMaterialNodeClass(e.type);if(n!==null){t=new n;for(const i in e)t[i]=e[i]}return t}addToneMapping(e,t){this.addType(e,t,this.toneMappingNodes)}getToneMappingFunction(e){return this.toneMappingNodes.get(e)||null}getMaterialNodeClass(e){return this.materialNodes.get(e)||null}addMaterial(e,t){this.addType(e,t,this.materialNodes)}getLightNodeClass(e){return this.lightNodes.get(e)||null}addLight(e,t){this.addClass(e,t,this.lightNodes)}addType(e,t,n){if(n.has(t)){console.warn(`Redefinition of node ${t}`);return}if(typeof e!="function")throw new Error(`Node class ${e.name} is not a class.`);if(typeof t=="function"||typeof t=="object")throw new Error(`Base class ${t} is not a class.`);n.set(t,e)}addClass(e,t,n){if(n.has(t)){console.warn(`Redefinition of node ${t.name}`);return}if(typeof e!="function")throw new Error(`Node class ${e.name} is not a class.`);if(typeof t!="function")throw new Error(`Base class ${t.name} is not a class.`);n.set(t,e)}}const WF=new bm;class $F extends bs{constructor(){super()}createNode(e=[]){return new bm().setLights(e)}getNode(e,t){if(e.isQuadMesh)return WF;const n=[e,t];let i=this.get(n);return i===void 0&&(i=this.createNode(),this.set(n,i)),i}}const I_=new dp,Su=new Ee,Wd=new je,$d=new dh,bu=new ut,ar=new je;class XF{constructor(e,t={}){this.isRenderer=!0;const{logarithmicDepthBuffer:n=!1,alpha:i=!0,depth:r=!0,stencil:o=!1,antialias:a=!1,samples:c=0,getFallback:l=null}=t;this.domElement=e.getDomElement(),this.backend=e,this.samples=c||a===!0?4:0,this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.alpha=i,this.logarithmicDepthBuffer=n,this.outputColorSpace=Oe,this.toneMapping=ri,this.toneMappingExposure=1,this.sortObjects=!0,this.depth=r,this.stencil=o,this.info=new JP,this.nodes={modelViewMatrix:null,modelNormalViewMatrix:null},this.library=new pS,this.lighting=new $F,this._getFallback=l,this._pixelRatio=1,this._width=this.domElement.width,this._height=this.domElement.height,this._viewport=new je(0,0,this._width,this._height),this._scissor=new je(0,0,this._width,this._height),this._scissorTest=!1,this._attributes=null,this._geometries=null,this._nodes=null,this._animation=null,this._bindings=null,this._objects=null,this._pipelines=null,this._bundles=null,this._renderLists=null,this._renderContexts=null,this._textures=null,this._background=null,this._quad=new mm(new tn),this._quad.material.name="Renderer_output",this._currentRenderContext=null,this._opaqueSort=null,this._transparentSort=null,this._frameBufferTarget=null;const u=this.alpha===!0?0:1;this._clearColor=new fm(0,0,0,u),this._clearDepth=1,this._clearStencil=0,this._renderTarget=null,this._activeCubeFace=0,this._activeMipmapLevel=0,this._mrt=null,this._renderObjectFunction=null,this._currentRenderObjectFunction=null,this._currentRenderBundle=null,this._handleObjectFunction=this._renderObjectDirect,this._isDeviceLost=!1,this.onDeviceLost=this._onDeviceLost,this._initialized=!1,this._initPromise=null,this._compilationPromises=null,this.transparent=!0,this.opaque=!0,this.shadowMap={enabled:!1,type:If},this.xr={enabled:!1},this.debug={checkShaderErrors:!0,onShaderError:null,getShaderAsync:async(h,d,f)=>{await this.compileAsync(h,d);const m=this._renderLists.get(h,d),_=this._renderContexts.get(h,d,this._renderTarget),g=h.overrideMaterial||f.material,p=this._objects.get(f,g,h,d,m.lightsNode,_,_.clippingContext),{fragmentShader:T,vertexShader:S}=p.getNodeBuilderState();return{fragmentShader:T,vertexShader:S}}}}async init(){if(this._initialized)throw new Error("Renderer: Backend has already been initialized.");return this._initPromise!==null?this._initPromise:(this._initPromise=new Promise(async(e,t)=>{let n=this.backend;try{await n.init(this)}catch(i){if(this._getFallback!==null)try{this.backend=n=this._getFallback(i),await n.init(this)}catch(r){t(r);return}else{t(i);return}}this._nodes=new zF(this,n),this._animation=new HP(this._nodes,this.info),this._attributes=new KP(n),this._background=new nF(this,this._nodes),this._geometries=new QP(this._attributes,this.info),this._textures=new dD(this,n,this.info),this._pipelines=new iD(n,this._nodes),this._bindings=new sD(n,this._nodes,this._textures,this._attributes,this._pipelines,this.info),this._objects=new qP(this,this._nodes,this._geometries,this._pipelines,this._bindings,this.info),this._renderLists=new aD(this.lighting),this._bundles=new HF,this._renderContexts=new uD,this._animation.start(),this._initialized=!0,e()}),this._initPromise)}get coordinateSystem(){return this.backend.coordinateSystem}async compileAsync(e,t,n=null){if(this._isDeviceLost===!0)return;this._initialized===!1&&await this.init();const i=this._nodes.nodeFrame,r=i.renderId,o=this._currentRenderContext,a=this._currentRenderObjectFunction,c=this._compilationPromises,l=e.isScene===!0?e:I_;n===null&&(n=e);const u=this._renderTarget,h=this._renderContexts.get(n,t,u),d=this._activeMipmapLevel,f=[];this._currentRenderContext=h,this._currentRenderObjectFunction=this.renderObject,this._handleObjectFunction=this._createObjectPipeline,this._compilationPromises=f,i.renderId++,i.update(),h.depth=this.depth,h.stencil=this.stencil,h.clippingContext||(h.clippingContext=new nh),h.clippingContext.updateGlobal(l,t),l.onBeforeRender(this,e,t,u);const m=this._renderLists.get(e,t);if(m.begin(),this._projectObject(e,t,0,m,h.clippingContext),n!==e&&n.traverseVisible(function(S){S.isLight&&S.layers.test(t.layers)&&m.pushLight(S)}),m.finish(),u!==null){this._textures.updateRenderTarget(u,d);const S=this._textures.get(u);h.textures=S.textures,h.depthTexture=S.depthTexture}else h.textures=null,h.depthTexture=null;this._background.update(l,m,h);const _=m.opaque,g=m.transparent,p=m.transparentDoublePass,T=m.lightsNode;this.opaque===!0&&_.length>0&&this._renderObjects(_,t,l,T),this.transparent===!0&&g.length>0&&this._renderTransparents(g,p,t,l,T),i.renderId=r,this._currentRenderContext=o,this._currentRenderObjectFunction=a,this._compilationPromises=c,this._handleObjectFunction=this._renderObjectDirect,await Promise.all(f)}async renderAsync(e,t){this._initialized===!1&&await this.init();const n=this._renderScene(e,t);await this.backend.resolveTimestampAsync(n,"render")}async waitForGPU(){await this.backend.waitForGPU()}setMRT(e){return this._mrt=e,this}getMRT(){return this._mrt}_onDeviceLost(e){let t=`THREE.WebGPURenderer: ${e.api} Device Lost:

Message: ${e.message}`;e.reason&&(t+=`
Reason: ${e.reason}`),console.error(t),this._isDeviceLost=!0}_renderBundle(e,t,n){const{bundleGroup:i,camera:r,renderList:o}=e,a=this._currentRenderContext,c=this._bundles.get(i,r),l=this.backend.get(c);l.renderContexts===void 0&&(l.renderContexts=new Set);const u=i.version!==l.version,h=l.renderContexts.has(a)===!1||u;if(l.renderContexts.add(a),h){this.backend.beginBundle(a),(l.renderObjects===void 0||u)&&(l.renderObjects=[]),this._currentRenderBundle=c;const d=o.opaque;this.opaque===!0&&d.length>0&&this._renderObjects(d,r,t,n),this._currentRenderBundle=null,this.backend.finishBundle(a,c),l.version=i.version}else{const{renderObjects:d}=l;for(let f=0,m=d.length;f<m;f++){const _=d[f];this._nodes.needsRefresh(_)&&(this._nodes.updateBefore(_),this._nodes.updateForRender(_),this._bindings.updateForRender(_),this._nodes.updateAfter(_))}}this.backend.addBundle(a,c)}render(e,t){if(this._initialized===!1)return console.warn("THREE.Renderer: .render() called before the backend is initialized. Try using .renderAsync() instead."),this.renderAsync(e,t);this._renderScene(e,t)}_getFrameBufferTarget(){const{currentToneMapping:e,currentColorSpace:t}=this;if(e!==ri===!1&&t!==bi===!1)return null;const{width:r,height:o}=this.getDrawingBufferSize(Su),{depth:a,stencil:c}=this;let l=this._frameBufferTarget;return l===null&&(l=new Cr(r,o,{depthBuffer:a,stencilBuffer:c,type:zn,format:Nn,colorSpace:bi,generateMipmaps:!1,minFilter:yn,magFilter:yn,samples:this.samples}),l.isPostProcessingRenderTarget=!0,this._frameBufferTarget=l),l.depthBuffer=a,l.stencilBuffer=c,l.setSize(r,o),l.viewport.copy(this._viewport),l.scissor.copy(this._scissor),l.viewport.multiplyScalar(this._pixelRatio),l.scissor.multiplyScalar(this._pixelRatio),l.scissorTest=this._scissorTest,l}_renderScene(e,t,n=!0){if(this._isDeviceLost===!0)return;const i=n?this._getFrameBufferTarget():null,r=this._nodes.nodeFrame,o=r.renderId,a=this._currentRenderContext,c=this._currentRenderObjectFunction,l=e.isScene===!0?e:I_,u=this._renderTarget,h=this._activeCubeFace,d=this._activeMipmapLevel;let f;i!==null?(f=i,this.setRenderTarget(f)):f=u;const m=this._renderContexts.get(e,t,f);this._currentRenderContext=m,this._currentRenderObjectFunction=this._renderObjectFunction||this.renderObject,this.info.calls++,this.info.render.calls++,this.info.render.frameCalls++,r.renderId=this.info.calls;const _=this.coordinateSystem;t.coordinateSystem!==_&&(t.coordinateSystem=_,t.updateProjectionMatrix()),e.matrixWorldAutoUpdate===!0&&e.updateMatrixWorld(),t.parent===null&&t.matrixWorldAutoUpdate===!0&&t.updateMatrixWorld();let g=this._viewport,p=this._scissor,T=this._pixelRatio;f!==null&&(g=f.viewport,p=f.scissor,T=1),this.getDrawingBufferSize(Su),Wd.set(0,0,Su.width,Su.height);const S=g.minDepth===void 0?0:g.minDepth,v=g.maxDepth===void 0?1:g.maxDepth;m.viewportValue.copy(g).multiplyScalar(T).floor(),m.viewportValue.width>>=d,m.viewportValue.height>>=d,m.viewportValue.minDepth=S,m.viewportValue.maxDepth=v,m.viewport=m.viewportValue.equals(Wd)===!1,m.scissorValue.copy(p).multiplyScalar(T).floor(),m.scissor=this._scissorTest&&m.scissorValue.equals(Wd)===!1,m.scissorValue.width>>=d,m.scissorValue.height>>=d,m.clippingContext||(m.clippingContext=new nh),m.clippingContext.updateGlobal(l,t),l.onBeforeRender(this,e,t,f),bu.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),$d.setFromProjectionMatrix(bu,_);const P=this._renderLists.get(e,t);if(P.begin(),this._projectObject(e,t,0,P,m.clippingContext),P.finish(),this.sortObjects===!0&&P.sort(this._opaqueSort,this._transparentSort),f!==null){this._textures.updateRenderTarget(f,d);const D=this._textures.get(f);m.textures=D.textures,m.depthTexture=D.depthTexture,m.width=D.width,m.height=D.height,m.renderTarget=f,m.depth=f.depthBuffer,m.stencil=f.stencilBuffer}else m.textures=null,m.depthTexture=null,m.width=this.domElement.width,m.height=this.domElement.height,m.depth=this.depth,m.stencil=this.stencil;m.width>>=d,m.height>>=d,m.activeCubeFace=h,m.activeMipmapLevel=d,m.occlusionQueryCount=P.occlusionQueryCount,this._background.update(l,P,m),this.backend.beginRender(m);const{bundles:N,lightsNode:w,transparentDoublePass:F,transparent:E,opaque:M}=P;if(N.length>0&&this._renderBundles(N,l,w),this.opaque===!0&&M.length>0&&this._renderObjects(M,t,l,w),this.transparent===!0&&E.length>0&&this._renderTransparents(E,F,t,l,w),this.backend.finishRender(m),r.renderId=o,this._currentRenderContext=a,this._currentRenderObjectFunction=c,i!==null){this.setRenderTarget(u,h,d);const D=this._quad;this._nodes.hasOutputChange(f.texture)&&(D.material.fragmentNode=this._nodes.getOutputNode(f.texture),D.material.needsUpdate=!0),this._renderScene(D,D.camera,!1)}return l.onAfterRender(this,e,t,f),m}getMaxAnisotropy(){return this.backend.getMaxAnisotropy()}getActiveCubeFace(){return this._activeCubeFace}getActiveMipmapLevel(){return this._activeMipmapLevel}async setAnimationLoop(e){this._initialized===!1&&await this.init(),this._animation.setAnimationLoop(e)}async getArrayBufferAsync(e){return await this.backend.getArrayBufferAsync(e)}getContext(){return this.backend.getContext()}getPixelRatio(){return this._pixelRatio}getDrawingBufferSize(e){return e.set(this._width*this._pixelRatio,this._height*this._pixelRatio).floor()}getSize(e){return e.set(this._width,this._height)}setPixelRatio(e=1){this._pixelRatio!==e&&(this._pixelRatio=e,this.setSize(this._width,this._height,!1))}setDrawingBufferSize(e,t,n){this._width=e,this._height=t,this._pixelRatio=n,this.domElement.width=Math.floor(e*n),this.domElement.height=Math.floor(t*n),this.setViewport(0,0,e,t),this._initialized&&this.backend.updateSize()}setSize(e,t,n=!0){this._width=e,this._height=t,this.domElement.width=Math.floor(e*this._pixelRatio),this.domElement.height=Math.floor(t*this._pixelRatio),n===!0&&(this.domElement.style.width=e+"px",this.domElement.style.height=t+"px"),this.setViewport(0,0,e,t),this._initialized&&this.backend.updateSize()}setOpaqueSort(e){this._opaqueSort=e}setTransparentSort(e){this._transparentSort=e}getScissor(e){const t=this._scissor;return e.x=t.x,e.y=t.y,e.width=t.width,e.height=t.height,e}setScissor(e,t,n,i){const r=this._scissor;e.isVector4?r.copy(e):r.set(e,t,n,i)}getScissorTest(){return this._scissorTest}setScissorTest(e){this._scissorTest=e,this.backend.setScissorTest(e)}getViewport(e){return e.copy(this._viewport)}setViewport(e,t,n,i,r=0,o=1){const a=this._viewport;e.isVector4?a.copy(e):a.set(e,t,n,i),a.minDepth=r,a.maxDepth=o}getClearColor(e){return e.copy(this._clearColor)}setClearColor(e,t=1){this._clearColor.set(e),this._clearColor.a=t}getClearAlpha(){return this._clearColor.a}setClearAlpha(e){this._clearColor.a=e}getClearDepth(){return this._clearDepth}setClearDepth(e){this._clearDepth=e}getClearStencil(){return this._clearStencil}setClearStencil(e){this._clearStencil=e}isOccluded(e){const t=this._currentRenderContext;return t&&this.backend.isOccluded(t,e)}clear(e=!0,t=!0,n=!0){if(this._initialized===!1)return console.warn("THREE.Renderer: .clear() called before the backend is initialized. Try using .clearAsync() instead."),this.clearAsync(e,t,n);const i=this._renderTarget||this._getFrameBufferTarget();let r=null;if(i!==null){this._textures.updateRenderTarget(i);const o=this._textures.get(i);r=this._renderContexts.get(null,null,i),r.textures=o.textures,r.depthTexture=o.depthTexture,r.width=o.width,r.height=o.height,r.renderTarget=i,r.depth=i.depthBuffer,r.stencil=i.stencilBuffer}if(this.backend.clear(e,t,n,r),i!==null&&this._renderTarget===null){const o=this._quad;this._nodes.hasOutputChange(i.texture)&&(o.material.fragmentNode=this._nodes.getOutputNode(i.texture),o.material.needsUpdate=!0),this._renderScene(o,o.camera,!1)}}clearColor(){return this.clear(!0,!1,!1)}clearDepth(){return this.clear(!1,!0,!1)}clearStencil(){return this.clear(!1,!1,!0)}async clearAsync(e=!0,t=!0,n=!0){this._initialized===!1&&await this.init(),this.clear(e,t,n)}async clearColorAsync(){this.clearAsync(!0,!1,!1)}async clearDepthAsync(){this.clearAsync(!1,!0,!1)}async clearStencilAsync(){this.clearAsync(!1,!1,!0)}get currentToneMapping(){return this._renderTarget!==null?ri:this.toneMapping}get currentColorSpace(){return this._renderTarget!==null?bi:this.outputColorSpace}dispose(){this.info.dispose(),this.backend.dispose(),this._animation.dispose(),this._objects.dispose(),this._pipelines.dispose(),this._nodes.dispose(),this._bindings.dispose(),this._renderLists.dispose(),this._renderContexts.dispose(),this._textures.dispose(),this.setRenderTarget(null),this.setAnimationLoop(null)}setRenderTarget(e,t=0,n=0){this._renderTarget=e,this._activeCubeFace=t,this._activeMipmapLevel=n}getRenderTarget(){return this._renderTarget}setRenderObjectFunction(e){this._renderObjectFunction=e}getRenderObjectFunction(){return this._renderObjectFunction}compute(e){if(this.isDeviceLost===!0)return;if(this._initialized===!1)return console.warn("THREE.Renderer: .compute() called before the backend is initialized. Try using .computeAsync() instead."),this.computeAsync(e);const t=this._nodes.nodeFrame,n=t.renderId;this.info.calls++,this.info.compute.calls++,this.info.compute.frameCalls++,t.renderId=this.info.calls;const i=this.backend,r=this._pipelines,o=this._bindings,a=this._nodes,c=Array.isArray(e)?e:[e];if(c[0]===void 0||c[0].isComputeNode!==!0)throw new Error("THREE.Renderer: .compute() expects a ComputeNode.");i.beginCompute(e);for(const l of c){if(r.has(l)===!1){const d=()=>{l.removeEventListener("dispose",d),r.delete(l),o.delete(l),a.delete(l)};l.addEventListener("dispose",d);const f=l.onInitFunction;f!==null&&f.call(l,{renderer:this})}a.updateForCompute(l),o.updateForCompute(l);const u=o.getForCompute(l),h=r.getForCompute(l,u);i.compute(e,l,u,h)}i.finishCompute(e),t.renderId=n}async computeAsync(e){this._initialized===!1&&await this.init(),this.compute(e),await this.backend.resolveTimestampAsync(e,"compute")}async hasFeatureAsync(e){return this._initialized===!1&&await this.init(),this.backend.hasFeature(e)}hasFeature(e){return this._initialized===!1?(console.warn("THREE.Renderer: .hasFeature() called before the backend is initialized. Try using .hasFeatureAsync() instead."),!1):this.backend.hasFeature(e)}hasInitialized(){return this._initialized}async initTextureAsync(e){this._initialized===!1&&await this.init(),this._textures.updateTexture(e)}initTexture(e){this._initialized===!1&&console.warn("THREE.Renderer: .initTexture() called before the backend is initialized. Try using .initTextureAsync() instead."),this._textures.updateTexture(e)}copyFramebufferToTexture(e,t=null){if(t!==null)if(t.isVector2)t=ar.set(t.x,t.y,e.image.width,e.image.height).floor();else if(t.isVector4)t=ar.copy(t).floor();else{console.error("THREE.Renderer.copyFramebufferToTexture: Invalid rectangle.");return}else t=ar.set(0,0,e.image.width,e.image.height);let n=this._currentRenderContext,i;n!==null?i=n.renderTarget:(i=this._renderTarget||this._getFrameBufferTarget(),i!==null&&(this._textures.updateRenderTarget(i),n=this._textures.get(i))),this._textures.updateTexture(e,{renderTarget:i}),this.backend.copyFramebufferToTexture(e,n,t)}copyTextureToTexture(e,t,n=null,i=null,r=0){this._textures.updateTexture(e),this._textures.updateTexture(t),this.backend.copyTextureToTexture(e,t,n,i,r)}async readRenderTargetPixelsAsync(e,t,n,i,r,o=0,a=0){return this.backend.copyTextureToBuffer(e.textures[o],t,n,i,r,a)}_projectObject(e,t,n,i,r){if(e.visible===!1)return;if(e.layers.test(t.layers)){if(e.isGroup)n=e.renderOrder,e.isClippingGroup&&e.enabled&&(r=r.getGroupContext(e));else if(e.isLOD)e.autoUpdate===!0&&e.update(t);else if(e.isLight)i.pushLight(e);else if(e.isSprite){if(!e.frustumCulled||$d.intersectsSprite(e)){this.sortObjects===!0&&ar.setFromMatrixPosition(e.matrixWorld).applyMatrix4(bu);const{geometry:c,material:l}=e;l.visible&&i.push(e,c,l,n,ar.z,null,r)}}else if(e.isLineLoop)console.error("THREE.Renderer: Objects of type THREE.LineLoop are not supported. Please use THREE.Line or THREE.LineSegments.");else if((e.isMesh||e.isLine||e.isPoints)&&(!e.frustumCulled||$d.intersectsObject(e))){const{geometry:c,material:l}=e;if(this.sortObjects===!0&&(c.boundingSphere===null&&c.computeBoundingSphere(),ar.copy(c.boundingSphere.center).applyMatrix4(e.matrixWorld).applyMatrix4(bu)),Array.isArray(l)){const u=c.groups;for(let h=0,d=u.length;h<d;h++){const f=u[h],m=l[f.materialIndex];m&&m.visible&&i.push(e,c,m,n,ar.z,f,r)}}else l.visible&&i.push(e,c,l,n,ar.z,null,r)}}if(e.isBundleGroup===!0&&this.backend.beginBundle!==void 0){const c=i;i=this._renderLists.get(e,t),i.begin(),c.pushBundle({bundleGroup:e,camera:t,renderList:i}),i.finish()}const a=e.children;for(let c=0,l=a.length;c<l;c++)this._projectObject(a[c],t,n,i,r)}_renderBundles(e,t,n){for(const i of e)this._renderBundle(i,t,n)}_renderTransparents(e,t,n,i,r){if(t.length>0){for(const{material:o}of t)o.side=Wt;this._renderObjects(t,n,i,r,"backSide");for(const{material:o}of t)o.side=Ki;this._renderObjects(e,n,i,r);for(const{material:o}of t)o.side=Bn}else this._renderObjects(e,n,i,r)}_renderObjects(e,t,n,i,r=null){for(let o=0,a=e.length;o<a;o++){const c=e[o],{object:l,geometry:u,material:h,group:d,clippingContext:f}=c;if(t.isArrayCamera){const m=t.cameras;for(let _=0,g=m.length;_<g;_++){const p=m[_];if(l.layers.test(p.layers)){const T=p.viewport,S=T.minDepth===void 0?0:T.minDepth,v=T.maxDepth===void 0?1:T.maxDepth,P=this._currentRenderContext.viewportValue;P.copy(T).multiplyScalar(this._pixelRatio).floor(),P.minDepth=S,P.maxDepth=v,this.backend.updateViewport(this._currentRenderContext),this._currentRenderObjectFunction(l,n,p,u,h,d,i,f,r)}}}else this._currentRenderObjectFunction(l,n,t,u,h,d,i,f,r)}}renderObject(e,t,n,i,r,o,a,c=null,l=null){let u,h,d;if(e.onBeforeRender(this,t,n,i,r,o),t.overrideMaterial!==null){const f=t.overrideMaterial;r.positionNode&&r.positionNode.isNode&&(u=f.positionNode,f.positionNode=r.positionNode),f.alphaTest=r.alphaTest,f.alphaMap=r.alphaMap,f.transparent=r.transparent||r.transmission>0,f.isShadowNodeMaterial&&(f.side=r.shadowSide===null?r.side:r.shadowSide,r.depthNode&&r.depthNode.isNode&&(d=f.depthNode,f.depthNode=r.depthNode),r.castShadowNode&&r.castShadowNode.isNode&&(h=f.colorNode,f.colorNode=r.castShadowNode)),r=f}r.transparent===!0&&r.side===Bn&&r.forceSinglePass===!1?(r.side=Wt,this._handleObjectFunction(e,r,t,n,a,o,c,"backSide"),r.side=Ki,this._handleObjectFunction(e,r,t,n,a,o,c,l),r.side=Bn):this._handleObjectFunction(e,r,t,n,a,o,c,l),u!==void 0&&(t.overrideMaterial.positionNode=u),d!==void 0&&(t.overrideMaterial.depthNode=d),h!==void 0&&(t.overrideMaterial.colorNode=h),e.onAfterRender(this,t,n,i,r,o)}_renderObjectDirect(e,t,n,i,r,o,a,c){const l=this._objects.get(e,t,n,i,r,this._currentRenderContext,a,c);l.drawRange=e.geometry.drawRange,l.group=o;const u=this._nodes.needsRefresh(l);u&&(this._nodes.updateBefore(l),this._geometries.updateForRender(l),this._nodes.updateForRender(l),this._bindings.updateForRender(l)),this._pipelines.updateForRender(l),this._currentRenderBundle!==null&&(this.backend.get(this._currentRenderBundle).renderObjects.push(l),l.bundle=this._currentRenderBundle.bundleGroup),this.backend.draw(l,this.info),u&&this._nodes.updateAfter(l)}_createObjectPipeline(e,t,n,i,r,o,a,c){const l=this._objects.get(e,t,n,i,r,this._currentRenderContext,a,c);l.drawRange=e.geometry.drawRange,l.group=o,this._nodes.updateBefore(l),this._geometries.updateForRender(l),this._nodes.updateForRender(l),this._bindings.updateForRender(l),this._pipelines.getForRender(l,this._compilationPromises),this._nodes.updateAfter(l)}get compile(){return this.compileAsync}}class Dm{constructor(e=""){this.name=e,this.visibility=0}setVisibility(e){this.visibility|=e}clone(){return Object.assign(new this.constructor,this)}}function qF(s){return s+(dr-s%dr)%dr}class mS extends Dm{constructor(e,t=null){super(e),this.isBuffer=!0,this.bytesPerElement=Float32Array.BYTES_PER_ELEMENT,this._buffer=t}get byteLength(){return qF(this._buffer.byteLength)}get buffer(){return this._buffer}update(){return!0}}class gS extends mS{constructor(e,t=null){super(e,t),this.isUniformBuffer=!0}}let YF=0;class _S extends gS{constructor(e,t){super("UniformBuffer_"+YF++,e?e.value:null),this.nodeUniform=e,this.groupNode=t}get buffer(){return this.nodeUniform.value}}class jF extends gS{constructor(e){super(e),this.isUniformsGroup=!0,this._values=null,this.uniforms=[]}addUniform(e){return this.uniforms.push(e),this}removeUniform(e){const t=this.uniforms.indexOf(e);return t!==-1&&this.uniforms.splice(t,1),this}get values(){return this._values===null&&(this._values=Array.from(this.buffer)),this._values}get buffer(){let e=this._buffer;if(e===null){const t=this.byteLength;e=new Float32Array(new ArrayBuffer(t)),this._buffer=e}return e}get byteLength(){let e=0;for(let t=0,n=this.uniforms.length;t<n;t++){const i=this.uniforms[t],{boundary:r,itemSize:o}=i,a=e%dr,c=dr-a;a!==0&&c-r<0?e+=dr-a:a%r!==0&&(e+=a%r),i.offset=e/this.bytesPerElement,e+=o*this.bytesPerElement}return Math.ceil(e/dr)*dr}update(){let e=!1;for(const t of this.uniforms)this.updateByType(t)===!0&&(e=!0);return e}updateByType(e){if(e.isNumberUniform)return this.updateNumber(e);if(e.isVector2Uniform)return this.updateVector2(e);if(e.isVector3Uniform)return this.updateVector3(e);if(e.isVector4Uniform)return this.updateVector4(e);if(e.isColorUniform)return this.updateColor(e);if(e.isMatrix3Uniform)return this.updateMatrix3(e);if(e.isMatrix4Uniform)return this.updateMatrix4(e);console.error("THREE.WebGPUUniformsGroup: Unsupported uniform type.",e)}updateNumber(e){let t=!1;const n=this.values,i=e.getValue(),r=e.offset,o=e.getType();if(n[r]!==i){const a=this._getBufferForType(o);a[r]=n[r]=i,t=!0}return t}updateVector2(e){let t=!1;const n=this.values,i=e.getValue(),r=e.offset,o=e.getType();if(n[r+0]!==i.x||n[r+1]!==i.y){const a=this._getBufferForType(o);a[r+0]=n[r+0]=i.x,a[r+1]=n[r+1]=i.y,t=!0}return t}updateVector3(e){let t=!1;const n=this.values,i=e.getValue(),r=e.offset,o=e.getType();if(n[r+0]!==i.x||n[r+1]!==i.y||n[r+2]!==i.z){const a=this._getBufferForType(o);a[r+0]=n[r+0]=i.x,a[r+1]=n[r+1]=i.y,a[r+2]=n[r+2]=i.z,t=!0}return t}updateVector4(e){let t=!1;const n=this.values,i=e.getValue(),r=e.offset,o=e.getType();if(n[r+0]!==i.x||n[r+1]!==i.y||n[r+2]!==i.z||n[r+4]!==i.w){const a=this._getBufferForType(o);a[r+0]=n[r+0]=i.x,a[r+1]=n[r+1]=i.y,a[r+2]=n[r+2]=i.z,a[r+3]=n[r+3]=i.w,t=!0}return t}updateColor(e){let t=!1;const n=this.values,i=e.getValue(),r=e.offset;if(n[r+0]!==i.r||n[r+1]!==i.g||n[r+2]!==i.b){const o=this.buffer;o[r+0]=n[r+0]=i.r,o[r+1]=n[r+1]=i.g,o[r+2]=n[r+2]=i.b,t=!0}return t}updateMatrix3(e){let t=!1;const n=this.values,i=e.getValue().elements,r=e.offset;if(n[r+0]!==i[0]||n[r+1]!==i[1]||n[r+2]!==i[2]||n[r+4]!==i[3]||n[r+5]!==i[4]||n[r+6]!==i[5]||n[r+8]!==i[6]||n[r+9]!==i[7]||n[r+10]!==i[8]){const o=this.buffer;o[r+0]=n[r+0]=i[0],o[r+1]=n[r+1]=i[1],o[r+2]=n[r+2]=i[2],o[r+4]=n[r+4]=i[3],o[r+5]=n[r+5]=i[4],o[r+6]=n[r+6]=i[5],o[r+8]=n[r+8]=i[6],o[r+9]=n[r+9]=i[7],o[r+10]=n[r+10]=i[8],t=!0}return t}updateMatrix4(e){let t=!1;const n=this.values,i=e.getValue().elements,r=e.offset;return ZF(n,i,r)===!1&&(this.buffer.set(i,r),KF(n,i,r),t=!0),t}_getBufferForType(e){return e==="int"||e==="ivec2"||e==="ivec3"||e==="ivec4"?new Int32Array(this.buffer.buffer):e==="uint"||e==="uvec2"||e==="uvec3"||e==="uvec4"?new Uint32Array(this.buffer.buffer):this.buffer}}function KF(s,e,t){for(let n=0,i=e.length;n<i;n++)s[t+n]=e[n]}function ZF(s,e,t){for(let n=0,i=e.length;n<i;n++)if(s[t+n]!==e[n])return!1;return!0}let QF=0;class xS extends jF{constructor(e,t){super(e),this.id=QF++,this.groupNode=t,this.isNodeUniformsGroup=!0}}let JF=0;class e2 extends Dm{constructor(e,t){super(e),this.id=JF++,this.texture=t,this.version=t?t.version:0,this.store=!1,this.generation=null,this.isSampledTexture=!0}needsBindingsUpdate(e){const{texture:t}=this;return e!==this.generation?(this.generation=e,!0):t.isVideoTexture}update(){const{texture:e,version:t}=this;return t!==e.version?(this.version=e.version,!0):!1}}class Vh extends e2{constructor(e,t,n,i=null){super(e,t?t.value:null),this.textureNode=t,this.groupNode=n,this.access=i}needsBindingsUpdate(e){return this.textureNode.value!==this.texture||super.needsBindingsUpdate(e)}update(){const{textureNode:e}=this;return this.texture!==e.value?(this.texture=e.value,!0):super.update()}}class yS extends Vh{constructor(e,t,n,i=null){super(e,t,n,i),this.isSampledCubeTexture=!0}}class vS extends Vh{constructor(e,t,n,i=null){super(e,t,n,i),this.isSampledTexture3D=!0}}const t2={textureDimensions:"textureSize",equals:"equal"},n2={low:"lowp",medium:"mediump",high:"highp"},F_={swizzleAssign:!0,storageBuffer:!1},B_=`
precision highp float;
precision highp int;
precision highp sampler2D;
precision highp sampler3D;
precision highp samplerCube;
precision highp sampler2DArray;

precision highp usampler2D;
precision highp usampler3D;
precision highp usamplerCube;
precision highp usampler2DArray;

precision highp isampler2D;
precision highp isampler3D;
precision highp isamplerCube;
precision highp isampler2DArray;

precision lowp sampler2DShadow;
`;class i2 extends hS{constructor(e,t){super(e,t,new GF),this.uniformGroups={},this.transforms=[],this.extensions={},this.builtins={vertex:[],fragment:[],compute:[]},this.useComparisonMethod=!0}needsToWorkingColorSpace(e){return e.isVideoTexture===!0&&e.colorSpace!==Ti}getMethod(e){return t2[e]||e}getOutputStructName(){return""}buildFunctionCode(e){const t=e.layout,n=this.flowShaderNode(e),i=[];for(const o of t.inputs)i.push(this.getType(o.type)+" "+o.name);return`${this.getType(t.type)} ${t.name}( ${i.join(", ")} ) {

	${n.vars}

${n.code}
	return ${n.result};

}`}setupPBO(e){const t=e.value;if(t.pbo===void 0){const n=t.array,i=t.count*t.itemSize,{itemSize:r}=t,o=t.array.constructor.name.toLowerCase().includes("int");let a=o?tc:Sl;r===2?a=o?nc:So:r===3?a=o?lb:Tl:r===4&&(a=o?ic:Nn);const c={Float32Array:rn,Uint8Array:Gn,Uint16Array:Yi,Uint32Array:Yt,Int8Array:lo,Int16Array:uo,Int32Array:Mn,Uint8ClampedArray:Gn},l=Math.pow(2,Math.ceil(Math.log2(Math.sqrt(i/r))));let u=Math.ceil(i/r/l);l*u*r<i&&u++;const h=l*u*r,d=new n.constructor(h);d.set(n,0),t.array=d;const f=new dM(t.array,l,u,a,c[t.array.constructor.name]||rn);f.needsUpdate=!0,f.isPBOTexture=!0;const m=new vs(f,null,null);m.setPrecision("high"),t.pboNode=m,t.pbo=m.value,this.getUniformFromNode(t.pboNode,"texture",this.shaderStage,this.context.label)}}getPropertyName(e,t=this.shaderStage){return e.isNodeUniform&&e.node.isTextureNode!==!0&&e.node.isBufferNode!==!0?t.charAt(0)+"_"+e.name:super.getPropertyName(e,t)}generatePBO(e){const{node:t,indexNode:n}=e,i=t.value;if(this.renderer.backend.has(i)){const u=this.renderer.backend.get(i);u.pbo=i.pbo}const r=this.getUniformFromNode(i.pboNode,"texture",this.shaderStage,this.context.label),o=this.getPropertyName(r);this.increaseUsage(n);const a=n.build(this,"uint"),c=this.getDataFromNode(e);let l=c.propertyName;if(l===void 0){const u=this.getVarFromNode(e);l=this.getPropertyName(u);const h=this.getDataFromNode(t);let d=h.propertySizeName;d===void 0&&(d=l+"Size",this.getVarFromNode(t,d,"uint"),this.addLineFlowCode(`${d} = uint( textureSize( ${o}, 0 ).x )`,e),h.propertySizeName=d);const{itemSize:f}=i,m="."+Ao.join("").slice(0,f),_=`ivec2(${a} % ${d}, ${a} / ${d})`,g=this.generateTextureLoad(null,o,_,null,"0");let p="vec4";i.pbo.type===Yt?p="uvec4":i.pbo.type===Mn&&(p="ivec4"),this.addLineFlowCode(`${l} = ${p}(${g})${m}`,e),c.propertyName=l}return l}generateTextureLoad(e,t,n,i,r="0"){return i?`texelFetch( ${t}, ivec3( ${n}, ${i} ), ${r} )`:`texelFetch( ${t}, ${n}, ${r} )`}generateTexture(e,t,n,i){return e.isDepthTexture?`texture( ${t}, ${n} ).x`:(i&&(n=`vec3( ${n}, ${i} )`),`texture( ${t}, ${n} )`)}generateTextureLevel(e,t,n,i){return`textureLod( ${t}, ${n}, ${i} )`}generateTextureBias(e,t,n,i){return`texture( ${t}, ${n}, ${i} )`}generateTextureGrad(e,t,n,i){return`textureGrad( ${t}, ${n}, ${i[0]}, ${i[1]} )`}generateTextureCompare(e,t,n,i,r,o=this.shaderStage){if(o==="fragment")return`texture( ${t}, vec3( ${n}, ${i} ) )`;console.error(`WebGPURenderer: THREE.DepthTexture.compareFunction() does not support ${o} shader.`)}getVars(e){const t=[],n=this.vars[e];if(n!==void 0)for(const i of n)t.push(`${this.getVar(i.type,i.name)};`);return t.join(`
	`)}getUniforms(e){const t=this.uniforms[e],n=[],i={};for(const o of t){let a=null,c=!1;if(o.type==="texture"){const u=o.node.value;let h="";u.isDataTexture===!0&&(u.type===Yt?h="u":u.type===Mn&&(h="i")),u.compareFunction?a=`sampler2DShadow ${o.name};`:u.isDataArrayTexture===!0||u.isCompressedArrayTexture===!0?a=`${h}sampler2DArray ${o.name};`:a=`${h}sampler2D ${o.name};`}else if(o.type==="cubeTexture")a=`samplerCube ${o.name};`;else if(o.type==="texture3D")a=`sampler3D ${o.name};`;else if(o.type==="buffer"){const u=o.node,h=this.getType(u.bufferType),d=u.bufferCount,f=d>0?d:"";a=`${u.name} {
	${h} ${o.name}[${f}];
};
`}else a=`${this.getVectorType(o.type)} ${this.getPropertyName(o,e)};`,c=!0;const l=o.node.precision;if(l!==null&&(a=n2[l]+" "+a),c){a="	"+a;const u=o.groupNode.name;(i[u]||(i[u]=[])).push(a)}else a="uniform "+a,n.push(a)}let r="";for(const o in i){const a=i[o];r+=this._getGLSLUniformStruct(e+"_"+o,a.join(`
`))+`
`}return r+=n.join(`
`),r}getTypeFromAttribute(e){let t=super.getTypeFromAttribute(e);if(/^[iu]/.test(t)&&e.gpuType!==Mn){let n=e;e.isInterleavedBufferAttribute&&(n=e.data);const i=n.array;i instanceof Uint32Array||i instanceof Int32Array||(t=t.slice(1))}return t}getAttributes(e){let t="";if(e==="vertex"||e==="compute"){const n=this.getAttributesArray();let i=0;for(const r of n)t+=`layout( location = ${i++} ) in ${r.type} ${r.name};
`}return t}getStructMembers(e){const t=[],n=e.getMemberTypes();for(let i=0;i<n.length;i++){const r=n[i];t.push(`layout( location = ${i} ) out ${r} m${i};`)}return t.join(`
`)}getStructs(e){const t=[],n=this.structs[e];if(n.length===0)return`layout( location = 0 ) out vec4 fragColor;
`;for(let i=0,r=n.length;i<r;i++){const o=n[i];let a=`
`;a+=this.getStructMembers(o),a+=`
`,t.push(a)}return t.join(`

`)}getVaryings(e){let t="";const n=this.varyings;if(e==="vertex"||e==="compute")for(const i of n){e==="compute"&&(i.needsInterpolation=!0);const r=this.getType(i.type),o=r.includes("int")||r.includes("uv")||r.includes("iv")?"flat ":"";t+=`${o}${i.needsInterpolation?"out":"/*out*/"} ${r} ${i.name};
`}else if(e==="fragment"){for(const i of n)if(i.needsInterpolation){const r=this.getType(i.type),o=r.includes("int")||r.includes("uv")||r.includes("iv")?"flat ":"";t+=`${o}in ${r} ${i.name};
`}}for(const i of this.builtins[e])t+=`${i};
`;return t}getVertexIndex(){return"uint( gl_VertexID )"}getInstanceIndex(){return"uint( gl_InstanceID )"}getInvocationLocalIndex(){return`uint( gl_InstanceID ) % ${this.object.workgroupSize.reduce((n,i)=>n*i,1)}u`}getDrawIndex(){return this.renderer.backend.extensions.has("WEBGL_multi_draw")?"uint( gl_DrawID )":null}getFrontFacing(){return"gl_FrontFacing"}getFragCoord(){return"gl_FragCoord.xy"}getFragDepth(){return"gl_FragDepth"}enableExtension(e,t,n=this.shaderStage){const i=this.extensions[n]||(this.extensions[n]=new Map);i.has(e)===!1&&i.set(e,{name:e,behavior:t})}getExtensions(e){const t=[];if(e==="vertex"){const i=this.renderer.backend.extensions;this.object.isBatchedMesh&&i.has("WEBGL_multi_draw")&&this.enableExtension("GL_ANGLE_multi_draw","require",e)}const n=this.extensions[e];if(n!==void 0)for(const{name:i,behavior:r}of n.values())t.push(`#extension ${i} : ${r}`);return t.join(`
`)}getClipDistance(){return"gl_ClipDistance"}isAvailable(e){let t=F_[e];if(t===void 0){let n;switch(t=!1,e){case"float32Filterable":n="OES_texture_float_linear";break;case"clipDistance":n="WEBGL_clip_cull_distance";break}if(n!==void 0){const i=this.renderer.backend.extensions;i.has(n)&&(i.get(n),t=!0)}F_[e]=t}return t}isFlipY(){return!0}enableHardwareClipping(e){this.enableExtension("GL_ANGLE_clip_cull_distance","require"),this.builtins.vertex.push(`out float gl_ClipDistance[ ${e} ]`)}registerTransform(e,t){this.transforms.push({varyingName:e,attributeNode:t})}getTransforms(){const e=this.transforms;let t="";for(let n=0;n<e.length;n++){const i=e[n],r=this.getPropertyName(i.attributeNode);t+=`${i.varyingName} = ${r};
	`}return t}_getGLSLUniformStruct(e,t){return`
layout( std140 ) uniform ${e} {
${t}
};`}_getGLSLVertexCode(e){return`#version 300 es

${this.getSignature()}

// extensions 
${e.extensions}

// precision
${B_}

// uniforms
${e.uniforms}

// varyings
${e.varyings}

// attributes
${e.attributes}

// codes
${e.codes}

void main() {

	// vars
	${e.vars}

	// transforms
	${e.transforms}

	// flow
	${e.flow}

	gl_PointSize = 1.0;

}
`}_getGLSLFragmentCode(e){return`#version 300 es

${this.getSignature()}

// precision
${B_}

// uniforms
${e.uniforms}

// varyings
${e.varyings}

// codes
${e.codes}

${e.structs}

void main() {

	// vars
	${e.vars}

	// flow
	${e.flow}

}
`}buildCode(){const e=this.material!==null?{fragment:{},vertex:{}}:{compute:{}};this.sortBindingGroups();for(const t in e){let n=`// code

`;n+=this.flowCode[t];const i=this.flowNodes[t],r=i[i.length-1];for(const a of i){const c=this.getFlowData(a),l=a.name;l&&(n.length>0&&(n+=`
`),n+=`	// flow -> ${l}
	`),n+=`${c.code}
	`,a===r&&t!=="compute"&&(n+=`// result
	`,t==="vertex"?(n+="gl_Position = ",n+=`${c.result};`):t==="fragment"&&(a.outputNode.isOutputStructNode||(n+="fragColor = ",n+=`${c.result};`)))}const o=e[t];o.extensions=this.getExtensions(t),o.uniforms=this.getUniforms(t),o.attributes=this.getAttributes(t),o.varyings=this.getVaryings(t),o.vars=this.getVars(t),o.structs=this.getStructs(t),o.codes=this.getCodes(t),o.transforms=this.getTransforms(t),o.flow=n}this.material!==null?(this.vertexShader=this._getGLSLVertexCode(e.vertex),this.fragmentShader=this._getGLSLFragmentCode(e.fragment)):this.computeShader=this._getGLSLVertexCode(e.compute)}getUniformFromNode(e,t,n,i=null){const r=super.getUniformFromNode(e,t,n,i),o=this.getDataFromNode(e,n,this.globalCache);let a=o.uniformGPU;if(a===void 0){const c=e.groupNode,l=c.name,u=this.getBindGroupArray(l,n);if(t==="texture")a=new Vh(r.name,r.node,c),u.push(a);else if(t==="cubeTexture")a=new yS(r.name,r.node,c),u.push(a);else if(t==="texture3D")a=new vS(r.name,r.node,c),u.push(a);else if(t==="buffer"){e.name=`NodeBuffer_${e.id}`,r.name=`buffer${e.id}`;const h=new _S(e,c);h.name=e.name,u.push(h),a=h}else{const h=this.uniformGroups[n]||(this.uniformGroups[n]={});let d=h[l];d===void 0&&(d=new xS(n+"_"+l,c),h[l]=d,u.push(d)),a=this.getNodeUniform(r,t),d.addUniform(a)}o.uniformGPU=a}return r}}let Xd=null,Zo=null;class TS{constructor(e={}){this.parameters=Object.assign({},e),this.data=new WeakMap,this.renderer=null,this.domElement=null}async init(e){this.renderer=e}get coordinateSystem(){}beginRender(){}finishRender(){}beginCompute(){}finishCompute(){}draw(){}compute(){}createProgram(){}destroyProgram(){}createBindings(){}updateBindings(){}updateBinding(){}createRenderPipeline(){}createComputePipeline(){}needsRenderUpdate(){}getRenderCacheKey(){}createNodeBuilder(){}createSampler(){}destroySampler(){}createDefaultTexture(){}createTexture(){}updateTexture(){}generateMipmaps(){}destroyTexture(){}copyTextureToBuffer(){}copyTextureToTexture(){}copyFramebufferToTexture(){}createAttribute(){}createIndexAttribute(){}createStorageAttribute(){}updateAttribute(){}destroyAttribute(){}getContext(){}updateSize(){}updateViewport(){}isOccluded(){}async resolveTimestampAsync(){}async waitForGPU(){}async hasFeatureAsync(){}hasFeature(){}getMaxAnisotropy(){}getDrawingBufferSize(){return Xd=Xd||new Ee,this.renderer.getDrawingBufferSize(Xd)}setScissorTest(){}getClearColor(){const e=this.renderer;return Zo=Zo||new fm,e.getClearColor(Zo),Zo.getRGB(Zo,this.renderer.currentColorSpace),Zo}getDomElement(){let e=this.domElement;return e===null&&(e=this.parameters.canvas!==void 0?this.parameters.canvas:wx(),"setAttribute"in e&&e.setAttribute("data-engine",`three.js r${yl} webgpu`),this.domElement=e),e}set(e,t){this.data.set(e,t)}get(e){let t=this.data.get(e);return t===void 0&&(t={},this.data.set(e,t)),t}has(e){return this.data.has(e)}delete(e){this.data.delete(e)}dispose(){}}let s2=0;class r2{constructor(e,t){this.buffers=[e.bufferGPU,t],this.type=e.type,this.bufferType=e.bufferType,this.pbo=e.pbo,this.byteLength=e.byteLength,this.bytesPerElement=e.BYTES_PER_ELEMENT,this.version=e.version,this.isInteger=e.isInteger,this.activeBufferIndex=0,this.baseId=e.id}get id(){return`${this.baseId}|${this.activeBufferIndex}`}get bufferGPU(){return this.buffers[this.activeBufferIndex]}get transformBuffer(){return this.buffers[this.activeBufferIndex^1]}switchBuffers(){this.activeBufferIndex^=1}}class o2{constructor(e){this.backend=e}createAttribute(e,t){const n=this.backend,{gl:i}=n,r=e.array,o=e.usage||i.STATIC_DRAW,a=e.isInterleavedBufferAttribute?e.data:e,c=n.get(a);let l=c.bufferGPU;l===void 0&&(l=this._createBuffer(i,t,r,o),c.bufferGPU=l,c.bufferType=t,c.version=a.version);let u;if(r instanceof Float32Array)u=i.FLOAT;else if(r instanceof Uint16Array)e.isFloat16BufferAttribute?u=i.HALF_FLOAT:u=i.UNSIGNED_SHORT;else if(r instanceof Int16Array)u=i.SHORT;else if(r instanceof Uint32Array)u=i.UNSIGNED_INT;else if(r instanceof Int32Array)u=i.INT;else if(r instanceof Int8Array)u=i.BYTE;else if(r instanceof Uint8Array)u=i.UNSIGNED_BYTE;else if(r instanceof Uint8ClampedArray)u=i.UNSIGNED_BYTE;else throw new Error("THREE.WebGLBackend: Unsupported buffer data format: "+r);let h={bufferGPU:l,bufferType:t,type:u,byteLength:r.byteLength,bytesPerElement:r.BYTES_PER_ELEMENT,version:e.version,pbo:e.pbo,isInteger:u===i.INT||u===i.UNSIGNED_INT||e.gpuType===Mn,id:s2++};if(e.isStorageBufferAttribute||e.isStorageInstancedBufferAttribute){const d=this._createBuffer(i,t,r,o);h=new r2(h,d)}n.set(e,h)}updateAttribute(e){const t=this.backend,{gl:n}=t,i=e.array,r=e.isInterleavedBufferAttribute?e.data:e,o=t.get(r),a=o.bufferType,c=e.isInterleavedBufferAttribute?e.data.updateRanges:e.updateRanges;if(n.bindBuffer(a,o.bufferGPU),c.length===0)n.bufferSubData(a,0,i);else{for(let l=0,u=c.length;l<u;l++){const h=c[l];n.bufferSubData(a,h.start*i.BYTES_PER_ELEMENT,i,h.start,h.count)}r.clearUpdateRanges()}n.bindBuffer(a,null),o.version=r.version}destroyAttribute(e){const t=this.backend,{gl:n}=t;e.isInterleavedBufferAttribute&&t.delete(e.data);const i=t.get(e);n.deleteBuffer(i.bufferGPU),t.delete(e)}async getArrayBufferAsync(e){const t=this.backend,{gl:n}=t,i=e.isInterleavedBufferAttribute?e.data:e,{bufferGPU:r}=t.get(i),o=e.array,a=o.byteLength;n.bindBuffer(n.COPY_READ_BUFFER,r);const c=n.createBuffer();n.bindBuffer(n.COPY_WRITE_BUFFER,c),n.bufferData(n.COPY_WRITE_BUFFER,a,n.STREAM_READ),n.copyBufferSubData(n.COPY_READ_BUFFER,n.COPY_WRITE_BUFFER,0,0,a),await t.utils._clientWaitAsync();const l=new e.array.constructor(o.length);return n.bindBuffer(n.COPY_WRITE_BUFFER,c),n.getBufferSubData(n.COPY_WRITE_BUFFER,0,l),n.deleteBuffer(c),n.bindBuffer(n.COPY_READ_BUFFER,null),n.bindBuffer(n.COPY_WRITE_BUFFER,null),l.buffer}_createBuffer(e,t,n,i){const r=e.createBuffer();return e.bindBuffer(t,r),e.bufferData(t,n,i),e.bindBuffer(t,null),r}}let O_=!1,qd,Mc;class a2{constructor(e){this.backend=e,this.gl=this.backend.gl,this.enabled={},this.currentFlipSided=null,this.currentCullFace=null,this.currentProgram=null,this.currentBlendingEnabled=!1,this.currentBlending=null,this.currentBlendSrc=null,this.currentBlendDst=null,this.currentBlendSrcAlpha=null,this.currentBlendDstAlpha=null,this.currentPremultipledAlpha=null,this.currentPolygonOffsetFactor=null,this.currentPolygonOffsetUnits=null,this.currentColorMask=null,this.currentDepthFunc=null,this.currentDepthMask=null,this.currentStencilFunc=null,this.currentStencilRef=null,this.currentStencilFuncMask=null,this.currentStencilFail=null,this.currentStencilZFail=null,this.currentStencilZPass=null,this.currentStencilMask=null,this.currentLineWidth=null,this.currentClippingPlanes=0,this.currentBoundFramebuffers={},this.currentDrawbuffers=new WeakMap,this.maxTextures=this.gl.getParameter(this.gl.MAX_TEXTURE_IMAGE_UNITS),this.currentTextureSlot=null,this.currentBoundTextures={},this.currentBoundBufferBases={},O_===!1&&(this._init(this.gl),O_=!0)}_init(e){qd={[vi]:e.FUNC_ADD,[Bf]:e.FUNC_SUBTRACT,[Of]:e.FUNC_REVERSE_SUBTRACT},Mc={[Vf]:e.ZERO,[Gf]:e.ONE,[zf]:e.SRC_COLOR,[Vc]:e.SRC_ALPHA,[qf]:e.SRC_ALPHA_SATURATE,[$f]:e.DST_COLOR,[Hf]:e.DST_ALPHA,[kf]:e.ONE_MINUS_SRC_COLOR,[Gc]:e.ONE_MINUS_SRC_ALPHA,[Xf]:e.ONE_MINUS_DST_COLOR,[Wf]:e.ONE_MINUS_DST_ALPHA}}enable(e){const{enabled:t}=this;t[e]!==!0&&(this.gl.enable(e),t[e]=!0)}disable(e){const{enabled:t}=this;t[e]!==!1&&(this.gl.disable(e),t[e]=!1)}setFlipSided(e){if(this.currentFlipSided!==e){const{gl:t}=this;e?t.frontFace(t.CW):t.frontFace(t.CCW),this.currentFlipSided=e}}setCullFace(e){const{gl:t}=this;e!==mx?(this.enable(t.CULL_FACE),e!==this.currentCullFace&&(e===sf?t.cullFace(t.BACK):e===gx?t.cullFace(t.FRONT):t.cullFace(t.FRONT_AND_BACK))):this.disable(t.CULL_FACE),this.currentCullFace=e}setLineWidth(e){const{currentLineWidth:t,gl:n}=this;e!==t&&(n.lineWidth(e),this.currentLineWidth=e)}setBlending(e,t,n,i,r,o,a,c){const{gl:l}=this;if(e===Si){this.currentBlendingEnabled===!0&&(this.disable(l.BLEND),this.currentBlendingEnabled=!1);return}if(this.currentBlendingEnabled===!1&&(this.enable(l.BLEND),this.currentBlendingEnabled=!0),e!==Ff){if(e!==this.currentBlending||c!==this.currentPremultipledAlpha){if((this.currentBlendEquation!==vi||this.currentBlendEquationAlpha!==vi)&&(l.blendEquation(l.FUNC_ADD),this.currentBlendEquation=vi,this.currentBlendEquationAlpha=vi),c)switch(e){case Ui:l.blendFuncSeparate(l.ONE,l.ONE_MINUS_SRC_ALPHA,l.ONE,l.ONE_MINUS_SRC_ALPHA);break;case wa:l.blendFunc(l.ONE,l.ONE);break;case Na:l.blendFuncSeparate(l.ZERO,l.ONE_MINUS_SRC_COLOR,l.ZERO,l.ONE);break;case Ca:l.blendFuncSeparate(l.ZERO,l.SRC_COLOR,l.ZERO,l.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",e);break}else switch(e){case Ui:l.blendFuncSeparate(l.SRC_ALPHA,l.ONE_MINUS_SRC_ALPHA,l.ONE,l.ONE_MINUS_SRC_ALPHA);break;case wa:l.blendFunc(l.SRC_ALPHA,l.ONE);break;case Na:l.blendFuncSeparate(l.ZERO,l.ONE_MINUS_SRC_COLOR,l.ZERO,l.ONE);break;case Ca:l.blendFunc(l.ZERO,l.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",e);break}this.currentBlendSrc=null,this.currentBlendDst=null,this.currentBlendSrcAlpha=null,this.currentBlendDstAlpha=null,this.currentBlending=e,this.currentPremultipledAlpha=c}return}r=r||t,o=o||n,a=a||i,(t!==this.currentBlendEquation||r!==this.currentBlendEquationAlpha)&&(l.blendEquationSeparate(qd[t],qd[r]),this.currentBlendEquation=t,this.currentBlendEquationAlpha=r),(n!==this.currentBlendSrc||i!==this.currentBlendDst||o!==this.currentBlendSrcAlpha||a!==this.currentBlendDstAlpha)&&(l.blendFuncSeparate(Mc[n],Mc[i],Mc[o],Mc[a]),this.currentBlendSrc=n,this.currentBlendDst=i,this.currentBlendSrcAlpha=o,this.currentBlendDstAlpha=a),this.currentBlending=e,this.currentPremultipledAlpha=!1}setColorMask(e){this.currentColorMask!==e&&(this.gl.colorMask(e,e,e,e),this.currentColorMask=e)}setDepthTest(e){const{gl:t}=this;e?this.enable(t.DEPTH_TEST):this.disable(t.DEPTH_TEST)}setDepthMask(e){this.currentDepthMask!==e&&(this.gl.depthMask(e),this.currentDepthMask=e)}setDepthFunc(e){if(this.currentDepthFunc!==e){const{gl:t}=this;switch(e){case zc:t.depthFunc(t.NEVER);break;case kc:t.depthFunc(t.ALWAYS);break;case Hc:t.depthFunc(t.LESS);break;case br:t.depthFunc(t.LEQUAL);break;case Wc:t.depthFunc(t.EQUAL);break;case $c:t.depthFunc(t.GEQUAL);break;case Xc:t.depthFunc(t.GREATER);break;case qc:t.depthFunc(t.NOTEQUAL);break;default:t.depthFunc(t.LEQUAL)}this.currentDepthFunc=e}}setStencilTest(e){const{gl:t}=this;e?this.enable(t.STENCIL_TEST):this.disable(t.STENCIL_TEST)}setStencilMask(e){this.currentStencilMask!==e&&(this.gl.stencilMask(e),this.currentStencilMask=e)}setStencilFunc(e,t,n){(this.currentStencilFunc!==e||this.currentStencilRef!==t||this.currentStencilFuncMask!==n)&&(this.gl.stencilFunc(e,t,n),this.currentStencilFunc=e,this.currentStencilRef=t,this.currentStencilFuncMask=n)}setStencilOp(e,t,n){(this.currentStencilFail!==e||this.currentStencilZFail!==t||this.currentStencilZPass!==n)&&(this.gl.stencilOp(e,t,n),this.currentStencilFail=e,this.currentStencilZFail=t,this.currentStencilZPass=n)}setMaterial(e,t,n){const{gl:i}=this;e.side===Bn?this.disable(i.CULL_FACE):this.enable(i.CULL_FACE);let r=e.side===Wt;t&&(r=!r),this.setFlipSided(r),e.blending===Ui&&e.transparent===!1?this.setBlending(Si):this.setBlending(e.blending,e.blendEquation,e.blendSrc,e.blendDst,e.blendEquationAlpha,e.blendSrcAlpha,e.blendDstAlpha,e.premultipliedAlpha),this.setDepthFunc(e.depthFunc),this.setDepthTest(e.depthTest),this.setDepthMask(e.depthWrite),this.setColorMask(e.colorWrite);const o=e.stencilWrite;if(this.setStencilTest(o),o&&(this.setStencilMask(e.stencilWriteMask),this.setStencilFunc(e.stencilFunc,e.stencilRef,e.stencilFuncMask),this.setStencilOp(e.stencilFail,e.stencilZFail,e.stencilZPass)),this.setPolygonOffset(e.polygonOffset,e.polygonOffsetFactor,e.polygonOffsetUnits),e.alphaToCoverage===!0&&this.backend.renderer.samples>1?this.enable(i.SAMPLE_ALPHA_TO_COVERAGE):this.disable(i.SAMPLE_ALPHA_TO_COVERAGE),n>0&&this.currentClippingPlanes!==n)for(let c=0;c<8;c++)c<n?this.enable(12288+c):this.disable(12288+c)}setPolygonOffset(e,t,n){const{gl:i}=this;e?(this.enable(i.POLYGON_OFFSET_FILL),(this.currentPolygonOffsetFactor!==t||this.currentPolygonOffsetUnits!==n)&&(i.polygonOffset(t,n),this.currentPolygonOffsetFactor=t,this.currentPolygonOffsetUnits=n)):this.disable(i.POLYGON_OFFSET_FILL)}useProgram(e){return this.currentProgram!==e?(this.gl.useProgram(e),this.currentProgram=e,!0):!1}bindFramebuffer(e,t){const{gl:n,currentBoundFramebuffers:i}=this;return i[e]!==t?(n.bindFramebuffer(e,t),i[e]=t,e===n.DRAW_FRAMEBUFFER&&(i[n.FRAMEBUFFER]=t),e===n.FRAMEBUFFER&&(i[n.DRAW_FRAMEBUFFER]=t),!0):!1}drawBuffers(e,t){const{gl:n}=this;let i=[],r=!1;if(e.textures!==null){i=this.currentDrawbuffers.get(t),i===void 0&&(i=[],this.currentDrawbuffers.set(t,i));const o=e.textures;if(i.length!==o.length||i[0]!==n.COLOR_ATTACHMENT0){for(let a=0,c=o.length;a<c;a++)i[a]=n.COLOR_ATTACHMENT0+a;i.length=o.length,r=!0}}else i[0]!==n.BACK&&(i[0]=n.BACK,r=!0);r&&n.drawBuffers(i)}activeTexture(e){const{gl:t,currentTextureSlot:n,maxTextures:i}=this;e===void 0&&(e=t.TEXTURE0+i-1),n!==e&&(t.activeTexture(e),this.currentTextureSlot=e)}bindTexture(e,t,n){const{gl:i,currentTextureSlot:r,currentBoundTextures:o,maxTextures:a}=this;n===void 0&&(r===null?n=i.TEXTURE0+a-1:n=r);let c=o[n];c===void 0&&(c={type:void 0,texture:void 0},o[n]=c),(c.type!==e||c.texture!==t)&&(r!==n&&(i.activeTexture(n),this.currentTextureSlot=n),i.bindTexture(e,t),c.type=e,c.texture=t)}bindBufferBase(e,t,n){const{gl:i}=this,r=`${e}-${t}`;return this.currentBoundBufferBases[r]!==n?(i.bindBufferBase(e,t,n),this.currentBoundBufferBases[r]=n,!0):!1}unbindTexture(){const{gl:e,currentTextureSlot:t,currentBoundTextures:n}=this,i=n[t];i!==void 0&&i.type!==void 0&&(e.bindTexture(i.type,null),i.type=void 0,i.texture=void 0)}}class c2{constructor(e){this.backend=e,this.gl=this.backend.gl,this.extensions=e.extensions}convert(e,t=Ti){const{gl:n,extensions:i}=this;let r;if(e===Gn)return n.UNSIGNED_BYTE;if(e===rh)return n.UNSIGNED_SHORT_4_4_4_4;if(e===oh)return n.UNSIGNED_SHORT_5_5_5_1;if(e===ah)return n.UNSIGNED_INT_5_9_9_9_REV;if(e===lo)return n.BYTE;if(e===uo)return n.SHORT;if(e===Yi)return n.UNSIGNED_SHORT;if(e===Mn)return n.INT;if(e===Yt)return n.UNSIGNED_INT;if(e===rn)return n.FLOAT;if(e===zn)return n.HALF_FLOAT;if(e===Kf)return n.ALPHA;if(e===Tl)return n.RGB;if(e===Nn)return n.RGBA;if(e===Zf)return n.LUMINANCE;if(e===Qf)return n.LUMINANCE_ALPHA;if(e===hs)return n.DEPTH_COMPONENT;if(e===gs)return n.DEPTH_STENCIL;if(e===Sl)return n.RED;if(e===tc)return n.RED_INTEGER;if(e===So)return n.RG;if(e===nc)return n.RG_INTEGER;if(e===ic)return n.RGBA_INTEGER;if(e===ho||e===yr||e===vr||e===Tr)if(t===Oe)if(r=i.get("WEBGL_compressed_texture_s3tc_srgb"),r!==null){if(e===ho)return r.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(e===yr)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(e===vr)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(e===Tr)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else return null;else if(r=i.get("WEBGL_compressed_texture_s3tc"),r!==null){if(e===ho)return r.COMPRESSED_RGB_S3TC_DXT1_EXT;if(e===yr)return r.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(e===vr)return r.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(e===Tr)return r.COMPRESSED_RGBA_S3TC_DXT5_EXT}else return null;if(e===Yc||e===jc||e===Kc||e===Zc)if(r=i.get("WEBGL_compressed_texture_pvrtc"),r!==null){if(e===Yc)return r.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(e===jc)return r.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(e===Kc)return r.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(e===Zc)return r.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else return null;if(e===Qc||e===Pa||e===Da)if(r=i.get("WEBGL_compressed_texture_etc"),r!==null){if(e===Qc||e===Pa)return t===Oe?r.COMPRESSED_SRGB8_ETC2:r.COMPRESSED_RGB8_ETC2;if(e===Da)return t===Oe?r.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:r.COMPRESSED_RGBA8_ETC2_EAC}else return null;if(e===La||e===Ua||e===Ia||e===Fa||e===Ba||e===Oa||e===Va||e===Ga||e===za||e===ka||e===Ha||e===Wa||e===$a||e===Xa)if(r=i.get("WEBGL_compressed_texture_astc"),r!==null){if(e===La)return t===Oe?r.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:r.COMPRESSED_RGBA_ASTC_4x4_KHR;if(e===Ua)return t===Oe?r.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:r.COMPRESSED_RGBA_ASTC_5x4_KHR;if(e===Ia)return t===Oe?r.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:r.COMPRESSED_RGBA_ASTC_5x5_KHR;if(e===Fa)return t===Oe?r.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:r.COMPRESSED_RGBA_ASTC_6x5_KHR;if(e===Ba)return t===Oe?r.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:r.COMPRESSED_RGBA_ASTC_6x6_KHR;if(e===Oa)return t===Oe?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:r.COMPRESSED_RGBA_ASTC_8x5_KHR;if(e===Va)return t===Oe?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:r.COMPRESSED_RGBA_ASTC_8x6_KHR;if(e===Ga)return t===Oe?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:r.COMPRESSED_RGBA_ASTC_8x8_KHR;if(e===za)return t===Oe?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:r.COMPRESSED_RGBA_ASTC_10x5_KHR;if(e===ka)return t===Oe?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:r.COMPRESSED_RGBA_ASTC_10x6_KHR;if(e===Ha)return t===Oe?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:r.COMPRESSED_RGBA_ASTC_10x8_KHR;if(e===Wa)return t===Oe?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:r.COMPRESSED_RGBA_ASTC_10x10_KHR;if(e===$a)return t===Oe?r.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:r.COMPRESSED_RGBA_ASTC_12x10_KHR;if(e===Xa)return t===Oe?r.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:r.COMPRESSED_RGBA_ASTC_12x12_KHR}else return null;if(e===fo)if(r=i.get("EXT_texture_compression_bptc"),r!==null){if(e===fo)return t===Oe?r.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:r.COMPRESSED_RGBA_BPTC_UNORM_EXT}else return null;if(e===Jf||e===Jc||e===el||e===tl)if(r=i.get("EXT_texture_compression_rgtc"),r!==null){if(e===fo)return r.COMPRESSED_RED_RGTC1_EXT;if(e===Jc)return r.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(e===el)return r.COMPRESSED_RED_GREEN_RGTC2_EXT;if(e===tl)return r.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}else return null;return e===ms?n.UNSIGNED_INT_24_8:n[e]!==void 0?n[e]:null}_clientWaitAsync(){const{gl:e}=this,t=e.fenceSync(e.SYNC_GPU_COMMANDS_COMPLETE,0);return e.flush(),new Promise((n,i)=>{function r(){const o=e.clientWaitSync(t,e.SYNC_FLUSH_COMMANDS_BIT,0);if(o===e.WAIT_FAILED){e.deleteSync(t),i();return}if(o===e.TIMEOUT_EXPIRED){requestAnimationFrame(r);return}e.deleteSync(t),n()}r()})}}let V_=!1,Mu,Yd,G_;class l2{constructor(e){this.backend=e,this.gl=e.gl,this.extensions=e.extensions,this.defaultTextures={},V_===!1&&(this._init(this.gl),V_=!0)}_init(e){Mu={[vo]:e.REPEAT,[cs]:e.CLAMP_TO_EDGE,[To]:e.MIRRORED_REPEAT},Yd={[zt]:e.NEAREST,[Vu]:e.NEAREST_MIPMAP_NEAREST,[ls]:e.NEAREST_MIPMAP_LINEAR,[yn]:e.LINEAR,[ha]:e.LINEAR_MIPMAP_NEAREST,[ti]:e.LINEAR_MIPMAP_LINEAR},G_={[ep]:e.NEVER,[rp]:e.ALWAYS,[ch]:e.LESS,[lh]:e.LEQUAL,[tp]:e.EQUAL,[sp]:e.GEQUAL,[np]:e.GREATER,[ip]:e.NOTEQUAL}}filterFallback(e){const{gl:t}=this;return e===zt||e===Vu||e===ls?t.NEAREST:t.LINEAR}getGLTextureType(e){const{gl:t}=this;let n;return e.isCubeTexture===!0?n=t.TEXTURE_CUBE_MAP:e.isDataArrayTexture===!0||e.isCompressedArrayTexture===!0?n=t.TEXTURE_2D_ARRAY:e.isData3DTexture===!0?n=t.TEXTURE_3D:n=t.TEXTURE_2D,n}getInternalFormat(e,t,n,i,r=!1){const{gl:o,extensions:a}=this;if(e!==null){if(o[e]!==void 0)return o[e];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+e+"'")}let c=t;return t===o.RED&&(n===o.FLOAT&&(c=o.R32F),n===o.HALF_FLOAT&&(c=o.R16F),n===o.UNSIGNED_BYTE&&(c=o.R8),n===o.UNSIGNED_SHORT&&(c=o.R16),n===o.UNSIGNED_INT&&(c=o.R32UI),n===o.BYTE&&(c=o.R8I),n===o.SHORT&&(c=o.R16I),n===o.INT&&(c=o.R32I)),t===o.RED_INTEGER&&(n===o.UNSIGNED_BYTE&&(c=o.R8UI),n===o.UNSIGNED_SHORT&&(c=o.R16UI),n===o.UNSIGNED_INT&&(c=o.R32UI),n===o.BYTE&&(c=o.R8I),n===o.SHORT&&(c=o.R16I),n===o.INT&&(c=o.R32I)),t===o.RG&&(n===o.FLOAT&&(c=o.RG32F),n===o.HALF_FLOAT&&(c=o.RG16F),n===o.UNSIGNED_BYTE&&(c=o.RG8),n===o.UNSIGNED_SHORT&&(c=o.RG16),n===o.UNSIGNED_INT&&(c=o.RG32UI),n===o.BYTE&&(c=o.RG8I),n===o.SHORT&&(c=o.RG16I),n===o.INT&&(c=o.RG32I)),t===o.RG_INTEGER&&(n===o.UNSIGNED_BYTE&&(c=o.RG8UI),n===o.UNSIGNED_SHORT&&(c=o.RG16UI),n===o.UNSIGNED_INT&&(c=o.RG32UI),n===o.BYTE&&(c=o.RG8I),n===o.SHORT&&(c=o.RG16I),n===o.INT&&(c=o.RG32I)),t===o.RGB&&(n===o.FLOAT&&(c=o.RGB32F),n===o.HALF_FLOAT&&(c=o.RGB16F),n===o.UNSIGNED_BYTE&&(c=o.RGB8),n===o.UNSIGNED_SHORT&&(c=o.RGB16),n===o.UNSIGNED_INT&&(c=o.RGB32UI),n===o.BYTE&&(c=o.RGB8I),n===o.SHORT&&(c=o.RGB16I),n===o.INT&&(c=o.RGB32I),n===o.UNSIGNED_BYTE&&(c=i===Oe&&r===!1?o.SRGB8:o.RGB8),n===o.UNSIGNED_SHORT_5_6_5&&(c=o.RGB565),n===o.UNSIGNED_SHORT_5_5_5_1&&(c=o.RGB5_A1),n===o.UNSIGNED_SHORT_4_4_4_4&&(c=o.RGB4),n===o.UNSIGNED_INT_5_9_9_9_REV&&(c=o.RGB9_E5)),t===o.RGB_INTEGER&&(n===o.UNSIGNED_BYTE&&(c=o.RGB8UI),n===o.UNSIGNED_SHORT&&(c=o.RGB16UI),n===o.UNSIGNED_INT&&(c=o.RGB32UI),n===o.BYTE&&(c=o.RGB8I),n===o.SHORT&&(c=o.RGB16I),n===o.INT&&(c=o.RGB32I)),t===o.RGBA&&(n===o.FLOAT&&(c=o.RGBA32F),n===o.HALF_FLOAT&&(c=o.RGBA16F),n===o.UNSIGNED_BYTE&&(c=o.RGBA8),n===o.UNSIGNED_SHORT&&(c=o.RGBA16),n===o.UNSIGNED_INT&&(c=o.RGBA32UI),n===o.BYTE&&(c=o.RGBA8I),n===o.SHORT&&(c=o.RGBA16I),n===o.INT&&(c=o.RGBA32I),n===o.UNSIGNED_BYTE&&(c=i===Oe&&r===!1?o.SRGB8_ALPHA8:o.RGBA8),n===o.UNSIGNED_SHORT_4_4_4_4&&(c=o.RGBA4),n===o.UNSIGNED_SHORT_5_5_5_1&&(c=o.RGB5_A1)),t===o.RGBA_INTEGER&&(n===o.UNSIGNED_BYTE&&(c=o.RGBA8UI),n===o.UNSIGNED_SHORT&&(c=o.RGBA16UI),n===o.UNSIGNED_INT&&(c=o.RGBA32UI),n===o.BYTE&&(c=o.RGBA8I),n===o.SHORT&&(c=o.RGBA16I),n===o.INT&&(c=o.RGBA32I)),t===o.DEPTH_COMPONENT&&(n===o.UNSIGNED_INT&&(c=o.DEPTH24_STENCIL8),n===o.FLOAT&&(c=o.DEPTH_COMPONENT32F)),t===o.DEPTH_STENCIL&&n===o.UNSIGNED_INT_24_8&&(c=o.DEPTH24_STENCIL8),(c===o.R16F||c===o.R32F||c===o.RG16F||c===o.RG32F||c===o.RGBA16F||c===o.RGBA32F)&&a.get("EXT_color_buffer_float"),c}setTextureParameters(e,t){const{gl:n,extensions:i,backend:r}=this;n.pixelStorei(n.UNPACK_FLIP_Y_WEBGL,t.flipY),n.pixelStorei(n.UNPACK_PREMULTIPLY_ALPHA_WEBGL,t.premultiplyAlpha),n.pixelStorei(n.UNPACK_ALIGNMENT,t.unpackAlignment),n.pixelStorei(n.UNPACK_COLORSPACE_CONVERSION_WEBGL,n.NONE),n.texParameteri(e,n.TEXTURE_WRAP_S,Mu[t.wrapS]),n.texParameteri(e,n.TEXTURE_WRAP_T,Mu[t.wrapT]),(e===n.TEXTURE_3D||e===n.TEXTURE_2D_ARRAY)&&n.texParameteri(e,n.TEXTURE_WRAP_R,Mu[t.wrapR]),n.texParameteri(e,n.TEXTURE_MAG_FILTER,Yd[t.magFilter]);const o=t.mipmaps!==void 0&&t.mipmaps.length>0,a=t.minFilter===yn&&o?ti:t.minFilter;if(n.texParameteri(e,n.TEXTURE_MIN_FILTER,Yd[a]),t.compareFunction&&(n.texParameteri(e,n.TEXTURE_COMPARE_MODE,n.COMPARE_REF_TO_TEXTURE),n.texParameteri(e,n.TEXTURE_COMPARE_FUNC,G_[t.compareFunction])),i.has("EXT_texture_filter_anisotropic")===!0){if(t.magFilter===zt||t.minFilter!==ls&&t.minFilter!==ti||t.type===rn&&i.has("OES_texture_float_linear")===!1)return;if(t.anisotropy>1){const c=i.get("EXT_texture_filter_anisotropic");n.texParameterf(e,c.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(t.anisotropy,r.getMaxAnisotropy()))}}}createDefaultTexture(e){const{gl:t,backend:n,defaultTextures:i}=this,r=this.getGLTextureType(e);let o=i[r];o===void 0&&(o=t.createTexture(),n.state.bindTexture(r,o),t.texParameteri(r,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(r,t.TEXTURE_MAG_FILTER,t.NEAREST),i[r]=o),n.set(e,{textureGPU:o,glTextureType:r,isDefault:!0})}createTexture(e,t){const{gl:n,backend:i}=this,{levels:r,width:o,height:a,depth:c}=t,l=i.utils.convert(e.format,e.colorSpace),u=i.utils.convert(e.type),h=this.getInternalFormat(e.internalFormat,l,u,e.colorSpace,e.isVideoTexture),d=n.createTexture(),f=this.getGLTextureType(e);i.state.bindTexture(f,d),this.setTextureParameters(f,e),e.isDataArrayTexture||e.isCompressedArrayTexture?n.texStorage3D(n.TEXTURE_2D_ARRAY,r,h,o,a,c):e.isData3DTexture?n.texStorage3D(n.TEXTURE_3D,r,h,o,a,c):e.isVideoTexture||n.texStorage2D(f,r,h,o,a),i.set(e,{textureGPU:d,glTextureType:f,glFormat:l,glType:u,glInternalFormat:h})}copyBufferToTexture(e,t){const{gl:n,backend:i}=this,{textureGPU:r,glTextureType:o,glFormat:a,glType:c}=i.get(t),{width:l,height:u}=t.source.data;n.bindBuffer(n.PIXEL_UNPACK_BUFFER,e),i.state.bindTexture(o,r),n.pixelStorei(n.UNPACK_FLIP_Y_WEBGL,!1),n.pixelStorei(n.UNPACK_PREMULTIPLY_ALPHA_WEBGL,!1),n.texSubImage2D(o,0,0,0,l,u,a,c,0),n.bindBuffer(n.PIXEL_UNPACK_BUFFER,null),i.state.unbindTexture()}updateTexture(e,t){const{gl:n}=this,{width:i,height:r}=t,{textureGPU:o,glTextureType:a,glFormat:c,glType:l,glInternalFormat:u}=this.backend.get(e);if(e.isRenderTargetTexture||o===void 0)return;const h=d=>d.isDataTexture?d.image.data:typeof HTMLImageElement<"u"&&d instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&d instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&d instanceof ImageBitmap||d instanceof OffscreenCanvas?d:d.data;if(this.backend.state.bindTexture(a,o),this.setTextureParameters(a,e),e.isCompressedTexture){const d=e.mipmaps,f=t.image;for(let m=0;m<d.length;m++){const _=d[m];e.isCompressedArrayTexture?e.format!==n.RGBA?c!==null?n.compressedTexSubImage3D(n.TEXTURE_2D_ARRAY,m,0,0,0,_.width,_.height,f.depth,c,_.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):n.texSubImage3D(n.TEXTURE_2D_ARRAY,m,0,0,0,_.width,_.height,f.depth,c,l,_.data):c!==null?n.compressedTexSubImage2D(n.TEXTURE_2D,m,0,0,_.width,_.height,c,_.data):console.warn("Unsupported compressed texture format")}}else if(e.isCubeTexture){const d=t.images;for(let f=0;f<6;f++){const m=h(d[f]);n.texSubImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X+f,0,0,0,i,r,c,l,m)}}else if(e.isDataArrayTexture){const d=t.image;n.texSubImage3D(n.TEXTURE_2D_ARRAY,0,0,0,0,d.width,d.height,d.depth,c,l,d.data)}else if(e.isData3DTexture){const d=t.image;n.texSubImage3D(n.TEXTURE_3D,0,0,0,0,d.width,d.height,d.depth,c,l,d.data)}else if(e.isVideoTexture)e.update(),n.texImage2D(a,0,u,c,l,t.image);else{const d=h(t.image);n.texSubImage2D(a,0,0,0,i,r,c,l,d)}}generateMipmaps(e){const{gl:t,backend:n}=this,{textureGPU:i,glTextureType:r}=n.get(e);n.state.bindTexture(r,i),t.generateMipmap(r)}deallocateRenderBuffers(e){const{gl:t,backend:n}=this;if(e){const i=n.get(e);if(i.renderBufferStorageSetup=void 0,i.framebuffers){for(const r in i.framebuffers)t.deleteFramebuffer(i.framebuffers[r]);delete i.framebuffers}if(i.depthRenderbuffer&&(t.deleteRenderbuffer(i.depthRenderbuffer),delete i.depthRenderbuffer),i.stencilRenderbuffer&&(t.deleteRenderbuffer(i.stencilRenderbuffer),delete i.stencilRenderbuffer),i.msaaFrameBuffer&&(t.deleteFramebuffer(i.msaaFrameBuffer),delete i.msaaFrameBuffer),i.msaaRenderbuffers){for(let r=0;r<i.msaaRenderbuffers.length;r++)t.deleteRenderbuffer(i.msaaRenderbuffers[r]);delete i.msaaRenderbuffers}}}destroyTexture(e){const{gl:t,backend:n}=this,{textureGPU:i,renderTarget:r}=n.get(e);this.deallocateRenderBuffers(r),t.deleteTexture(i),n.delete(e)}copyTextureToTexture(e,t,n=null,i=null,r=0){const{gl:o,backend:a}=this,{state:c}=this.backend,{textureGPU:l,glTextureType:u,glType:h,glFormat:d}=a.get(t);let f,m,_,g,p,T;n!==null?(f=n.max.x-n.min.x,m=n.max.y-n.min.y,_=n.min.x,g=n.min.y):(f=e.image.width,m=e.image.height,_=0,g=0),i!==null?(p=i.x,T=i.y):(p=0,T=0),c.bindTexture(u,l),o.pixelStorei(o.UNPACK_ALIGNMENT,t.unpackAlignment),o.pixelStorei(o.UNPACK_FLIP_Y_WEBGL,t.flipY),o.pixelStorei(o.UNPACK_PREMULTIPLY_ALPHA_WEBGL,t.premultiplyAlpha),o.pixelStorei(o.UNPACK_ALIGNMENT,t.unpackAlignment);const S=o.getParameter(o.UNPACK_ROW_LENGTH),v=o.getParameter(o.UNPACK_IMAGE_HEIGHT),P=o.getParameter(o.UNPACK_SKIP_PIXELS),N=o.getParameter(o.UNPACK_SKIP_ROWS),w=o.getParameter(o.UNPACK_SKIP_IMAGES),F=e.isCompressedTexture?e.mipmaps[r]:e.image;if(o.pixelStorei(o.UNPACK_ROW_LENGTH,F.width),o.pixelStorei(o.UNPACK_IMAGE_HEIGHT,F.height),o.pixelStorei(o.UNPACK_SKIP_PIXELS,_),o.pixelStorei(o.UNPACK_SKIP_ROWS,g),e.isRenderTargetTexture||e.isDepthTexture){const E=a.get(e),M=a.get(t),D=a.get(E.renderTarget),Z=a.get(M.renderTarget),$=D.framebuffers[E.cacheKey],ne=Z.framebuffers[M.cacheKey];c.bindFramebuffer(o.READ_FRAMEBUFFER,$),c.bindFramebuffer(o.DRAW_FRAMEBUFFER,ne);let oe=o.COLOR_BUFFER_BIT;e.isDepthTexture&&(oe=o.DEPTH_BUFFER_BIT),o.blitFramebuffer(_,g,f,m,p,T,f,m,oe,o.NEAREST),c.bindFramebuffer(o.READ_FRAMEBUFFER,null),c.bindFramebuffer(o.DRAW_FRAMEBUFFER,null)}else e.isDataTexture?o.texSubImage2D(o.TEXTURE_2D,r,p,T,f,m,d,h,F.data):e.isCompressedTexture?o.compressedTexSubImage2D(o.TEXTURE_2D,r,p,T,F.width,F.height,d,F.data):o.texSubImage2D(o.TEXTURE_2D,r,p,T,f,m,d,h,F);o.pixelStorei(o.UNPACK_ROW_LENGTH,S),o.pixelStorei(o.UNPACK_IMAGE_HEIGHT,v),o.pixelStorei(o.UNPACK_SKIP_PIXELS,P),o.pixelStorei(o.UNPACK_SKIP_ROWS,N),o.pixelStorei(o.UNPACK_SKIP_IMAGES,w),r===0&&t.generateMipmaps&&o.generateMipmap(o.TEXTURE_2D),c.unbindTexture()}copyFramebufferToTexture(e,t,n){const{gl:i}=this,{state:r}=this.backend,{textureGPU:o}=this.backend.get(e),{x:a,y:c,z:l,w:u}=n,h=e.isDepthTexture===!0||t.renderTarget&&t.renderTarget.samples>0,d=t.renderTarget?t.renderTarget.height:this.backend.getDrawingBufferSize().y;if(h){const f=a!==0||c!==0;let m,_;if(e.isDepthTexture===!0?(m=i.DEPTH_BUFFER_BIT,_=i.DEPTH_ATTACHMENT,t.stencil&&(m|=i.STENCIL_BUFFER_BIT)):(m=i.COLOR_BUFFER_BIT,_=i.COLOR_ATTACHMENT0),f){const g=this.backend.get(t.renderTarget),p=g.framebuffers[t.getCacheKey()],T=g.msaaFrameBuffer;r.bindFramebuffer(i.DRAW_FRAMEBUFFER,p),r.bindFramebuffer(i.READ_FRAMEBUFFER,T);const S=d-c-u;i.blitFramebuffer(a,S,a+l,S+u,a,S,a+l,S+u,m,i.NEAREST),r.bindFramebuffer(i.READ_FRAMEBUFFER,p),r.bindTexture(i.TEXTURE_2D,o),i.copyTexSubImage2D(i.TEXTURE_2D,0,0,0,a,S,l,u),r.unbindTexture()}else{const g=i.createFramebuffer();r.bindFramebuffer(i.DRAW_FRAMEBUFFER,g),i.framebufferTexture2D(i.DRAW_FRAMEBUFFER,_,i.TEXTURE_2D,o,0),i.blitFramebuffer(0,0,l,u,0,0,l,u,m,i.NEAREST),i.deleteFramebuffer(g)}}else r.bindTexture(i.TEXTURE_2D,o),i.copyTexSubImage2D(i.TEXTURE_2D,0,0,0,a,d-u-c,l,u),r.unbindTexture();e.generateMipmaps&&this.generateMipmaps(e),this.backend._setFramebuffer(t)}setupRenderBufferStorage(e,t){const{gl:n}=this,i=t.renderTarget,{samples:r,depthTexture:o,depthBuffer:a,stencilBuffer:c,width:l,height:u}=i;if(n.bindRenderbuffer(n.RENDERBUFFER,e),a&&!c){let h=n.DEPTH_COMPONENT24;r>0?(o&&o.isDepthTexture&&o.type===n.FLOAT&&(h=n.DEPTH_COMPONENT32F),n.renderbufferStorageMultisample(n.RENDERBUFFER,r,h,l,u)):n.renderbufferStorage(n.RENDERBUFFER,h,l,u),n.framebufferRenderbuffer(n.FRAMEBUFFER,n.DEPTH_ATTACHMENT,n.RENDERBUFFER,e)}else a&&c&&(r>0?n.renderbufferStorageMultisample(n.RENDERBUFFER,r,n.DEPTH24_STENCIL8,l,u):n.renderbufferStorage(n.RENDERBUFFER,n.DEPTH_STENCIL,l,u),n.framebufferRenderbuffer(n.FRAMEBUFFER,n.DEPTH_STENCIL_ATTACHMENT,n.RENDERBUFFER,e))}async copyTextureToBuffer(e,t,n,i,r,o){const{backend:a,gl:c}=this,{textureGPU:l,glFormat:u,glType:h}=this.backend.get(e),d=c.createFramebuffer();c.bindFramebuffer(c.READ_FRAMEBUFFER,d);const f=e.isCubeTexture?c.TEXTURE_CUBE_MAP_POSITIVE_X+o:c.TEXTURE_2D;c.framebufferTexture2D(c.READ_FRAMEBUFFER,c.COLOR_ATTACHMENT0,f,l,0);const m=this._getTypedArrayType(h),_=this._getBytesPerTexel(h,u),p=i*r*_,T=c.createBuffer();c.bindBuffer(c.PIXEL_PACK_BUFFER,T),c.bufferData(c.PIXEL_PACK_BUFFER,p,c.STREAM_READ),c.readPixels(t,n,i,r,u,h,0),c.bindBuffer(c.PIXEL_PACK_BUFFER,null),await a.utils._clientWaitAsync();const S=new m(p/m.BYTES_PER_ELEMENT);return c.bindBuffer(c.PIXEL_PACK_BUFFER,T),c.getBufferSubData(c.PIXEL_PACK_BUFFER,0,S),c.bindBuffer(c.PIXEL_PACK_BUFFER,null),c.deleteFramebuffer(d),S}_getTypedArrayType(e){const{gl:t}=this;if(e===t.UNSIGNED_BYTE)return Uint8Array;if(e===t.UNSIGNED_SHORT_4_4_4_4||e===t.UNSIGNED_SHORT_5_5_5_1||e===t.UNSIGNED_SHORT_5_6_5||e===t.UNSIGNED_SHORT)return Uint16Array;if(e===t.UNSIGNED_INT)return Uint32Array;if(e===t.HALF_FLOAT)return Uint16Array;if(e===t.FLOAT)return Float32Array;throw new Error(`Unsupported WebGL type: ${e}`)}_getBytesPerTexel(e,t){const{gl:n}=this;let i=0;if(e===n.UNSIGNED_BYTE&&(i=1),(e===n.UNSIGNED_SHORT_4_4_4_4||e===n.UNSIGNED_SHORT_5_5_5_1||e===n.UNSIGNED_SHORT_5_6_5||e===n.UNSIGNED_SHORT||e===n.HALF_FLOAT)&&(i=2),(e===n.UNSIGNED_INT||e===n.FLOAT)&&(i=4),t===n.RGBA)return i*4;if(t===n.RGB)return i*3;if(t===n.ALPHA)return i}}class u2{constructor(e){this.backend=e,this.gl=this.backend.gl,this.availableExtensions=this.gl.getSupportedExtensions(),this.extensions={}}get(e){let t=this.extensions[e];return t===void 0&&(t=this.gl.getExtension(e),this.extensions[e]=t),t}has(e){return this.availableExtensions.includes(e)}}class h2{constructor(e){this.backend=e,this.maxAnisotropy=null}getMaxAnisotropy(){if(this.maxAnisotropy!==null)return this.maxAnisotropy;const e=this.backend.gl,t=this.backend.extensions;if(t.has("EXT_texture_filter_anisotropic")===!0){const n=t.get("EXT_texture_filter_anisotropic");this.maxAnisotropy=e.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else this.maxAnisotropy=0;return this.maxAnisotropy}}const z_={WEBGL_multi_draw:"WEBGL_multi_draw",WEBGL_compressed_texture_astc:"texture-compression-astc",WEBGL_compressed_texture_etc:"texture-compression-etc2",WEBGL_compressed_texture_etc1:"texture-compression-etc1",WEBGL_compressed_texture_pvrtc:"texture-compression-pvrtc",WEBKIT_WEBGL_compressed_texture_pvrtc:"texture-compression-pvrtc",WEBGL_compressed_texture_s3tc:"texture-compression-bc",EXT_texture_compression_bptc:"texture-compression-bptc",EXT_disjoint_timer_query_webgl2:"timestamp-query"};class d2{constructor(e){this.gl=e.gl,this.extensions=e.extensions,this.info=e.renderer.info,this.mode=null,this.index=0,this.type=null,this.object=null}render(e,t){const{gl:n,mode:i,object:r,type:o,info:a,index:c}=this;c!==0?n.drawElements(i,t,o,e):n.drawArrays(i,e,t),a.update(r,t,i,1)}renderInstances(e,t,n){const{gl:i,mode:r,type:o,index:a,object:c,info:l}=this;n!==0&&(a!==0?i.drawElementsInstanced(r,t,o,e,n):i.drawArraysInstanced(r,e,t,n),l.update(c,t,r,n))}renderMultiDraw(e,t,n){const{extensions:i,mode:r,object:o,info:a}=this;if(n===0)return;const c=i.get("WEBGL_multi_draw");if(c===null)for(let l=0;l<n;l++)this.render(e[l],t[l]);else{this.index!==0?c.multiDrawElementsWEBGL(r,t,0,this.type,e,0,n):c.multiDrawArraysWEBGL(r,e,0,t,0,n);let l=0;for(let u=0;u<n;u++)l+=t[u];a.update(o,l,r,1)}}renderMultiDrawInstances(e,t,n,i){const{extensions:r,mode:o,object:a,info:c}=this;if(n===0)return;const l=r.get("WEBGL_multi_draw");if(l===null)for(let u=0;u<n;u++)this.renderInstances(e[u],t[u],i[u]);else{this.index!==0?l.multiDrawElementsInstancedWEBGL(o,t,0,this.type,e,0,i,0,n):l.multiDrawArraysInstancedWEBGL(o,e,0,t,0,i,0,n);let u=0;for(let h=0;h<n;h++)u+=t[h]*i[h];c.update(a,u,o,1)}}}class k_ extends TS{constructor(e={}){super(e),this.isWebGLBackend=!0,this.attributeUtils=null,this.extensions=null,this.capabilities=null,this.textureUtils=null,this.bufferRenderer=null,this.gl=null,this.state=null,this.utils=null,this.vaoCache={},this.transformFeedbackCache={},this.discard=!1,this.disjoint=null,this.parallel=null,this.trackTimestamp=e.trackTimestamp===!0,this._currentContext=null,this._knownBindings=new WeakSet}init(e){super.init(e);const t=this.parameters,n=t.context!==void 0?t.context:e.domElement.getContext("webgl2");function i(r){r.preventDefault();const o={api:"WebGL",message:r.statusMessage||"Unknown reason",reason:null,originalEvent:r};e.onDeviceLost(o)}this._onContextLost=i,e.domElement.addEventListener("webglcontextlost",i,!1),this.gl=n,this.extensions=new u2(this),this.capabilities=new h2(this),this.attributeUtils=new o2(this),this.textureUtils=new l2(this),this.bufferRenderer=new d2(this),this.state=new a2(this),this.utils=new c2(this),this.extensions.get("EXT_color_buffer_float"),this.extensions.get("WEBGL_clip_cull_distance"),this.extensions.get("OES_texture_float_linear"),this.extensions.get("EXT_color_buffer_half_float"),this.extensions.get("WEBGL_multisampled_render_to_texture"),this.extensions.get("WEBGL_render_shared_exponent"),this.extensions.get("WEBGL_multi_draw"),this.disjoint=this.extensions.get("EXT_disjoint_timer_query_webgl2"),this.parallel=this.extensions.get("KHR_parallel_shader_compile")}get coordinateSystem(){return ni}async getArrayBufferAsync(e){return await this.attributeUtils.getArrayBufferAsync(e)}async waitForGPU(){await this.utils._clientWaitAsync()}initTimestampQuery(e){if(!this.disjoint||!this.trackTimestamp)return;const t=this.get(e);if(this.queryRunning){t.queryQueue||(t.queryQueue=[]),t.queryQueue.push(e);return}t.activeQuery&&(this.gl.endQuery(this.disjoint.TIME_ELAPSED_EXT),t.activeQuery=null),t.activeQuery=this.gl.createQuery(),t.activeQuery!==null&&(this.gl.beginQuery(this.disjoint.TIME_ELAPSED_EXT,t.activeQuery),this.queryRunning=!0)}prepareTimestampBuffer(e){if(!this.disjoint||!this.trackTimestamp)return;const t=this.get(e);if(t.activeQuery&&(this.gl.endQuery(this.disjoint.TIME_ELAPSED_EXT),t.gpuQueries||(t.gpuQueries=[]),t.gpuQueries.push({query:t.activeQuery}),t.activeQuery=null,this.queryRunning=!1,t.queryQueue&&t.queryQueue.length>0)){const n=t.queryQueue.shift();this.initTimestampQuery(n)}}async resolveTimestampAsync(e,t="render"){if(!this.disjoint||!this.trackTimestamp)return;const n=this.get(e);n.gpuQueries||(n.gpuQueries=[]);for(let i=0;i<n.gpuQueries.length;i++){const r=n.gpuQueries[i],o=this.gl.getQueryParameter(r.query,this.gl.QUERY_RESULT_AVAILABLE),a=this.gl.getParameter(this.disjoint.GPU_DISJOINT_EXT);if(o&&!a){const c=this.gl.getQueryParameter(r.query,this.gl.QUERY_RESULT),l=Number(c)/1e6;this.gl.deleteQuery(r.query),n.gpuQueries.splice(i,1),i--,this.renderer.info.updateTimestamp(t,l)}}}getContext(){return this.gl}beginRender(e){const{gl:t}=this,n=this.get(e);if(this.initTimestampQuery(e),n.previousContext=this._currentContext,this._currentContext=e,this._setFramebuffer(e),this.clear(e.clearColor,e.clearDepth,e.clearStencil,e,!1),e.viewport?this.updateViewport(e):t.viewport(0,0,t.drawingBufferWidth,t.drawingBufferHeight),e.scissor){const{x:r,y:o,width:a,height:c}=e.scissorValue;t.scissor(r,e.height-c-o,a,c)}const i=e.occlusionQueryCount;i>0&&(n.currentOcclusionQueries=n.occlusionQueries,n.currentOcclusionQueryObjects=n.occlusionQueryObjects,n.lastOcclusionObject=null,n.occlusionQueries=new Array(i),n.occlusionQueryObjects=new Array(i),n.occlusionQueryIndex=0)}finishRender(e){const{gl:t,state:n}=this,i=this.get(e),r=i.previousContext,o=e.occlusionQueryCount;o>0&&(o>i.occlusionQueryIndex&&t.endQuery(t.ANY_SAMPLES_PASSED),this.resolveOccludedAsync(e));const a=e.textures;if(a!==null)for(let c=0;c<a.length;c++){const l=a[c];l.generateMipmaps&&this.generateMipmaps(l)}if(this._currentContext=r,e.textures!==null&&e.renderTarget){const c=this.get(e.renderTarget),{samples:l}=e.renderTarget;if(l>0){const u=c.framebuffers[e.getCacheKey()],h=t.COLOR_BUFFER_BIT,d=c.msaaFrameBuffer,f=e.textures;n.bindFramebuffer(t.READ_FRAMEBUFFER,d),n.bindFramebuffer(t.DRAW_FRAMEBUFFER,u);for(let m=0;m<f.length;m++)if(e.scissor){const{x:_,y:g,width:p,height:T}=e.scissorValue,S=e.height-T-g;t.blitFramebuffer(_,S,_+p,S+T,_,S,_+p,S+T,h,t.NEAREST),t.invalidateSubFramebuffer(t.READ_FRAMEBUFFER,c.invalidationArray,_,S,p,T)}else t.blitFramebuffer(0,0,e.width,e.height,0,0,e.width,e.height,h,t.NEAREST),t.invalidateFramebuffer(t.READ_FRAMEBUFFER,c.invalidationArray)}}r!==null&&(this._setFramebuffer(r),r.viewport?this.updateViewport(r):t.viewport(0,0,t.drawingBufferWidth,t.drawingBufferHeight)),this.prepareTimestampBuffer(e)}resolveOccludedAsync(e){const t=this.get(e),{currentOcclusionQueries:n,currentOcclusionQueryObjects:i}=t;if(n&&i){const r=new WeakSet,{gl:o}=this;t.currentOcclusionQueryObjects=null,t.currentOcclusionQueries=null;const a=()=>{let c=0;for(let l=0;l<n.length;l++){const u=n[l];u!==null&&o.getQueryParameter(u,o.QUERY_RESULT_AVAILABLE)&&(o.getQueryParameter(u,o.QUERY_RESULT)>0&&r.add(i[l]),n[l]=null,o.deleteQuery(u),c++)}c<n.length?requestAnimationFrame(a):t.occluded=r};a()}}isOccluded(e,t){const n=this.get(e);return n.occluded&&n.occluded.has(t)}updateViewport(e){const t=this.gl,{x:n,y:i,width:r,height:o}=e.viewportValue;t.viewport(n,e.height-o-i,r,o)}setScissorTest(e){const t=this.gl;e?t.enable(t.SCISSOR_TEST):t.disable(t.SCISSOR_TEST)}clear(e,t,n,i=null,r=!0){const{gl:o}=this;if(i===null){const c=this.getClearColor();c.r*=c.a,c.g*=c.a,c.b*=c.a,i={textures:null,clearColorValue:c}}let a=0;if(e&&(a|=o.COLOR_BUFFER_BIT),t&&(a|=o.DEPTH_BUFFER_BIT),n&&(a|=o.STENCIL_BUFFER_BIT),a!==0){let c;if(i.clearColorValue?c=i.clearColorValue:(c=this.getClearColor(),c.r*=c.a,c.g*=c.a,c.b*=c.a),t&&this.state.setDepthMask(!0),i.textures===null)o.clearColor(c.r,c.g,c.b,c.a),o.clear(a);else{if(r&&this._setFramebuffer(i),e)for(let l=0;l<i.textures.length;l++)o.clearBufferfv(o.COLOR,l,[c.r,c.g,c.b,c.a]);t&&n?o.clearBufferfi(o.DEPTH_STENCIL,0,1,0):t?o.clearBufferfv(o.DEPTH,0,[1]):n&&o.clearBufferiv(o.STENCIL,0,[0])}}}beginCompute(e){const{state:t,gl:n}=this;t.bindFramebuffer(n.FRAMEBUFFER,null),this.initTimestampQuery(e)}compute(e,t,n,i){const{state:r,gl:o}=this;this.discard===!1&&(o.enable(o.RASTERIZER_DISCARD),this.discard=!0);const{programGPU:a,transformBuffers:c,attributes:l}=this.get(i),u=this._getVaoKey(null,l),h=this.vaoCache[u];h===void 0?this._createVao(null,l):o.bindVertexArray(h),r.useProgram(a),this._bindUniforms(n);const d=this._getTransformFeedback(c);o.bindTransformFeedback(o.TRANSFORM_FEEDBACK,d),o.beginTransformFeedback(o.POINTS),l[0].isStorageInstancedBufferAttribute?o.drawArraysInstanced(o.POINTS,0,1,t.count):o.drawArrays(o.POINTS,0,t.count),o.endTransformFeedback(),o.bindTransformFeedback(o.TRANSFORM_FEEDBACK,null);for(let f=0;f<c.length;f++){const m=c[f];m.pbo&&this.textureUtils.copyBufferToTexture(m.transformBuffer,m.pbo),m.switchBuffers()}}finishCompute(e){const t=this.gl;this.discard=!1,t.disable(t.RASTERIZER_DISCARD),this.prepareTimestampBuffer(e),this._currentContext&&this._setFramebuffer(this._currentContext)}draw(e){const{object:t,pipeline:n,material:i,context:r,hardwareClippingPlanes:o}=e,{programGPU:a}=this.get(n),{gl:c,state:l}=this,u=this.get(r),h=e.getDrawParameters();if(h===null)return;this._bindUniforms(e.getBindings());const d=t.isMesh&&t.matrixWorld.determinant()<0;l.setMaterial(i,d,o),l.useProgram(a);const f=this.get(e);let m=f.staticVao;if(m===void 0||f.geometryId!==e.geometry.id){const P=this._getVaoKey(e.getIndex(),e.getAttributes());if(m=this.vaoCache[P],m===void 0){let N;({vaoGPU:m,staticVao:N}=this._createVao(e.getIndex(),e.getAttributes())),N&&(f.staticVao=m,f.geometryId=e.geometry.id)}}c.bindVertexArray(m);const _=e.getIndex(),g=u.lastOcclusionObject;if(g!==t&&g!==void 0){if(g!==null&&g.occlusionTest===!0&&(c.endQuery(c.ANY_SAMPLES_PASSED),u.occlusionQueryIndex++),t.occlusionTest===!0){const P=c.createQuery();c.beginQuery(c.ANY_SAMPLES_PASSED,P),u.occlusionQueries[u.occlusionQueryIndex]=P,u.occlusionQueryObjects[u.occlusionQueryIndex]=t}u.lastOcclusionObject=t}const p=this.bufferRenderer;t.isPoints?p.mode=c.POINTS:t.isLineSegments?p.mode=c.LINES:t.isLine?p.mode=c.LINE_STRIP:t.isLineLoop?p.mode=c.LINE_LOOP:i.wireframe===!0?(l.setLineWidth(i.wireframeLinewidth*this.renderer.getPixelRatio()),p.mode=c.LINES):p.mode=c.TRIANGLES;const{vertexCount:T,instanceCount:S}=h;let{firstVertex:v}=h;if(p.object=t,_!==null){v*=_.array.BYTES_PER_ELEMENT;const P=this.get(_);p.index=_.count,p.type=P.type}else p.index=0;t.isBatchedMesh?t._multiDrawInstances!==null?p.renderMultiDrawInstances(t._multiDrawStarts,t._multiDrawCounts,t._multiDrawCount,t._multiDrawInstances):this.hasFeature("WEBGL_multi_draw")?p.renderMultiDraw(t._multiDrawStarts,t._multiDrawCounts,t._multiDrawCount):jr("THREE.WebGLRenderer: WEBGL_multi_draw not supported."):S>1?p.renderInstances(v,T,S):p.render(v,T),c.bindVertexArray(null)}needsRenderUpdate(){return!1}getRenderCacheKey(){return""}createDefaultTexture(e){this.textureUtils.createDefaultTexture(e)}createTexture(e,t){this.textureUtils.createTexture(e,t)}updateTexture(e,t){this.textureUtils.updateTexture(e,t)}generateMipmaps(e){this.textureUtils.generateMipmaps(e)}destroyTexture(e){this.textureUtils.destroyTexture(e)}copyTextureToBuffer(e,t,n,i,r,o){return this.textureUtils.copyTextureToBuffer(e,t,n,i,r,o)}createSampler(){}destroySampler(){}createNodeBuilder(e,t){return new i2(e,t)}createProgram(e){const t=this.gl,{stage:n,code:i}=e,r=n==="fragment"?t.createShader(t.FRAGMENT_SHADER):t.createShader(t.VERTEX_SHADER);t.shaderSource(r,i),t.compileShader(r),this.set(e,{shaderGPU:r})}destroyProgram(e){this.delete(e)}createRenderPipeline(e,t){const n=this.gl,i=e.pipeline,{fragmentProgram:r,vertexProgram:o}=i,a=n.createProgram(),c=this.get(r).shaderGPU,l=this.get(o).shaderGPU;if(n.attachShader(a,c),n.attachShader(a,l),n.linkProgram(a),this.set(i,{programGPU:a,fragmentShader:c,vertexShader:l}),t!==null&&this.parallel){const u=new Promise(h=>{const d=this.parallel,f=()=>{n.getProgramParameter(a,d.COMPLETION_STATUS_KHR)?(this._completeCompile(e,i),h()):requestAnimationFrame(f)};f()});t.push(u);return}this._completeCompile(e,i)}_handleSource(e,t){const n=e.split(`
`),i=[],r=Math.max(t-6,0),o=Math.min(t+6,n.length);for(let a=r;a<o;a++){const c=a+1;i.push(`${c===t?">":" "} ${c}: ${n[a]}`)}return i.join(`
`)}_getShaderErrors(e,t,n){const i=e.getShaderParameter(t,e.COMPILE_STATUS),r=e.getShaderInfoLog(t).trim();if(i&&r==="")return"";const o=/ERROR: 0:(\d+)/.exec(r);if(o){const a=parseInt(o[1]);return n.toUpperCase()+`

`+r+`

`+this._handleSource(e.getShaderSource(t),a)}else return r}_logProgramError(e,t,n){if(this.renderer.debug.checkShaderErrors){const i=this.gl,r=i.getProgramInfoLog(e).trim();if(i.getProgramParameter(e,i.LINK_STATUS)===!1)if(typeof this.renderer.debug.onShaderError=="function")this.renderer.debug.onShaderError(i,e,n,t);else{const o=this._getShaderErrors(i,n,"vertex"),a=this._getShaderErrors(i,t,"fragment");console.error("THREE.WebGLProgram: Shader Error "+i.getError()+" - VALIDATE_STATUS "+i.getProgramParameter(e,i.VALIDATE_STATUS)+`

Program Info Log: `+r+`
`+o+`
`+a)}else r!==""&&console.warn("THREE.WebGLProgram: Program Info Log:",r)}}_completeCompile(e,t){const{state:n,gl:i}=this,r=this.get(t),{programGPU:o,fragmentShader:a,vertexShader:c}=r;i.getProgramParameter(o,i.LINK_STATUS)===!1&&this._logProgramError(o,a,c),n.useProgram(o);const l=e.getBindings();this._setupBindings(l,o),this.set(t,{programGPU:o})}createComputePipeline(e,t){const{state:n,gl:i}=this,r={stage:"fragment",code:`#version 300 es
precision highp float;
void main() {}`};this.createProgram(r);const{computeProgram:o}=e,a=i.createProgram(),c=this.get(r).shaderGPU,l=this.get(o).shaderGPU,u=o.transforms,h=[],d=[];for(let g=0;g<u.length;g++){const p=u[g];h.push(p.varyingName),d.push(p.attributeNode)}i.attachShader(a,c),i.attachShader(a,l),i.transformFeedbackVaryings(a,h,i.SEPARATE_ATTRIBS),i.linkProgram(a),i.getProgramParameter(a,i.LINK_STATUS)===!1&&this._logProgramError(a,c,l),n.useProgram(a),this._setupBindings(t,a);const f=o.attributes,m=[],_=[];for(let g=0;g<f.length;g++){const p=f[g].node.attribute;m.push(p),this.has(p)||this.attributeUtils.createAttribute(p,i.ARRAY_BUFFER)}for(let g=0;g<d.length;g++){const p=d[g].attribute;this.has(p)||this.attributeUtils.createAttribute(p,i.ARRAY_BUFFER);const T=this.get(p);_.push(T)}this.set(e,{programGPU:a,transformBuffers:_,attributes:m})}createBindings(e,t){if(this._knownBindings.has(t)===!1){this._knownBindings.add(t);let n=0,i=0;for(const r of t){this.set(r,{textures:i,uniformBuffers:n});for(const o of r.bindings)o.isUniformBuffer&&n++,o.isSampledTexture&&i++}}this.updateBindings(e,t)}updateBindings(e){const{gl:t}=this,n=this.get(e);let i=n.uniformBuffers,r=n.textures;for(const o of e.bindings)if(o.isUniformsGroup||o.isUniformBuffer){const a=o.buffer,c=t.createBuffer();t.bindBuffer(t.UNIFORM_BUFFER,c),t.bufferData(t.UNIFORM_BUFFER,a,t.DYNAMIC_DRAW),this.set(o,{index:i++,bufferGPU:c})}else if(o.isSampledTexture){const{textureGPU:a,glTextureType:c}=this.get(o.texture);this.set(o,{index:r++,textureGPU:a,glTextureType:c})}}updateBinding(e){const t=this.gl;if(e.isUniformsGroup||e.isUniformBuffer){const i=this.get(e).bufferGPU,r=e.buffer;t.bindBuffer(t.UNIFORM_BUFFER,i),t.bufferData(t.UNIFORM_BUFFER,r,t.DYNAMIC_DRAW)}}createIndexAttribute(e){const t=this.gl;this.attributeUtils.createAttribute(e,t.ELEMENT_ARRAY_BUFFER)}createAttribute(e){if(this.has(e))return;const t=this.gl;this.attributeUtils.createAttribute(e,t.ARRAY_BUFFER)}createStorageAttribute(e){if(this.has(e))return;const t=this.gl;this.attributeUtils.createAttribute(e,t.ARRAY_BUFFER)}updateAttribute(e){this.attributeUtils.updateAttribute(e)}destroyAttribute(e){this.attributeUtils.destroyAttribute(e)}hasFeature(e){const t=Object.keys(z_).filter(i=>z_[i]===e),n=this.extensions;for(let i=0;i<t.length;i++)if(n.has(t[i]))return!0;return!1}getMaxAnisotropy(){return this.capabilities.getMaxAnisotropy()}copyTextureToTexture(e,t,n=null,i=null,r=0){this.textureUtils.copyTextureToTexture(e,t,n,i,r)}copyFramebufferToTexture(e,t,n){this.textureUtils.copyFramebufferToTexture(e,t,n)}_setFramebuffer(e){const{gl:t,state:n}=this;let i=null;if(e.textures!==null){const r=e.renderTarget,o=this.get(r),{samples:a,depthBuffer:c,stencilBuffer:l}=r,u=r.isWebGLCubeRenderTarget===!0,h=r.isRenderTarget3D===!0,d=r.isRenderTargetArray===!0;let f=o.msaaFrameBuffer,m=o.depthRenderbuffer;const _=_T(e);let g;if(u?(o.cubeFramebuffers||(o.cubeFramebuffers={}),g=o.cubeFramebuffers[_]):(o.framebuffers||(o.framebuffers={}),g=o.framebuffers[_]),g===void 0){g=t.createFramebuffer(),n.bindFramebuffer(t.FRAMEBUFFER,g);const p=e.textures;if(u){o.cubeFramebuffers[_]=g;const{textureGPU:T}=this.get(p[0]),S=this.renderer._activeCubeFace;t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_CUBE_MAP_POSITIVE_X+S,T,0)}else{o.framebuffers[_]=g;for(let T=0;T<p.length;T++){const S=p[T],v=this.get(S);v.renderTarget=e.renderTarget,v.cacheKey=_;const P=t.COLOR_ATTACHMENT0+T;if(h||d){const N=this.renderer._activeCubeFace;t.framebufferTextureLayer(t.FRAMEBUFFER,P,v.textureGPU,0,N)}else t.framebufferTexture2D(t.FRAMEBUFFER,P,t.TEXTURE_2D,v.textureGPU,0)}n.drawBuffers(e,g)}if(e.depthTexture!==null){const T=this.get(e.depthTexture),S=l?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;T.renderTarget=e.renderTarget,T.cacheKey=_,t.framebufferTexture2D(t.FRAMEBUFFER,S,t.TEXTURE_2D,T.textureGPU,0)}}if(a>0){if(f===void 0){const p=[];f=t.createFramebuffer(),n.bindFramebuffer(t.FRAMEBUFFER,f);const T=[],S=e.textures;for(let v=0;v<S.length;v++){if(T[v]=t.createRenderbuffer(),t.bindRenderbuffer(t.RENDERBUFFER,T[v]),p.push(t.COLOR_ATTACHMENT0+v),c){const w=l?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;p.push(w)}const P=e.textures[v],N=this.get(P);t.renderbufferStorageMultisample(t.RENDERBUFFER,a,N.glInternalFormat,e.width,e.height),t.framebufferRenderbuffer(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0+v,t.RENDERBUFFER,T[v])}if(o.msaaFrameBuffer=f,o.msaaRenderbuffers=T,m===void 0){m=t.createRenderbuffer(),this.textureUtils.setupRenderBufferStorage(m,e),o.depthRenderbuffer=m;const v=l?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;p.push(v)}o.invalidationArray=p}i=o.msaaFrameBuffer}else i=g}n.bindFramebuffer(t.FRAMEBUFFER,i)}_getVaoKey(e,t){let n="";if(e!==null){const i=this.get(e);n+=":"+i.id}for(let i=0;i<t.length;i++){const r=this.get(t[i]);n+=":"+r.id}return n}_createVao(e,t){const{gl:n}=this,i=n.createVertexArray();let r="",o=!0;if(n.bindVertexArray(i),e!==null){const a=this.get(e);n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,a.bufferGPU),r+=":"+a.id}for(let a=0;a<t.length;a++){const c=t[a],l=this.get(c);r+=":"+l.id,n.bindBuffer(n.ARRAY_BUFFER,l.bufferGPU),n.enableVertexAttribArray(a),(c.isStorageBufferAttribute||c.isStorageInstancedBufferAttribute)&&(o=!1);let u,h;c.isInterleavedBufferAttribute===!0?(u=c.data.stride*l.bytesPerElement,h=c.offset*l.bytesPerElement):(u=0,h=0),l.isInteger?n.vertexAttribIPointer(a,c.itemSize,l.type,u,h):n.vertexAttribPointer(a,c.itemSize,l.type,c.normalized,u,h),c.isInstancedBufferAttribute&&!c.isInterleavedBufferAttribute?n.vertexAttribDivisor(a,c.meshPerAttribute):c.isInterleavedBufferAttribute&&c.data.isInstancedInterleavedBuffer&&n.vertexAttribDivisor(a,c.data.meshPerAttribute)}return n.bindBuffer(n.ARRAY_BUFFER,null),this.vaoCache[r]=i,{vaoGPU:i,staticVao:o}}_getTransformFeedback(e){let t="";for(let r=0;r<e.length;r++)t+=":"+e[r].id;let n=this.transformFeedbackCache[t];if(n!==void 0)return n;const{gl:i}=this;n=i.createTransformFeedback(),i.bindTransformFeedback(i.TRANSFORM_FEEDBACK,n);for(let r=0;r<e.length;r++){const o=e[r];i.bindBufferBase(i.TRANSFORM_FEEDBACK_BUFFER,r,o.transformBuffer)}return i.bindTransformFeedback(i.TRANSFORM_FEEDBACK,null),this.transformFeedbackCache[t]=n,n}_setupBindings(e,t){const n=this.gl;for(const i of e)for(const r of i.bindings){const a=this.get(r).index;if(r.isUniformsGroup||r.isUniformBuffer){const c=n.getUniformBlockIndex(t,r.name);n.uniformBlockBinding(t,c,a)}else if(r.isSampledTexture){const c=n.getUniformLocation(t,r.name);n.uniform1i(c,a)}}}_bindUniforms(e){const{gl:t,state:n}=this;for(const i of e)for(const r of i.bindings){const o=this.get(r),a=o.index;r.isUniformsGroup||r.isUniformBuffer?n.bindBufferBase(t.UNIFORM_BUFFER,a,o.bufferGPU):r.isSampledTexture&&n.bindTexture(o.glTextureType,o.textureGPU,t.TEXTURE0+a)}}dispose(){this.renderer.domElement.removeEventListener("webglcontextlost",this._onContextLost)}}const ca={PointList:"point-list",LineList:"line-list",LineStrip:"line-strip",TriangleList:"triangle-list",TriangleStrip:"triangle-strip"},wn={Never:"never",Less:"less",Equal:"equal",LessEqual:"less-equal",Greater:"greater",NotEqual:"not-equal",GreaterEqual:"greater-equal",Always:"always"},Fn={Store:"store",Discard:"discard"},sn={Load:"load",Clear:"clear"},jd={CCW:"ccw",CW:"cw"},Kd={None:"none",Front:"front",Back:"back"},Ja={Uint16:"uint16",Uint32:"uint32"},L={R8Unorm:"r8unorm",R8Snorm:"r8snorm",R8Uint:"r8uint",R8Sint:"r8sint",R16Uint:"r16uint",R16Sint:"r16sint",R16Float:"r16float",RG8Unorm:"rg8unorm",RG8Snorm:"rg8snorm",RG8Uint:"rg8uint",RG8Sint:"rg8sint",R32Uint:"r32uint",R32Sint:"r32sint",R32Float:"r32float",RG16Uint:"rg16uint",RG16Sint:"rg16sint",RG16Float:"rg16float",RGBA8Unorm:"rgba8unorm",RGBA8UnormSRGB:"rgba8unorm-srgb",RGBA8Snorm:"rgba8snorm",RGBA8Uint:"rgba8uint",RGBA8Sint:"rgba8sint",BGRA8Unorm:"bgra8unorm",BGRA8UnormSRGB:"bgra8unorm-srgb",RGB9E5UFloat:"rgb9e5ufloat",RGB10A2Unorm:"rgb10a2unorm",RG11B10uFloat:"rgb10a2unorm",RG32Uint:"rg32uint",RG32Sint:"rg32sint",RG32Float:"rg32float",RGBA16Uint:"rgba16uint",RGBA16Sint:"rgba16sint",RGBA16Float:"rgba16float",RGBA32Uint:"rgba32uint",RGBA32Sint:"rgba32sint",RGBA32Float:"rgba32float",Stencil8:"stencil8",Depth16Unorm:"depth16unorm",Depth24Plus:"depth24plus",Depth24PlusStencil8:"depth24plus-stencil8",Depth32Float:"depth32float",Depth32FloatStencil8:"depth32float-stencil8",BC1RGBAUnorm:"bc1-rgba-unorm",BC1RGBAUnormSRGB:"bc1-rgba-unorm-srgb",BC2RGBAUnorm:"bc2-rgba-unorm",BC2RGBAUnormSRGB:"bc2-rgba-unorm-srgb",BC3RGBAUnorm:"bc3-rgba-unorm",BC3RGBAUnormSRGB:"bc3-rgba-unorm-srgb",BC4RUnorm:"bc4-r-unorm",BC4RSnorm:"bc4-r-snorm",BC5RGUnorm:"bc5-rg-unorm",BC5RGSnorm:"bc5-rg-snorm",BC6HRGBUFloat:"bc6h-rgb-ufloat",BC6HRGBFloat:"bc6h-rgb-float",BC7RGBAUnorm:"bc7-rgba-unorm",BC7RGBAUnormSRGB:"bc7-rgba-srgb",ETC2RGB8Unorm:"etc2-rgb8unorm",ETC2RGB8UnormSRGB:"etc2-rgb8unorm-srgb",ETC2RGB8A1Unorm:"etc2-rgb8a1unorm",ETC2RGB8A1UnormSRGB:"etc2-rgb8a1unorm-srgb",ETC2RGBA8Unorm:"etc2-rgba8unorm",ETC2RGBA8UnormSRGB:"etc2-rgba8unorm-srgb",EACR11Unorm:"eac-r11unorm",EACR11Snorm:"eac-r11snorm",EACRG11Unorm:"eac-rg11unorm",EACRG11Snorm:"eac-rg11snorm",ASTC4x4Unorm:"astc-4x4-unorm",ASTC4x4UnormSRGB:"astc-4x4-unorm-srgb",ASTC5x4Unorm:"astc-5x4-unorm",ASTC5x4UnormSRGB:"astc-5x4-unorm-srgb",ASTC5x5Unorm:"astc-5x5-unorm",ASTC5x5UnormSRGB:"astc-5x5-unorm-srgb",ASTC6x5Unorm:"astc-6x5-unorm",ASTC6x5UnormSRGB:"astc-6x5-unorm-srgb",ASTC6x6Unorm:"astc-6x6-unorm",ASTC6x6UnormSRGB:"astc-6x6-unorm-srgb",ASTC8x5Unorm:"astc-8x5-unorm",ASTC8x5UnormSRGB:"astc-8x5-unorm-srgb",ASTC8x6Unorm:"astc-8x6-unorm",ASTC8x6UnormSRGB:"astc-8x6-unorm-srgb",ASTC8x8Unorm:"astc-8x8-unorm",ASTC8x8UnormSRGB:"astc-8x8-unorm-srgb",ASTC10x5Unorm:"astc-10x5-unorm",ASTC10x5UnormSRGB:"astc-10x5-unorm-srgb",ASTC10x6Unorm:"astc-10x6-unorm",ASTC10x6UnormSRGB:"astc-10x6-unorm-srgb",ASTC10x8Unorm:"astc-10x8-unorm",ASTC10x8UnormSRGB:"astc-10x8-unorm-srgb",ASTC10x10Unorm:"astc-10x10-unorm",ASTC10x10UnormSRGB:"astc-10x10-unorm-srgb",ASTC12x10Unorm:"astc-12x10-unorm",ASTC12x10UnormSRGB:"astc-12x10-unorm-srgb",ASTC12x12Unorm:"astc-12x12-unorm",ASTC12x12UnormSRGB:"astc-12x12-unorm-srgb"},Zd={ClampToEdge:"clamp-to-edge",Repeat:"repeat",MirrorRepeat:"mirror-repeat"},Qr={Linear:"linear",Nearest:"nearest"},Je={Zero:"zero",One:"one",Src:"src",OneMinusSrc:"one-minus-src",SrcAlpha:"src-alpha",OneMinusSrcAlpha:"one-minus-src-alpha",Dst:"dst",OneMinusDstColor:"one-minus-dst",DstAlpha:"dst-alpha",OneMinusDstAlpha:"one-minus-dst-alpha",SrcAlphaSaturated:"src-alpha-saturated",Constant:"constant",OneMinusConstant:"one-minus-constant"},$r={Add:"add",Subtract:"subtract",ReverseSubtract:"reverse-subtract",Min:"min",Max:"max"},H_={None:0,Red:1,Green:2,Blue:4,Alpha:8,All:15},cr={Keep:"keep",Zero:"zero",Replace:"replace",Invert:"invert",IncrementClamp:"increment-clamp",DecrementClamp:"decrement-clamp",IncrementWrap:"increment-wrap",DecrementWrap:"decrement-wrap"},Qd={Uniform:"uniform",Storage:"storage",ReadOnlyStorage:"read-only-storage"},Jd={WriteOnly:"write-only",ReadOnly:"read-only",ReadWrite:"read-write"},Qo={Float:"float",UnfilterableFloat:"unfilterable-float",Depth:"depth",SInt:"sint",UInt:"uint"},W_={OneD:"1d",TwoD:"2d",ThreeD:"3d"},Jn={OneD:"1d",TwoD:"2d",TwoDArray:"2d-array",Cube:"cube",CubeArray:"cube-array",ThreeD:"3d"},f2={All:"all",StencilOnly:"stencil-only",DepthOnly:"depth-only"},Eu={Vertex:"vertex",Instance:"instance"},wf={DepthClipControl:"depth-clip-control",Depth32FloatStencil8:"depth32float-stencil8",TextureCompressionBC:"texture-compression-bc",TextureCompressionETC2:"texture-compression-etc2",TextureCompressionASTC:"texture-compression-astc",TimestampQuery:"timestamp-query",IndirectFirstInstance:"indirect-first-instance",ShaderF16:"shader-f16",RG11B10UFloat:"rg11b10ufloat-renderable",BGRA8UNormStorage:"bgra8unorm-storage",Float32Filterable:"float32-filterable",ClipDistances:"clip-distances",DualSourceBlending:"dual-source-blending",Subgroups:"subgroups"};class p2 extends Dm{constructor(e,t){super(e),this.texture=t,this.version=t?t.version:0,this.isSampler=!0}}class m2 extends p2{constructor(e,t,n){super(e,t?t.value:null),this.textureNode=t,this.groupNode=n}update(){this.texture=this.textureNode.value}}class g2 extends mS{constructor(e,t){super(e,t?t.array:null),this.attribute=t,this.isStorageBuffer=!0}}let _2=0;class x2 extends g2{constructor(e,t){super("StorageBuffer_"+_2++,e?e.value:null),this.nodeUniform=e,this.access=e?e.access:Vn.READ_WRITE,this.groupNode=t}get buffer(){return this.nodeUniform.value}}class y2 extends Lr{constructor(e){super(),this.device=e;const t=`
struct VarysStruct {
	@builtin( position ) Position: vec4<f32>,
	@location( 0 ) vTex : vec2<f32>
};

@vertex
fn main( @builtin( vertex_index ) vertexIndex : u32 ) -> VarysStruct {

	var Varys : VarysStruct;

	var pos = array< vec2<f32>, 4 >(
		vec2<f32>( -1.0,  1.0 ),
		vec2<f32>(  1.0,  1.0 ),
		vec2<f32>( -1.0, -1.0 ),
		vec2<f32>(  1.0, -1.0 )
	);

	var tex = array< vec2<f32>, 4 >(
		vec2<f32>( 0.0, 0.0 ),
		vec2<f32>( 1.0, 0.0 ),
		vec2<f32>( 0.0, 1.0 ),
		vec2<f32>( 1.0, 1.0 )
	);

	Varys.vTex = tex[ vertexIndex ];
	Varys.Position = vec4<f32>( pos[ vertexIndex ], 0.0, 1.0 );

	return Varys;

}
`,n=`
@group( 0 ) @binding( 0 )
var imgSampler : sampler;

@group( 0 ) @binding( 1 )
var img : texture_2d<f32>;

@fragment
fn main( @location( 0 ) vTex : vec2<f32> ) -> @location( 0 ) vec4<f32> {

	return textureSample( img, imgSampler, vTex );

}
`,i=`
@group( 0 ) @binding( 0 )
var imgSampler : sampler;

@group( 0 ) @binding( 1 )
var img : texture_2d<f32>;

@fragment
fn main( @location( 0 ) vTex : vec2<f32> ) -> @location( 0 ) vec4<f32> {

	return textureSample( img, imgSampler, vec2( vTex.x, 1.0 - vTex.y ) );

}
`;this.mipmapSampler=e.createSampler({minFilter:Qr.Linear}),this.flipYSampler=e.createSampler({minFilter:Qr.Nearest}),this.transferPipelines={},this.flipYPipelines={},this.mipmapVertexShaderModule=e.createShaderModule({label:"mipmapVertex",code:t}),this.mipmapFragmentShaderModule=e.createShaderModule({label:"mipmapFragment",code:n}),this.flipYFragmentShaderModule=e.createShaderModule({label:"flipYFragment",code:i})}getTransferPipeline(e){let t=this.transferPipelines[e];return t===void 0&&(t=this.device.createRenderPipeline({label:`mipmap-${e}`,vertex:{module:this.mipmapVertexShaderModule,entryPoint:"main"},fragment:{module:this.mipmapFragmentShaderModule,entryPoint:"main",targets:[{format:e}]},primitive:{topology:ca.TriangleStrip,stripIndexFormat:Ja.Uint32},layout:"auto"}),this.transferPipelines[e]=t),t}getFlipYPipeline(e){let t=this.flipYPipelines[e];return t===void 0&&(t=this.device.createRenderPipeline({label:`flipY-${e}`,vertex:{module:this.mipmapVertexShaderModule,entryPoint:"main"},fragment:{module:this.flipYFragmentShaderModule,entryPoint:"main",targets:[{format:e}]},primitive:{topology:ca.TriangleStrip,stripIndexFormat:Ja.Uint32},layout:"auto"}),this.flipYPipelines[e]=t),t}flipY(e,t,n=0){const i=t.format,{width:r,height:o}=t.size,a=this.getTransferPipeline(i),c=this.getFlipYPipeline(i),l=this.device.createTexture({size:{width:r,height:o,depthOrArrayLayers:1},format:i,usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING}),u=e.createView({baseMipLevel:0,mipLevelCount:1,dimension:Jn.TwoD,baseArrayLayer:n}),h=l.createView({baseMipLevel:0,mipLevelCount:1,dimension:Jn.TwoD,baseArrayLayer:0}),d=this.device.createCommandEncoder({}),f=(m,_,g)=>{const p=m.getBindGroupLayout(0),T=this.device.createBindGroup({layout:p,entries:[{binding:0,resource:this.flipYSampler},{binding:1,resource:_}]}),S=d.beginRenderPass({colorAttachments:[{view:g,loadOp:sn.Clear,storeOp:Fn.Store,clearValue:[0,0,0,0]}]});S.setPipeline(m),S.setBindGroup(0,T),S.draw(4,1,0,0),S.end()};f(a,u,h),f(c,h,u),this.device.queue.submit([d.finish()]),l.destroy()}generateMipmaps(e,t,n=0){const i=this.get(e);i.useCount===void 0&&(i.useCount=0,i.layers=[]);const r=i.layers[n]||this._mipmapCreateBundles(e,t,n),o=this.device.createCommandEncoder({});this._mipmapRunBundles(o,r),this.device.queue.submit([o.finish()]),i.useCount!==0&&(i.layers[n]=r),i.useCount++}_mipmapCreateBundles(e,t,n){const i=this.getTransferPipeline(t.format),r=i.getBindGroupLayout(0);let o=e.createView({baseMipLevel:0,mipLevelCount:1,dimension:Jn.TwoD,baseArrayLayer:n});const a=[];for(let c=1;c<t.mipLevelCount;c++){const l=this.device.createBindGroup({layout:r,entries:[{binding:0,resource:this.mipmapSampler},{binding:1,resource:o}]}),u=e.createView({baseMipLevel:c,mipLevelCount:1,dimension:Jn.TwoD,baseArrayLayer:n}),h={colorAttachments:[{view:u,loadOp:sn.Clear,storeOp:Fn.Store,clearValue:[0,0,0,0]}]},d=this.device.createRenderBundleEncoder({colorFormats:[t.format]});d.setPipeline(i),d.setBindGroup(0,l),d.draw(4,1,0,0),a.push({renderBundles:[d.finish()],passDescriptor:h}),o=u}return a}_mipmapRunBundles(e,t){const n=t.length;for(let i=0;i<n;i++){const r=t[i],o=e.beginRenderPass(r.passDescriptor);o.executeBundles(r.renderBundles),o.end()}}}const v2={[ep]:"never",[ch]:"less",[tp]:"equal",[lh]:"less-equal",[np]:"greater",[sp]:"greater-equal",[rp]:"always",[ip]:"not-equal"},T2=[0,1,3,2,4,5];class S2{constructor(e){this.backend=e,this._passUtils=null,this.defaultTexture={},this.defaultCubeTexture={},this.defaultVideoFrame=null,this.colorBuffer=null,this.depthTexture=new Qs,this.depthTexture.name="depthBuffer"}createSampler(e){const t=this.backend,n=t.device,i=t.get(e),r={addressModeU:this._convertAddressMode(e.wrapS),addressModeV:this._convertAddressMode(e.wrapT),addressModeW:this._convertAddressMode(e.wrapR),magFilter:this._convertFilterMode(e.magFilter),minFilter:this._convertFilterMode(e.minFilter),mipmapFilter:this._convertFilterMode(e.minFilter),maxAnisotropy:1};r.magFilter===Qr.Linear&&r.minFilter===Qr.Linear&&r.mipmapFilter===Qr.Linear&&(r.maxAnisotropy=e.anisotropy),e.isDepthTexture&&e.compareFunction!==null&&(r.compare=v2[e.compareFunction]),i.sampler=n.createSampler(r)}createDefaultTexture(e){let t;const n=Nf(e);e.isCubeTexture?t=this._getDefaultCubeTextureGPU(n):e.isVideoTexture?this.backend.get(e).externalTexture=this._getDefaultVideoFrame():t=this._getDefaultTextureGPU(n),this.backend.get(e).texture=t}createTexture(e,t={}){const n=this.backend,i=n.get(e);if(i.initialized)throw new Error("WebGPUTextureUtils: Texture already initialized.");t.needsMipmaps===void 0&&(t.needsMipmaps=!1),t.levels===void 0&&(t.levels=1),t.depth===void 0&&(t.depth=1);const{width:r,height:o,depth:a,levels:c}=t;e.isFramebufferTexture&&(t.renderTarget?t.format=this.backend.utils.getCurrentColorFormat(t.renderTarget):t.format=this.backend.utils.getPreferredCanvasFormat());const l=this._getDimension(e),u=e.internalFormat||t.format||Nf(e,n.device);i.format=u;const{samples:h,primarySamples:d,isMSAA:f}=n.utils.getTextureSampleData(e);let m=GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.COPY_SRC;e.isStorageTexture===!0&&(m|=GPUTextureUsage.STORAGE_BINDING),e.isCompressedTexture!==!0&&e.isCompressedArrayTexture!==!0&&(m|=GPUTextureUsage.RENDER_ATTACHMENT);const _={label:e.name,size:{width:r,height:o,depthOrArrayLayers:a},mipLevelCount:c,sampleCount:d,dimension:l,format:u,usage:m};if(e.isVideoTexture){const g=e.source.data,p=new VideoFrame(g);_.size.width=p.displayWidth,_.size.height=p.displayHeight,p.close(),i.externalTexture=g}else{if(u===void 0)return console.warn("WebGPURenderer: Texture format not supported."),this.createDefaultTexture(e);i.texture=n.device.createTexture(_)}if(f){const g=Object.assign({},_);g.label=g.label+"-msaa",g.sampleCount=h,i.msaaTexture=n.device.createTexture(g)}i.initialized=!0,i.textureDescriptorGPU=_}destroyTexture(e){const t=this.backend,n=t.get(e);n.texture!==void 0&&n.texture.destroy(),n.msaaTexture!==void 0&&n.msaaTexture.destroy(),t.delete(e)}destroySampler(e){const n=this.backend.get(e);delete n.sampler}generateMipmaps(e){const t=this.backend.get(e);if(e.isCubeTexture)for(let n=0;n<6;n++)this._generateMipmaps(t.texture,t.textureDescriptorGPU,n);else{const n=e.image.depth||1;for(let i=0;i<n;i++)this._generateMipmaps(t.texture,t.textureDescriptorGPU,i)}}getColorBuffer(){this.colorBuffer&&this.colorBuffer.destroy();const e=this.backend,{width:t,height:n}=e.getDrawingBufferSize();return this.colorBuffer=e.device.createTexture({label:"colorBuffer",size:{width:t,height:n,depthOrArrayLayers:1},sampleCount:e.utils.getSampleCount(e.renderer.samples),format:e.utils.getPreferredCanvasFormat(),usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC}),this.colorBuffer}getDepthBuffer(e=!0,t=!1){const n=this.backend,{width:i,height:r}=n.getDrawingBufferSize(),o=this.depthTexture,a=n.get(o).texture;let c,l;if(t?(c=gs,l=ms):e&&(c=hs,l=Yt),a!==void 0){if(o.image.width===i&&o.image.height===r&&o.format===c&&o.type===l)return a;this.destroyTexture(o)}return o.name="depthBuffer",o.format=c,o.type=l,o.image.width=i,o.image.height=r,this.createTexture(o,{width:i,height:r}),n.get(o).texture}updateTexture(e,t){const n=this.backend.get(e),{textureDescriptorGPU:i}=n;if(!(e.isRenderTargetTexture||i===void 0)){if(e.isDataTexture)this._copyBufferToTexture(t.image,n.texture,i,0,e.flipY);else if(e.isDataArrayTexture||e.isData3DTexture)for(let r=0;r<t.image.depth;r++)this._copyBufferToTexture(t.image,n.texture,i,r,e.flipY,r);else if(e.isCompressedTexture||e.isCompressedArrayTexture)this._copyCompressedBufferToTexture(e.mipmaps,n.texture,i);else if(e.isCubeTexture)this._copyCubeMapToTexture(t.images,n.texture,i,e.flipY);else if(e.isVideoTexture){const r=e.source.data;n.externalTexture=r}else this._copyImageToTexture(t.image,n.texture,i,0,e.flipY);n.version=e.version,e.onUpdate&&e.onUpdate(e)}}async copyTextureToBuffer(e,t,n,i,r,o){const a=this.backend.device,c=this.backend.get(e),l=c.texture,u=c.textureDescriptorGPU.format,h=this._getBytesPerTexel(u);let d=i*h;d=Math.ceil(d/256)*256;const f=a.createBuffer({size:i*r*h,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),m=a.createCommandEncoder();m.copyTextureToBuffer({texture:l,origin:{x:t,y:n,z:o}},{buffer:f,bytesPerRow:d},{width:i,height:r});const _=this._getTypedArrayType(u);a.queue.submit([m.finish()]),await f.mapAsync(GPUMapMode.READ);const g=f.getMappedRange();return new _(g)}_isEnvironmentTexture(e){const t=e.mapping;return t===Mr||t===Er||t===Fi||t===Bi}_getDefaultTextureGPU(e){let t=this.defaultTexture[e];if(t===void 0){const n=new En;n.minFilter=zt,n.magFilter=zt,this.createTexture(n,{width:1,height:1,format:e}),this.defaultTexture[e]=t=n}return this.backend.get(t).texture}_getDefaultCubeTextureGPU(e){let t=this.defaultTexture[e];if(t===void 0){const n=new hh;n.minFilter=zt,n.magFilter=zt,this.createTexture(n,{width:1,height:1,depth:6}),this.defaultCubeTexture[e]=t=n}return this.backend.get(t).texture}_getDefaultVideoFrame(){let e=this.defaultVideoFrame;if(e===null){const t={timestamp:0,codedWidth:1,codedHeight:1,format:"RGBA"};this.defaultVideoFrame=e=new VideoFrame(new Uint8Array([0,0,0,255]),t)}return e}_copyCubeMapToTexture(e,t,n,i){for(let r=0;r<6;r++){const o=e[r],a=i===!0?T2[r]:r;o.isDataTexture?this._copyBufferToTexture(o.image,t,n,a,i):this._copyImageToTexture(o,t,n,a,i)}}_copyImageToTexture(e,t,n,i,r){this.backend.device.queue.copyExternalImageToTexture({source:e},{texture:t,mipLevel:0,origin:{x:0,y:0,z:i}},{width:e.width,height:e.height,depthOrArrayLayers:1}),r===!0&&this._flipY(t,n,i)}_getPassUtils(){let e=this._passUtils;return e===null&&(this._passUtils=e=new y2(this.backend.device)),e}_generateMipmaps(e,t,n=0){this._getPassUtils().generateMipmaps(e,t,n)}_flipY(e,t,n=0){this._getPassUtils().flipY(e,t,n)}_copyBufferToTexture(e,t,n,i,r,o=0){const a=this.backend.device,c=e.data,l=this._getBytesPerTexel(n.format),u=e.width*l;a.queue.writeTexture({texture:t,mipLevel:0,origin:{x:0,y:0,z:i}},c,{offset:e.width*e.height*l*o,bytesPerRow:u},{width:e.width,height:e.height,depthOrArrayLayers:1}),r===!0&&this._flipY(t,n,i)}_copyCompressedBufferToTexture(e,t,n){const i=this.backend.device,r=this._getBlockData(n.format),o=n.size.depthOrArrayLayers>1;for(let a=0;a<e.length;a++){const c=e[a],l=c.width,u=c.height,h=o?n.size.depthOrArrayLayers:1,d=Math.ceil(l/r.width)*r.byteLength,f=d*Math.ceil(u/r.height);for(let m=0;m<h;m++)i.queue.writeTexture({texture:t,mipLevel:a,origin:{x:0,y:0,z:m}},c.data,{offset:m*f,bytesPerRow:d,rowsPerImage:Math.ceil(u/r.height)},{width:Math.ceil(l/r.width)*r.width,height:Math.ceil(u/r.height)*r.height,depthOrArrayLayers:1})}}_getBlockData(e){if(e===L.BC1RGBAUnorm||e===L.BC1RGBAUnormSRGB)return{byteLength:8,width:4,height:4};if(e===L.BC2RGBAUnorm||e===L.BC2RGBAUnormSRGB)return{byteLength:16,width:4,height:4};if(e===L.BC3RGBAUnorm||e===L.BC3RGBAUnormSRGB)return{byteLength:16,width:4,height:4};if(e===L.BC4RUnorm||e===L.BC4RSNorm)return{byteLength:8,width:4,height:4};if(e===L.BC5RGUnorm||e===L.BC5RGSnorm)return{byteLength:16,width:4,height:4};if(e===L.BC6HRGBUFloat||e===L.BC6HRGBFloat)return{byteLength:16,width:4,height:4};if(e===L.BC7RGBAUnorm||e===L.BC7RGBAUnormSRGB)return{byteLength:16,width:4,height:4};if(e===L.ETC2RGB8Unorm||e===L.ETC2RGB8UnormSRGB)return{byteLength:8,width:4,height:4};if(e===L.ETC2RGB8A1Unorm||e===L.ETC2RGB8A1UnormSRGB)return{byteLength:8,width:4,height:4};if(e===L.ETC2RGBA8Unorm||e===L.ETC2RGBA8UnormSRGB)return{byteLength:16,width:4,height:4};if(e===L.EACR11Unorm)return{byteLength:8,width:4,height:4};if(e===L.EACR11Snorm)return{byteLength:8,width:4,height:4};if(e===L.EACRG11Unorm)return{byteLength:16,width:4,height:4};if(e===L.EACRG11Snorm)return{byteLength:16,width:4,height:4};if(e===L.ASTC4x4Unorm||e===L.ASTC4x4UnormSRGB)return{byteLength:16,width:4,height:4};if(e===L.ASTC5x4Unorm||e===L.ASTC5x4UnormSRGB)return{byteLength:16,width:5,height:4};if(e===L.ASTC5x5Unorm||e===L.ASTC5x5UnormSRGB)return{byteLength:16,width:5,height:5};if(e===L.ASTC6x5Unorm||e===L.ASTC6x5UnormSRGB)return{byteLength:16,width:6,height:5};if(e===L.ASTC6x6Unorm||e===L.ASTC6x6UnormSRGB)return{byteLength:16,width:6,height:6};if(e===L.ASTC8x5Unorm||e===L.ASTC8x5UnormSRGB)return{byteLength:16,width:8,height:5};if(e===L.ASTC8x6Unorm||e===L.ASTC8x6UnormSRGB)return{byteLength:16,width:8,height:6};if(e===L.ASTC8x8Unorm||e===L.ASTC8x8UnormSRGB)return{byteLength:16,width:8,height:8};if(e===L.ASTC10x5Unorm||e===L.ASTC10x5UnormSRGB)return{byteLength:16,width:10,height:5};if(e===L.ASTC10x6Unorm||e===L.ASTC10x6UnormSRGB)return{byteLength:16,width:10,height:6};if(e===L.ASTC10x8Unorm||e===L.ASTC10x8UnormSRGB)return{byteLength:16,width:10,height:8};if(e===L.ASTC10x10Unorm||e===L.ASTC10x10UnormSRGB)return{byteLength:16,width:10,height:10};if(e===L.ASTC12x10Unorm||e===L.ASTC12x10UnormSRGB)return{byteLength:16,width:12,height:10};if(e===L.ASTC12x12Unorm||e===L.ASTC12x12UnormSRGB)return{byteLength:16,width:12,height:12}}_convertAddressMode(e){let t=Zd.ClampToEdge;return e===vo?t=Zd.Repeat:e===To&&(t=Zd.MirrorRepeat),t}_convertFilterMode(e){let t=Qr.Linear;return(e===zt||e===Vu||e===ls)&&(t=Qr.Nearest),t}_getBytesPerTexel(e){if(e===L.R8Unorm||e===L.R8Snorm||e===L.R8Uint||e===L.R8Sint)return 1;if(e===L.R16Uint||e===L.R16Sint||e===L.R16Float||e===L.RG8Unorm||e===L.RG8Snorm||e===L.RG8Uint||e===L.RG8Sint)return 2;if(e===L.R32Uint||e===L.R32Sint||e===L.R32Float||e===L.RG16Uint||e===L.RG16Sint||e===L.RG16Float||e===L.RGBA8Unorm||e===L.RGBA8UnormSRGB||e===L.RGBA8Snorm||e===L.RGBA8Uint||e===L.RGBA8Sint||e===L.BGRA8Unorm||e===L.BGRA8UnormSRGB||e===L.RGB9E5UFloat||e===L.RGB10A2Unorm||e===L.RG11B10UFloat||e===L.Depth32Float||e===L.Depth24Plus||e===L.Depth24PlusStencil8||e===L.Depth32FloatStencil8)return 4;if(e===L.RG32Uint||e===L.RG32Sint||e===L.RG32Float||e===L.RGBA16Uint||e===L.RGBA16Sint||e===L.RGBA16Float)return 8;if(e===L.RGBA32Uint||e===L.RGBA32Sint||e===L.RGBA32Float)return 16}_getTypedArrayType(e){if(e===L.R8Uint)return Uint8Array;if(e===L.R8Sint)return Int8Array;if(e===L.R8Unorm)return Uint8Array;if(e===L.R8Snorm)return Int8Array;if(e===L.RG8Uint)return Uint8Array;if(e===L.RG8Sint)return Int8Array;if(e===L.RG8Unorm)return Uint8Array;if(e===L.RG8Snorm)return Int8Array;if(e===L.RGBA8Uint)return Uint8Array;if(e===L.RGBA8Sint)return Int8Array;if(e===L.RGBA8Unorm)return Uint8Array;if(e===L.RGBA8Snorm)return Int8Array;if(e===L.R16Uint)return Uint16Array;if(e===L.R16Sint)return Int16Array;if(e===L.RG16Uint)return Uint16Array;if(e===L.RG16Sint)return Int16Array;if(e===L.RGBA16Uint)return Uint16Array;if(e===L.RGBA16Sint)return Int16Array;if(e===L.R16Float||e===L.RG16Float||e===L.RGBA16Float)return Uint16Array;if(e===L.R32Uint)return Uint32Array;if(e===L.R32Sint)return Int32Array;if(e===L.R32Float)return Float32Array;if(e===L.RG32Uint)return Uint32Array;if(e===L.RG32Sint)return Int32Array;if(e===L.RG32Float)return Float32Array;if(e===L.RGBA32Uint)return Uint32Array;if(e===L.RGBA32Sint)return Int32Array;if(e===L.RGBA32Float)return Float32Array;if(e===L.BGRA8Unorm||e===L.BGRA8UnormSRGB)return Uint8Array;if(e===L.RGB10A2Unorm||e===L.RGB9E5UFloat||e===L.RG11B10UFloat)return Uint32Array;if(e===L.Depth32Float)return Float32Array;if(e===L.Depth24Plus||e===L.Depth24PlusStencil8)return Uint32Array;if(e===L.Depth32FloatStencil8)return Float32Array}_getDimension(e){let t;return e.isData3DTexture?t=W_.ThreeD:t=W_.TwoD,t}}function Nf(s,e=null){const t=s.format,n=s.type,i=s.colorSpace;let r;if(s.isCompressedTexture===!0||s.isCompressedArrayTexture===!0)switch(t){case yr:r=i===Oe?L.BC1RGBAUnormSRGB:L.BC1RGBAUnorm;break;case vr:r=i===Oe?L.BC2RGBAUnormSRGB:L.BC2RGBAUnorm;break;case Tr:r=i===Oe?L.BC3RGBAUnormSRGB:L.BC3RGBAUnorm;break;case Pa:r=i===Oe?L.ETC2RGB8UnormSRGB:L.ETC2RGB8Unorm;break;case Da:r=i===Oe?L.ETC2RGBA8UnormSRGB:L.ETC2RGBA8Unorm;break;case La:r=i===Oe?L.ASTC4x4UnormSRGB:L.ASTC4x4Unorm;break;case Ua:r=i===Oe?L.ASTC5x4UnormSRGB:L.ASTC5x4Unorm;break;case Ia:r=i===Oe?L.ASTC5x5UnormSRGB:L.ASTC5x5Unorm;break;case Fa:r=i===Oe?L.ASTC6x5UnormSRGB:L.ASTC6x5Unorm;break;case Ba:r=i===Oe?L.ASTC6x6UnormSRGB:L.ASTC6x6Unorm;break;case Oa:r=i===Oe?L.ASTC8x5UnormSRGB:L.ASTC8x5Unorm;break;case Va:r=i===Oe?L.ASTC8x6UnormSRGB:L.ASTC8x6Unorm;break;case Ga:r=i===Oe?L.ASTC8x8UnormSRGB:L.ASTC8x8Unorm;break;case za:r=i===Oe?L.ASTC10x5UnormSRGB:L.ASTC10x5Unorm;break;case ka:r=i===Oe?L.ASTC10x6UnormSRGB:L.ASTC10x6Unorm;break;case Ha:r=i===Oe?L.ASTC10x8UnormSRGB:L.ASTC10x8Unorm;break;case Wa:r=i===Oe?L.ASTC10x10UnormSRGB:L.ASTC10x10Unorm;break;case $a:r=i===Oe?L.ASTC12x10UnormSRGB:L.ASTC12x10Unorm;break;case Xa:r=i===Oe?L.ASTC12x12UnormSRGB:L.ASTC12x12Unorm;break;case Nn:r=i===Oe?L.RGBA8UnormSRGB:L.RGBA8Unorm;break;default:console.error("WebGPURenderer: Unsupported texture format.",t)}else switch(t){case Nn:switch(n){case lo:r=L.RGBA8Snorm;break;case uo:r=L.RGBA16Sint;break;case Yi:r=L.RGBA16Uint;break;case Yt:r=L.RGBA32Uint;break;case Mn:r=L.RGBA32Sint;break;case Gn:r=i===Oe?L.RGBA8UnormSRGB:L.RGBA8Unorm;break;case zn:r=L.RGBA16Float;break;case rn:r=L.RGBA32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with RGBAFormat.",n)}break;case Tl:switch(n){case ah:r=L.RGB9E5UFloat;break;default:console.error("WebGPURenderer: Unsupported texture type with RGBFormat.",n)}break;case Sl:switch(n){case lo:r=L.R8Snorm;break;case uo:r=L.R16Sint;break;case Yi:r=L.R16Uint;break;case Yt:r=L.R32Uint;break;case Mn:r=L.R32Sint;break;case Gn:r=L.R8Unorm;break;case zn:r=L.R16Float;break;case rn:r=L.R32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with RedFormat.",n)}break;case So:switch(n){case lo:r=L.RG8Snorm;break;case uo:r=L.RG16Sint;break;case Yi:r=L.RG16Uint;break;case Yt:r=L.RG32Uint;break;case Mn:r=L.RG32Sint;break;case Gn:r=L.RG8Unorm;break;case zn:r=L.RG16Float;break;case rn:r=L.RG32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with RGFormat.",n)}break;case hs:switch(n){case Yi:r=L.Depth16Unorm;break;case Yt:r=L.Depth24Plus;break;case rn:r=L.Depth32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with DepthFormat.",n)}break;case gs:switch(n){case ms:r=L.Depth24PlusStencil8;break;case rn:e&&e.features.has(wf.Depth32FloatStencil8)===!1&&console.error('WebGPURenderer: Depth textures with DepthStencilFormat + FloatType can only be used with the "depth32float-stencil8" GPU feature.'),r=L.Depth32FloatStencil8;break;default:console.error("WebGPURenderer: Unsupported texture type with DepthStencilFormat.",n)}break;case tc:switch(n){case Mn:r=L.R32Sint;break;case Yt:r=L.R32Uint;break;default:console.error("WebGPURenderer: Unsupported texture type with RedIntegerFormat.",n)}break;case nc:switch(n){case Mn:r=L.RG32Sint;break;case Yt:r=L.RG32Uint;break;default:console.error("WebGPURenderer: Unsupported texture type with RGIntegerFormat.",n)}break;case ic:switch(n){case Mn:r=L.RGBA32Sint;break;case Yt:r=L.RGBA32Uint;break;default:console.error("WebGPURenderer: Unsupported texture type with RGBAIntegerFormat.",n)}break;default:console.error("WebGPURenderer: Unsupported texture format.",t)}return r}const b2=/^[fn]*\s*([a-z_0-9]+)?\s*\(([\s\S]*?)\)\s*[\-\>]*\s*([a-z_0-9]+(?:<[\s\S]+?>)?)/i,M2=/([a-z_0-9]+)\s*:\s*([a-z_0-9]+(?:<[\s\S]+?>)?)/ig,$_={f32:"float",i32:"int",u32:"uint",bool:"bool","vec2<f32>":"vec2","vec2<i32>":"ivec2","vec2<u32>":"uvec2","vec2<bool>":"bvec2",vec2f:"vec2",vec2i:"ivec2",vec2u:"uvec2",vec2b:"bvec2","vec3<f32>":"vec3","vec3<i32>":"ivec3","vec3<u32>":"uvec3","vec3<bool>":"bvec3",vec3f:"vec3",vec3i:"ivec3",vec3u:"uvec3",vec3b:"bvec3","vec4<f32>":"vec4","vec4<i32>":"ivec4","vec4<u32>":"uvec4","vec4<bool>":"bvec4",vec4f:"vec4",vec4i:"ivec4",vec4u:"uvec4",vec4b:"bvec4","mat2x2<f32>":"mat2",mat2x2f:"mat2","mat3x3<f32>":"mat3",mat3x3f:"mat3","mat4x4<f32>":"mat4",mat4x4f:"mat4",sampler:"sampler",texture_1d:"texture",texture_2d:"texture",texture_2d_array:"texture",texture_multisampled_2d:"cubeTexture",texture_depth_2d:"depthTexture",texture_depth_multisampled_2d:"depthTexture",texture_3d:"texture3D",texture_cube:"cubeTexture",texture_cube_array:"cubeTexture",texture_storage_1d:"storageTexture",texture_storage_2d:"storageTexture",texture_storage_2d_array:"storageTexture",texture_storage_3d:"storageTexture"},E2=s=>{s=s.trim();const e=s.match(b2);if(e!==null&&e.length===4){const t=e[2],n=[];let i=null;for(;(i=M2.exec(t))!==null;)n.push({name:i[1],type:i[2]});const r=[];for(let u=0;u<n.length;u++){const{name:h,type:d}=n[u];let f=d;f.startsWith("ptr")?f="pointer":(f.startsWith("texture")&&(f=d.split("<")[0]),f=$_[f]),r.push(new Cm(f,h))}const o=s.substring(e[0].length),a=e[3]||"void",c=e[1]!==void 0?e[1]:"";return{type:$_[a]||a,inputs:r,name:c,inputsCode:t,blockCode:o,outputType:a}}else throw new Error("FunctionNode: Function is not a WGSL code.")};class A2 extends Pm{constructor(e){const{type:t,inputs:n,name:i,inputsCode:r,blockCode:o,outputType:a}=E2(e);super(t,n,i),this.inputsCode=r,this.blockCode=o,this.outputType=a}getCode(e=this.name){const t=this.outputType!=="void"?"-> "+this.outputType:"";return`fn ${e} ( ${this.inputsCode.trim()} ) ${t}`+this.blockCode}}class R2 extends fS{parseFunction(e){return new A2(e)}}const Jo=typeof self<"u"?self.GPUShaderStage:{VERTEX:1,FRAGMENT:2,COMPUTE:4},w2={[Vn.READ_ONLY]:"read",[Vn.WRITE_ONLY]:"write",[Vn.READ_WRITE]:"read_write"},X_={[vo]:"repeat",[cs]:"clamp",[To]:"mirror"},Au={vertex:Jo?Jo.VERTEX:1,fragment:Jo?Jo.FRAGMENT:2,compute:Jo?Jo.COMPUTE:4},q_={instance:!0,swizzleAssign:!1,storageBuffer:!0},N2={"^^":"tsl_xor"},C2={float:"f32",int:"i32",uint:"u32",bool:"bool",color:"vec3<f32>",vec2:"vec2<f32>",ivec2:"vec2<i32>",uvec2:"vec2<u32>",bvec2:"vec2<bool>",vec3:"vec3<f32>",ivec3:"vec3<i32>",uvec3:"vec3<u32>",bvec3:"vec3<bool>",vec4:"vec4<f32>",ivec4:"vec4<i32>",uvec4:"vec4<u32>",bvec4:"vec4<bool>",mat2:"mat2x2<f32>",mat3:"mat3x3<f32>",mat4:"mat4x4<f32>"},Y_={},Pi={tsl_xor:new fn("fn tsl_xor( a : bool, b : bool ) -> bool { return ( a || b ) && !( a && b ); }"),mod_float:new fn("fn tsl_mod_float( x : f32, y : f32 ) -> f32 { return x - y * floor( x / y ); }"),mod_vec2:new fn("fn tsl_mod_vec2( x : vec2f, y : vec2f ) -> vec2f { return x - y * floor( x / y ); }"),mod_vec3:new fn("fn tsl_mod_vec3( x : vec3f, y : vec3f ) -> vec3f { return x - y * floor( x / y ); }"),mod_vec4:new fn("fn tsl_mod_vec4( x : vec4f, y : vec4f ) -> vec4f { return x - y * floor( x / y ); }"),equals_bool:new fn("fn tsl_equals_bool( a : bool, b : bool ) -> bool { return a == b; }"),equals_bvec2:new fn("fn tsl_equals_bvec2( a : vec2f, b : vec2f ) -> vec2<bool> { return vec2<bool>( a.x == b.x, a.y == b.y ); }"),equals_bvec3:new fn("fn tsl_equals_bvec3( a : vec3f, b : vec3f ) -> vec3<bool> { return vec3<bool>( a.x == b.x, a.y == b.y, a.z == b.z ); }"),equals_bvec4:new fn("fn tsl_equals_bvec4( a : vec4f, b : vec4f ) -> vec4<bool> { return vec4<bool>( a.x == b.x, a.y == b.y, a.z == b.z, a.w == b.w ); }"),repeatWrapping_float:new fn("fn tsl_repeatWrapping_float( coord: f32 ) -> f32 { return fract( coord ); }"),mirrorWrapping_float:new fn("fn tsl_mirrorWrapping_float( coord: f32 ) -> f32 { let mirrored = fract( coord * 0.5 ) * 2.0; return 1.0 - abs( 1.0 - mirrored ); }"),clampWrapping_float:new fn("fn tsl_clampWrapping_float( coord: f32 ) -> f32 { return clamp( coord, 0.0, 1.0 ); }"),biquadraticTexture:new fn(`
fn tsl_biquadraticTexture( map : texture_2d<f32>, coord : vec2f, iRes : vec2u, level : u32 ) -> vec4f {

	let res = vec2f( iRes );

	let uvScaled = coord * res;
	let uvWrapping = ( ( uvScaled % res ) + res ) % res;

	// https://www.shadertoy.com/view/WtyXRy

	let uv = uvWrapping - 0.5;
	let iuv = floor( uv );
	let f = fract( uv );

	let rg1 = textureLoad( map, vec2u( iuv + vec2( 0.5, 0.5 ) ) % iRes, level );
	let rg2 = textureLoad( map, vec2u( iuv + vec2( 1.5, 0.5 ) ) % iRes, level );
	let rg3 = textureLoad( map, vec2u( iuv + vec2( 0.5, 1.5 ) ) % iRes, level );
	let rg4 = textureLoad( map, vec2u( iuv + vec2( 1.5, 1.5 ) ) % iRes, level );

	return mix( mix( rg1, rg2, f.x ), mix( rg3, rg4, f.x ), f.y );

}
`)},Rc={dFdx:"dpdx",dFdy:"- dpdy",mod_float:"tsl_mod_float",mod_vec2:"tsl_mod_vec2",mod_vec3:"tsl_mod_vec3",mod_vec4:"tsl_mod_vec4",equals_bool:"tsl_equals_bool",equals_bvec2:"tsl_equals_bvec2",equals_bvec3:"tsl_equals_bvec3",equals_bvec4:"tsl_equals_bvec4",inversesqrt:"inverseSqrt",bitcast:"bitcast<f32>"};typeof navigator<"u"&&/Windows/g.test(navigator.userAgent)&&(Pi.pow_float=new fn("fn tsl_pow_float( a : f32, b : f32 ) -> f32 { return select( -pow( -a, b ), pow( a, b ), a > 0.0 ); }"),Pi.pow_vec2=new fn("fn tsl_pow_vec2( a : vec2f, b : vec2f ) -> vec2f { return vec2f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ) ); }",[Pi.pow_float]),Pi.pow_vec3=new fn("fn tsl_pow_vec3( a : vec3f, b : vec3f ) -> vec3f { return vec3f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ), tsl_pow_float( a.z, b.z ) ); }",[Pi.pow_float]),Pi.pow_vec4=new fn("fn tsl_pow_vec4( a : vec4f, b : vec4f ) -> vec4f { return vec4f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ), tsl_pow_float( a.z, b.z ), tsl_pow_float( a.w, b.w ) ); }",[Pi.pow_float]),Rc.pow_float="tsl_pow_float",Rc.pow_vec2="tsl_pow_vec2",Rc.pow_vec3="tsl_pow_vec3",Rc.pow_vec4="tsl_pow_vec4");let SS="";(typeof navigator<"u"&&/Firefox|Deno/g.test(navigator.userAgent))!==!0&&(SS+=`diagnostic( off, derivative_uniformity );
`);class P2 extends hS{constructor(e,t){super(e,t,new R2),this.uniformGroups={},this.builtins={},this.directives={},this.scopedArrays=new Map}needsToWorkingColorSpace(e){return e.isVideoTexture===!0&&e.colorSpace!==Ti}_generateTextureSample(e,t,n,i,r=this.shaderStage){return r==="fragment"?i?`textureSample( ${t}, ${t}_sampler, ${n}, ${i} )`:`textureSample( ${t}, ${t}_sampler, ${n} )`:this.isFilteredTexture(e)?this.generateFilteredTexture(e,t,n):this.generateTextureLod(e,t,n,i,"0")}_generateVideoSample(e,t,n=this.shaderStage){if(n==="fragment")return`textureSampleBaseClampToEdge( ${e}, ${e}_sampler, vec2<f32>( ${t}.x, 1.0 - ${t}.y ) )`;console.error(`WebGPURenderer: THREE.VideoTexture does not support ${n} shader.`)}_generateTextureSampleLevel(e,t,n,i,r,o=this.shaderStage){return(o==="fragment"||o==="compute")&&this.isUnfilterable(e)===!1?`textureSampleLevel( ${t}, ${t}_sampler, ${n}, ${i} )`:this.isFilteredTexture(e)?this.generateFilteredTexture(e,t,n,i):this.generateTextureLod(e,t,n,r,i)}generateWrapFunction(e){const t=`tsl_coord_${X_[e.wrapS]}S_${X_[e.wrapT]}_${e.isData3DTexture?"3d":"2d"}T`;let n=Y_[t];if(n===void 0){const i=[],r=e.isData3DTexture?"vec3f":"vec2f";let o=`fn ${t}( coord : ${r} ) -> ${r} {

	return ${r}(
`;const a=(c,l)=>{c===vo?(i.push(Pi.repeatWrapping_float),o+=`		tsl_repeatWrapping_float( coord.${l} )`):c===cs?(i.push(Pi.clampWrapping_float),o+=`		tsl_clampWrapping_float( coord.${l} )`):c===To?(i.push(Pi.mirrorWrapping_float),o+=`		tsl_mirrorWrapping_float( coord.${l} )`):(o+=`		coord.${l}`,console.warn(`WebGPURenderer: Unsupported texture wrap type "${c}" for vertex shader.`))};a(e.wrapS,"x"),o+=`,
`,a(e.wrapT,"y"),e.isData3DTexture&&(o+=`,
`,a(e.wrapR,"z")),o+=`
	);

}
`,Y_[t]=n=new fn(o,i)}return n.build(this),t}generateTextureDimension(e,t,n){const i=this.getDataFromNode(e,this.shaderStage,this.globalCache);i.dimensionsSnippet===void 0&&(i.dimensionsSnippet={});let r=i.dimensionsSnippet[n];if(i.dimensionsSnippet[n]===void 0){let o,a;const{primarySamples:c}=this.renderer.backend.utils.getTextureSampleData(e),l=c>1;e.isData3DTexture?a="vec3<u32>":a="vec2<u32>",l||e.isVideoTexture||e.isStorageTexture?o=t:o=`${t}${n?`, u32( ${n} )`:""}`,r=new Pu(new Du(`textureDimensions( ${o} )`,a)),i.dimensionsSnippet[n]=r,(e.isDataArrayTexture||e.isData3DTexture)&&(i.arrayLayerCount=new Pu(new Du(`textureNumLayers(${t})`,"u32"))),e.isTextureCube&&(i.cubeFaceCount=new Pu(new Du("6u","u32")))}return r.build(this)}generateFilteredTexture(e,t,n,i="0u"){this._include("biquadraticTexture");const r=this.generateWrapFunction(e),o=this.generateTextureDimension(e,t,i);return`tsl_biquadraticTexture( ${t}, ${r}( ${n} ), ${o}, u32( ${i} ) )`}generateTextureLod(e,t,n,i,r="0u"){const o=this.generateWrapFunction(e),a=this.generateTextureDimension(e,t,r),c=e.isData3DTexture?"vec3":"vec2",l=`${c}<u32>(${o}(${n}) * ${c}<f32>(${a}))`;return this.generateTextureLoad(e,t,l,i,r)}generateTextureLoad(e,t,n,i,r="0u"){return e.isVideoTexture===!0||e.isStorageTexture===!0?`textureLoad( ${t}, ${n} )`:i?`textureLoad( ${t}, ${n}, ${i}, u32( ${r} ) )`:`textureLoad( ${t}, ${n}, u32( ${r} ) )`}generateTextureStore(e,t,n,i){return`textureStore( ${t}, ${n}, ${i} )`}isSampleCompare(e){return e.isDepthTexture===!0&&e.compareFunction!==null}isUnfilterable(e){return this.getComponentTypeFromTexture(e)!=="float"||!this.isAvailable("float32Filterable")&&e.isDataTexture===!0&&e.type===rn||this.isSampleCompare(e)===!1&&e.minFilter===zt&&e.magFilter===zt||this.renderer.backend.utils.getTextureSampleData(e).primarySamples>1}generateTexture(e,t,n,i,r=this.shaderStage){let o=null;return e.isVideoTexture===!0?o=this._generateVideoSample(t,n,r):this.isUnfilterable(e)?o=this.generateTextureLod(e,t,n,i,"0",r):o=this._generateTextureSample(e,t,n,i,r),o}generateTextureGrad(e,t,n,i,r,o=this.shaderStage){if(o==="fragment")return`textureSampleGrad( ${t}, ${t}_sampler, ${n},  ${i[0]}, ${i[1]} )`;console.error(`WebGPURenderer: THREE.TextureNode.gradient() does not support ${o} shader.`)}generateTextureCompare(e,t,n,i,r,o=this.shaderStage){if(o==="fragment")return`textureSampleCompare( ${t}, ${t}_sampler, ${n}, ${i} )`;console.error(`WebGPURenderer: THREE.DepthTexture.compareFunction() does not support ${o} shader.`)}generateTextureLevel(e,t,n,i,r,o=this.shaderStage){let a=null;return e.isVideoTexture===!0?a=this._generateVideoSample(t,n,o):a=this._generateTextureSampleLevel(e,t,n,i,r,o),a}generateTextureBias(e,t,n,i,r,o=this.shaderStage){if(o==="fragment")return`textureSampleBias( ${t}, ${t}_sampler, ${n}, ${i} )`;console.error(`WebGPURenderer: THREE.TextureNode.biasNode does not support ${o} shader.`)}getPropertyName(e,t=this.shaderStage){if(e.isNodeVarying===!0&&e.needsInterpolation===!0){if(t==="vertex")return`varyings.${e.name}`}else if(e.isNodeUniform===!0){const n=e.name,i=e.type;return i==="texture"||i==="cubeTexture"||i==="storageTexture"||i==="texture3D"?n:i==="buffer"||i==="storageBuffer"||i==="indirectStorageBuffer"?`NodeBuffer_${e.id}.${n}`:e.groupNode.name+"."+n}return super.getPropertyName(e)}getOutputStructName(){return"output"}_getUniformGroupCount(e){return Object.keys(this.uniforms[e]).length}getFunctionOperator(e){const t=N2[e];return t!==void 0?(this._include(t),t):null}getNodeAccess(e,t){return t!=="compute"?Vn.READ_ONLY:e.access}getStorageAccess(e,t){return w2[this.getNodeAccess(e,t)]}getUniformFromNode(e,t,n,i=null){const r=super.getUniformFromNode(e,t,n,i),o=this.getDataFromNode(e,n,this.globalCache);if(o.uniformGPU===void 0){let a;const c=e.groupNode,l=c.name,u=this.getBindGroupArray(l,n);if(t==="texture"||t==="cubeTexture"||t==="storageTexture"||t==="texture3D"){let h=null;const d=this.getNodeAccess(e,n);if(t==="texture"||t==="storageTexture"?h=new Vh(r.name,r.node,c,d):t==="cubeTexture"?h=new yS(r.name,r.node,c,d):t==="texture3D"&&(h=new vS(r.name,r.node,c,d)),h.store=e.isStorageTextureNode===!0,h.setVisibility(Au[n]),(n==="fragment"||n==="compute")&&this.isUnfilterable(e.value)===!1&&h.store===!1){const f=new m2(`${r.name}_sampler`,r.node,c);f.setVisibility(Au[n]),u.push(f,h),a=[f,h]}else u.push(h),a=[h]}else if(t==="buffer"||t==="storageBuffer"||t==="indirectStorageBuffer"){const h=t==="buffer"?_S:x2,d=new h(e,c);d.setVisibility(Au[n]),u.push(d),a=d}else{const h=this.uniformGroups[n]||(this.uniformGroups[n]={});let d=h[l];d===void 0&&(d=new xS(l,c),d.setVisibility(Au[n]),h[l]=d,u.push(d)),a=this.getNodeUniform(r,t),d.addUniform(a)}o.uniformGPU=a}return r}getBuiltin(e,t,n,i=this.shaderStage){const r=this.builtins[i]||(this.builtins[i]=new Map);return r.has(e)===!1&&r.set(e,{name:e,property:t,type:n}),t}hasBuiltin(e,t=this.shaderStage){return this.builtins[t]!==void 0&&this.builtins[t].has(e)}getVertexIndex(){return this.shaderStage==="vertex"?this.getBuiltin("vertex_index","vertexIndex","u32","attribute"):"vertexIndex"}buildFunctionCode(e){const t=e.layout,n=this.flowShaderNode(e),i=[];for(const o of t.inputs)i.push(o.name+" : "+this.getType(o.type));let r=`fn ${t.name}( ${i.join(", ")} ) -> ${this.getType(t.type)} {
${n.vars}
${n.code}
`;return n.result&&(r+=`	return ${n.result};
`),r+=`
}
`,r}getInstanceIndex(){return this.shaderStage==="vertex"?this.getBuiltin("instance_index","instanceIndex","u32","attribute"):"instanceIndex"}getInvocationLocalIndex(){return this.getBuiltin("local_invocation_index","invocationLocalIndex","u32","attribute")}getSubgroupSize(){return this.enableSubGroups(),this.getBuiltin("subgroup_size","subgroupSize","u32","attribute")}getInvocationSubgroupIndex(){return this.enableSubGroups(),this.getBuiltin("subgroup_invocation_id","invocationSubgroupIndex","u32","attribute")}getSubgroupIndex(){return this.enableSubGroups(),this.getBuiltin("subgroup_id","subgroupIndex","u32","attribute")}getDrawIndex(){return null}getFrontFacing(){return this.getBuiltin("front_facing","isFront","bool")}getFragCoord(){return this.getBuiltin("position","fragCoord","vec4<f32>")+".xy"}getFragDepth(){return"output."+this.getBuiltin("frag_depth","depth","f32","output")}getClipDistance(){return"varyings.hw_clip_distances"}isFlipY(){return!1}enableDirective(e,t=this.shaderStage){(this.directives[t]||(this.directives[t]=new Set)).add(e)}getDirectives(e){const t=[],n=this.directives[e];if(n!==void 0)for(const i of n)t.push(`enable ${i};`);return t.join(`
`)}enableSubGroups(){this.enableDirective("subgroups")}enableSubgroupsF16(){this.enableDirective("subgroups-f16")}enableClipDistances(){this.enableDirective("clip_distances")}enableShaderF16(){this.enableDirective("f16")}enableDualSourceBlending(){this.enableDirective("dual_source_blending")}enableHardwareClipping(e){this.enableClipDistances(),this.getBuiltin("clip_distances","hw_clip_distances",`array<f32, ${e} >`,"vertex")}getBuiltins(e){const t=[],n=this.builtins[e];if(n!==void 0)for(const{name:i,property:r,type:o}of n.values())t.push(`@builtin( ${i} ) ${r} : ${o}`);return t.join(`,
	`)}getScopedArray(e,t,n,i){return this.scopedArrays.has(e)===!1&&this.scopedArrays.set(e,{name:e,scope:t,bufferType:n,bufferCount:i}),e}getScopedArrays(e){if(e!=="compute")return;const t=[];for(const{name:n,scope:i,bufferType:r,bufferCount:o}of this.scopedArrays.values()){const a=this.getType(r);t.push(`var<${i}> ${n}: array< ${a}, ${o} >;`)}return t.join(`
`)}getAttributes(e){const t=[];if(e==="compute"&&(this.getBuiltin("global_invocation_id","id","vec3<u32>","attribute"),this.getBuiltin("workgroup_id","workgroupId","vec3<u32>","attribute"),this.getBuiltin("local_invocation_id","localId","vec3<u32>","attribute"),this.getBuiltin("num_workgroups","numWorkgroups","vec3<u32>","attribute"),this.renderer.hasFeature("subgroups")&&(this.enableDirective("subgroups",e),this.getBuiltin("subgroup_size","subgroupSize","u32","attribute"))),e==="vertex"||e==="compute"){const n=this.getBuiltins("attribute");n&&t.push(n);const i=this.getAttributesArray();for(let r=0,o=i.length;r<o;r++){const a=i[r],c=a.name,l=this.getType(a.type);t.push(`@location( ${r} ) ${c} : ${l}`)}}return t.join(`,
	`)}getStructMembers(e){const t=[],n=e.getMemberTypes();for(let r=0;r<n.length;r++){const o=n[r];t.push(`	@location( ${r} ) m${r} : ${o}<f32>`)}const i=this.getBuiltins("output");return i&&t.push("	"+i),t.join(`,
`)}getStructs(e){const t=[],n=this.structs[e];for(let i=0,r=n.length;i<r;i++){const o=n[i],a=o.name;let c=`struct ${a} {
`;c+=this.getStructMembers(o),c+=`
}`,t.push(c),t.push(`
var<private> output : ${a};

`)}return t.join(`

`)}getVar(e,t){return`var ${t} : ${this.getType(e)}`}getVars(e){const t=[],n=this.vars[e];if(n!==void 0)for(const i of n)t.push(`	${this.getVar(i.type,i.name)};`);return`
${t.join(`
`)}
`}getVaryings(e){const t=[];if(e==="vertex"&&this.getBuiltin("position","Vertex","vec4<f32>","vertex"),e==="vertex"||e==="fragment"){const r=this.varyings,o=this.vars[e];for(let a=0;a<r.length;a++){const c=r[a];if(c.needsInterpolation){let l=`@location( ${a} )`;/^(int|uint|ivec|uvec)/.test(c.type)&&(l+=" @interpolate( flat )"),t.push(`${l} ${c.name} : ${this.getType(c.type)}`)}else e==="vertex"&&o.includes(c)===!1&&o.push(c)}}const n=this.getBuiltins(e);n&&t.push(n);const i=t.join(`,
	`);return e==="vertex"?this._getWGSLStruct("VaryingsStruct","	"+i):i}getUniforms(e){const t=this.uniforms[e],n=[],i=[],r=[],o={};for(const c of t){const l=c.groupNode.name,u=this.bindingsIndexes[l];if(c.type==="texture"||c.type==="cubeTexture"||c.type==="storageTexture"||c.type==="texture3D"){const h=c.node.value;(e==="fragment"||e==="compute")&&this.isUnfilterable(h)===!1&&c.node.isStorageTextureNode!==!0&&(this.isSampleCompare(h)?n.push(`@binding( ${u.binding++} ) @group( ${u.group} ) var ${c.name}_sampler : sampler_comparison;`):n.push(`@binding( ${u.binding++} ) @group( ${u.group} ) var ${c.name}_sampler : sampler;`));let d,f="";const{primarySamples:m}=this.renderer.backend.utils.getTextureSampleData(h);if(m>1&&(f="_multisampled"),h.isCubeTexture===!0)d="texture_cube<f32>";else if(h.isDataArrayTexture===!0||h.isCompressedArrayTexture===!0)d="texture_2d_array<f32>";else if(h.isDepthTexture===!0)d=`texture_depth${f}_2d`;else if(h.isVideoTexture===!0)d="texture_external";else if(h.isData3DTexture===!0)d="texture_3d<f32>";else if(c.node.isStorageTextureNode===!0){const _=Nf(h),g=this.getStorageAccess(c.node,e);d=`texture_storage_2d<${_}, ${g}>`}else{const _=this.getComponentTypeFromTexture(h).charAt(0);d=`texture${f}_2d<${_}32>`}n.push(`@binding( ${u.binding++} ) @group( ${u.group} ) var ${c.name} : ${d};`)}else if(c.type==="buffer"||c.type==="storageBuffer"||c.type==="indirectStorageBuffer"){const h=c.node,d=this.getType(h.bufferType),f=h.bufferCount,m=f>0&&c.type==="buffer"?", "+f:"",_=h.isAtomic?`atomic<${d}>`:`${d}`,g=`	${c.name} : array< ${_}${m} >
`,p=h.isStorageBufferNode?`storage, ${this.getStorageAccess(h,e)}`:"uniform";i.push(this._getWGSLStructBinding("NodeBuffer_"+h.id,g,p,u.binding++,u.group))}else{const h=this.getType(this.getVectorType(c.type)),d=c.groupNode.name;(o[d]||(o[d]={index:u.binding++,id:u.group,snippets:[]})).snippets.push(`	${c.name} : ${h}`)}}for(const c in o){const l=o[c];r.push(this._getWGSLStructBinding(c,l.snippets.join(`,
`),"uniform",l.index,l.id))}let a=n.join(`
`);return a+=i.join(`
`),a+=r.join(`
`),a}buildCode(){const e=this.material!==null?{fragment:{},vertex:{}}:{compute:{}};this.sortBindingGroups();for(const t in e){const n=e[t];n.uniforms=this.getUniforms(t),n.attributes=this.getAttributes(t),n.varyings=this.getVaryings(t),n.structs=this.getStructs(t),n.vars=this.getVars(t),n.codes=this.getCodes(t),n.directives=this.getDirectives(t),n.scopedArrays=this.getScopedArrays(t);let i=`// code

`;i+=this.flowCode[t];const r=this.flowNodes[t],o=r[r.length-1],a=o.outputNode,c=a!==void 0&&a.isOutputStructNode===!0;for(const l of r){const u=this.getFlowData(l),h=l.name;if(h&&(i.length>0&&(i+=`
`),i+=`	// flow -> ${h}
	`),i+=`${u.code}
	`,l===o&&t!=="compute"){if(i+=`// result

	`,t==="vertex")i+=`varyings.Vertex = ${u.result};`;else if(t==="fragment")if(c)n.returnType=a.nodeType,i+=`return ${u.result};`;else{let d="	@location(0) color: vec4<f32>";const f=this.getBuiltins("output");f&&(d+=`,
	`+f),n.returnType="OutputStruct",n.structs+=this._getWGSLStruct("OutputStruct",d),n.structs+=`
var<private> output : OutputStruct;

`,i+=`output.color = ${u.result};

	return output;`}}}n.flow=i}this.material!==null?(this.vertexShader=this._getWGSLVertexCode(e.vertex),this.fragmentShader=this._getWGSLFragmentCode(e.fragment)):this.computeShader=this._getWGSLComputeCode(e.compute,(this.object.workgroupSize||[64]).join(", "))}getMethod(e,t=null){let n;return t!==null&&(n=this._getWGSLMethod(e+"_"+t)),n===void 0&&(n=this._getWGSLMethod(e)),n||e}getType(e){return C2[e]||e}isAvailable(e){let t=q_[e];return t===void 0&&(e==="float32Filterable"?t=this.renderer.hasFeature("float32-filterable"):e==="clipDistance"&&(t=this.renderer.hasFeature("clip-distances")),q_[e]=t),t}_getWGSLMethod(e){return Pi[e]!==void 0&&this._include(e),Rc[e]}_include(e){const t=Pi[e];return t.build(this),this.currentFunctionNode!==null&&this.currentFunctionNode.includes.push(t),t}_getWGSLVertexCode(e){return`${this.getSignature()}
// directives
${e.directives}

// uniforms
${e.uniforms}

// varyings
${e.varyings}
var<private> varyings : VaryingsStruct;

// codes
${e.codes}

@vertex
fn main( ${e.attributes} ) -> VaryingsStruct {

	// vars
	${e.vars}

	// flow
	${e.flow}

	return varyings;

}
`}_getWGSLFragmentCode(e){return`${this.getSignature()}
// global
${SS}

// uniforms
${e.uniforms}

// structs
${e.structs}

// codes
${e.codes}

@fragment
fn main( ${e.varyings} ) -> ${e.returnType} {

	// vars
	${e.vars}

	// flow
	${e.flow}

}
`}_getWGSLComputeCode(e,t){return`${this.getSignature()}
// directives
${e.directives}

// system
var<private> instanceIndex : u32;

// locals
${e.scopedArrays}

// uniforms
${e.uniforms}

// codes
${e.codes}

@compute @workgroup_size( ${t} )
fn main( ${e.attributes} ) {

	// system
	instanceIndex = id.x + id.y * numWorkgroups.x * u32(${t}) + id.z * numWorkgroups.x * numWorkgroups.y * u32(${t});

	// vars
	${e.vars}

	// flow
	${e.flow}

}
`}_getWGSLStruct(e,t){return`
struct ${e} {
${t}
};`}_getWGSLStructBinding(e,t,n,i=0,r=0){const o=e+"Struct";return`${this._getWGSLStruct(o,t)}
@binding( ${i} ) @group( ${r} )
var<${n}> ${e} : ${o};`}}class D2{constructor(e){this.backend=e}getCurrentDepthStencilFormat(e){let t;return e.depthTexture!==null?t=this.getTextureFormatGPU(e.depthTexture):e.depth&&e.stencil?t=L.Depth24PlusStencil8:e.depth&&(t=L.Depth24Plus),t}getTextureFormatGPU(e){return this.backend.get(e).format}getTextureSampleData(e){let t;if(e.isFramebufferTexture)t=1;else if(e.isDepthTexture&&!e.renderTarget){const r=this.backend.renderer,o=r.getRenderTarget();t=o?o.samples:r.samples}else e.renderTarget&&(t=e.renderTarget.samples);t=t||1;const n=t>1&&e.renderTarget!==null&&e.isDepthTexture!==!0&&e.isFramebufferTexture!==!0;return{samples:t,primarySamples:n?1:t,isMSAA:n}}getCurrentColorFormat(e){let t;return e.textures!==null?t=this.getTextureFormatGPU(e.textures[0]):t=this.getPreferredCanvasFormat(),t}getCurrentColorSpace(e){return e.textures!==null?e.textures[0].colorSpace:this.backend.renderer.outputColorSpace}getPrimitiveTopology(e,t){if(e.isPoints)return ca.PointList;if(e.isLineSegments||e.isMesh&&t.wireframe===!0)return ca.LineList;if(e.isLine)return ca.LineStrip;if(e.isMesh)return ca.TriangleList}getSampleCount(e){let t=1;return e>1&&(t=Math.pow(2,Math.floor(Math.log2(e))),t===2&&(t=4)),t}getSampleCountRenderContext(e){return e.textures!==null?this.getSampleCount(e.sampleCount):this.getSampleCount(this.backend.renderer.samples)}getPreferredCanvasFormat(){return navigator.userAgent.includes("Quest")?L.BGRA8Unorm:navigator.gpu.getPreferredCanvasFormat()}}const L2=new Map([[Int8Array,["sint8","snorm8"]],[Uint8Array,["uint8","unorm8"]],[Int16Array,["sint16","snorm16"]],[Uint16Array,["uint16","unorm16"]],[Int32Array,["sint32","snorm32"]],[Uint32Array,["uint32","unorm32"]],[Float32Array,["float32"]]]),U2=new Map([[Lx,["float16"]]]),I2=new Map([[Int32Array,"sint32"],[Int16Array,"sint32"],[Uint32Array,"uint32"],[Uint16Array,"uint32"],[Float32Array,"float32"]]);class F2{constructor(e){this.backend=e}createAttribute(e,t){const n=this._getBufferAttribute(e),i=this.backend,r=i.get(n);let o=r.buffer;if(o===void 0){const a=i.device;let c=n.array;if(e.normalized===!1&&(c.constructor===Int16Array||c.constructor===Uint16Array)){const u=new Uint32Array(c.length);for(let h=0;h<c.length;h++)u[h]=c[h];c=u}if(n.array=c,(n.isStorageBufferAttribute||n.isStorageInstancedBufferAttribute)&&n.itemSize===3){c=new c.constructor(n.count*4);for(let u=0;u<n.count;u++)c.set(n.array.subarray(u*3,u*3+3),u*4);n.itemSize=4,n.array=c}const l=c.byteLength+(4-c.byteLength%4)%4;o=a.createBuffer({label:n.name,size:l,usage:t,mappedAtCreation:!0}),new c.constructor(o.getMappedRange()).set(c),o.unmap(),r.buffer=o}}updateAttribute(e){const t=this._getBufferAttribute(e),n=this.backend,i=n.device,r=n.get(t).buffer,o=t.array,a=this._isTypedArray(o),c=t.updateRanges;if(c.length===0)i.queue.writeBuffer(r,0,o,0);else{const l=a?1:o.BYTES_PER_ELEMENT;for(let u=0,h=c.length;u<h;u++){const d=c[u],f=d.start*l,m=d.count*l;i.queue.writeBuffer(r,0,o,f,m)}t.clearUpdateRanges()}}createShaderVertexBuffers(e){const t=e.getAttributes(),n=new Map;for(let i=0;i<t.length;i++){const r=t[i],o=r.array.BYTES_PER_ELEMENT,a=this._getBufferAttribute(r);let c=n.get(a);if(c===void 0){let h,d;r.isInterleavedBufferAttribute===!0?(h=r.data.stride*o,d=r.data.isInstancedInterleavedBuffer?Eu.Instance:Eu.Vertex):(h=r.itemSize*o,d=r.isInstancedBufferAttribute?Eu.Instance:Eu.Vertex),r.normalized===!1&&(r.array.constructor===Int16Array||r.array.constructor===Uint16Array)&&(h=4),c={arrayStride:h,attributes:[],stepMode:d},n.set(a,c)}const l=this._getVertexFormat(r),u=r.isInterleavedBufferAttribute===!0?r.offset*o:0;c.attributes.push({shaderLocation:i,offset:u,format:l})}return Array.from(n.values())}destroyAttribute(e){const t=this.backend;t.get(this._getBufferAttribute(e)).buffer.destroy(),t.delete(e)}async getArrayBufferAsync(e){const t=this.backend,n=t.device,r=t.get(this._getBufferAttribute(e)).buffer,o=r.size,a=n.createBuffer({label:`${e.name}_readback`,size:o,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),c=n.createCommandEncoder({label:`readback_encoder_${e.name}`});c.copyBufferToBuffer(r,0,a,0,o);const l=c.finish();n.queue.submit([l]),await a.mapAsync(GPUMapMode.READ);const u=a.getMappedRange(),h=new e.array.constructor(u.slice(0));return a.unmap(),h.buffer}_getVertexFormat(e){const{itemSize:t,normalized:n}=e,i=e.array.constructor,r=e.constructor;let o;if(t===1)o=I2.get(i);else{const c=(U2.get(r)||L2.get(i))[n?1:0];if(c){const l=i.BYTES_PER_ELEMENT*t,h=Math.floor((l+3)/4)*4/i.BYTES_PER_ELEMENT;if(h%1)throw new Error("THREE.WebGPUAttributeUtils: Bad vertex format item size.");o=`${c}x${h}`}}return o||console.error("THREE.WebGPUAttributeUtils: Vertex format not supported yet."),o}_isTypedArray(e){return ArrayBuffer.isView(e)&&!(e instanceof DataView)}_getBufferAttribute(e){return e.isInterleavedBufferAttribute&&(e=e.data),e}}class B2{constructor(e){this.backend=e,this.bindGroupLayoutCache=new WeakMap}createBindingsLayout(e){const t=this.backend,n=t.device,i=[];let r=0;for(const o of e.bindings){const a={binding:r++,visibility:o.visibility};if(o.isUniformBuffer||o.isStorageBuffer){const c={};o.isStorageBuffer&&(o.visibility&4&&(o.access===Vn.READ_WRITE||o.access===Vn.WRITE_ONLY)?c.type=Qd.Storage:c.type=Qd.ReadOnlyStorage),a.buffer=c}else if(o.isSampler){const c={};o.texture.isDepthTexture&&o.texture.compareFunction!==null&&(c.type="comparison"),a.sampler=c}else if(o.isSampledTexture&&o.texture.isVideoTexture)a.externalTexture={};else if(o.isSampledTexture&&o.store){const c={};c.format=this.backend.get(o.texture).texture.format;const l=o.access;l===Vn.READ_WRITE?c.access=Jd.ReadWrite:l===Vn.WRITE_ONLY?c.access=Jd.WriteOnly:c.access=Jd.ReadOnly,a.storageTexture=c}else if(o.isSampledTexture){const c={},{primarySamples:l}=t.utils.getTextureSampleData(o.texture);if(l>1&&(c.multisampled=!0,o.texture.isDepthTexture||(c.sampleType=Qo.UnfilterableFloat)),o.texture.isDepthTexture)c.sampleType=Qo.Depth;else if(o.texture.isDataTexture||o.texture.isDataArrayTexture||o.texture.isData3DTexture){const u=o.texture.type;u===Mn?c.sampleType=Qo.SInt:u===Yt?c.sampleType=Qo.UInt:u===rn&&(this.backend.hasFeature("float32-filterable")?c.sampleType=Qo.Float:c.sampleType=Qo.UnfilterableFloat)}o.isSampledCubeTexture?c.viewDimension=Jn.Cube:o.texture.isDataArrayTexture||o.texture.isCompressedArrayTexture?c.viewDimension=Jn.TwoDArray:o.isSampledTexture3D&&(c.viewDimension=Jn.ThreeD),a.texture=c}else console.error(`WebGPUBindingUtils: Unsupported binding "${o}".`);i.push(a)}return n.createBindGroupLayout({entries:i})}createBindings(e,t,n,i=0){const{backend:r,bindGroupLayoutCache:o}=this,a=r.get(e);let c=o.get(e.bindingsReference);c===void 0&&(c=this.createBindingsLayout(e),o.set(e.bindingsReference,c));let l;n>0&&(a.groups===void 0&&(a.groups=[],a.versions=[]),a.versions[n]===i&&(l=a.groups[n])),l===void 0&&(l=this.createBindGroup(e,c),n>0&&(a.groups[n]=l,a.versions[n]=i)),a.group=l,a.layout=c}updateBinding(e){const t=this.backend,n=t.device,i=e.buffer,r=t.get(e).buffer;n.queue.writeBuffer(r,0,i,0)}createBindGroup(e,t){const n=this.backend,i=n.device;let r=0;const o=[];for(const a of e.bindings){if(a.isUniformBuffer){const c=n.get(a);if(c.buffer===void 0){const l=a.byteLength,u=GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,h=i.createBuffer({label:"bindingBuffer_"+a.name,size:l,usage:u});c.buffer=h}o.push({binding:r,resource:{buffer:c.buffer}})}else if(a.isStorageBuffer){const c=n.get(a);if(c.buffer===void 0){const l=a.attribute;c.buffer=n.get(l).buffer}o.push({binding:r,resource:{buffer:c.buffer}})}else if(a.isSampler){const c=n.get(a.texture);o.push({binding:r,resource:c.sampler})}else if(a.isSampledTexture){const c=n.get(a.texture);let l;if(c.externalTexture!==void 0)l=i.importExternalTexture({source:c.externalTexture});else{const u=a.store?1:c.texture.mipLevelCount,h=`view-${c.texture.width}-${c.texture.height}-${u}`;if(l=c[h],l===void 0){const d=f2.All;let f;a.isSampledCubeTexture?f=Jn.Cube:a.isSampledTexture3D?f=Jn.ThreeD:a.texture.isDataArrayTexture||a.texture.isCompressedArrayTexture?f=Jn.TwoDArray:f=Jn.TwoD,l=c[h]=c.texture.createView({aspect:d,dimension:f,mipLevelCount:u})}}o.push({binding:r,resource:l})}r++}return i.createBindGroup({label:"bindGroup_"+e.name,layout:t,entries:o})}}class O2{constructor(e){this.backend=e}_getSampleCount(e){return this.backend.utils.getSampleCountRenderContext(e)}createRenderPipeline(e,t){const{object:n,material:i,geometry:r,pipeline:o}=e,{vertexProgram:a,fragmentProgram:c}=o,l=this.backend,u=l.device,h=l.utils,d=l.get(o),f=[];for(const $ of e.getBindings()){const ne=l.get($);f.push(ne.layout)}const m=l.attributeUtils.createShaderVertexBuffers(e);let _;i.transparent===!0&&i.blending!==Si&&(_=this._getBlending(i));let g={};i.stencilWrite===!0&&(g={compare:this._getStencilCompare(i),failOp:this._getStencilOperation(i.stencilFail),depthFailOp:this._getStencilOperation(i.stencilZFail),passOp:this._getStencilOperation(i.stencilZPass)});const p=this._getColorWriteMask(i),T=[];if(e.context.textures!==null){const $=e.context.textures;for(let ne=0;ne<$.length;ne++){const oe=h.getTextureFormatGPU($[ne]);T.push({format:oe,blend:_,writeMask:p})}}else{const $=h.getCurrentColorFormat(e.context);T.push({format:$,blend:_,writeMask:p})}const S=l.get(a).module,v=l.get(c).module,P=this._getPrimitiveState(n,r,i),N=this._getDepthCompare(i),w=h.getCurrentDepthStencilFormat(e.context),F=this._getSampleCount(e.context),E={label:`renderPipeline_${i.name||i.type}_${i.id}`,vertex:Object.assign({},S,{buffers:m}),fragment:Object.assign({},v,{targets:T}),primitive:P,multisample:{count:F,alphaToCoverageEnabled:i.alphaToCoverage&&F>1},layout:u.createPipelineLayout({bindGroupLayouts:f})},M={},D=e.context.depth,Z=e.context.stencil;if((D===!0||Z===!0)&&(D===!0&&(M.format=w,M.depthWriteEnabled=i.depthWrite,M.depthCompare=N),Z===!0&&(M.stencilFront=g,M.stencilBack={},M.stencilReadMask=i.stencilFuncMask,M.stencilWriteMask=i.stencilWriteMask),E.depthStencil=M),t===null)d.pipeline=u.createRenderPipeline(E);else{const $=new Promise(ne=>{u.createRenderPipelineAsync(E).then(oe=>{d.pipeline=oe,ne()})});t.push($)}}createBundleEncoder(e){const t=this.backend,{utils:n,device:i}=t,r=n.getCurrentDepthStencilFormat(e),o=n.getCurrentColorFormat(e),a=this._getSampleCount(e),c={label:"renderBundleEncoder",colorFormats:[o],depthStencilFormat:r,sampleCount:a};return i.createRenderBundleEncoder(c)}createComputePipeline(e,t){const n=this.backend,i=n.device,r=n.get(e.computeProgram).module,o=n.get(e),a=[];for(const c of t){const l=n.get(c);a.push(l.layout)}o.pipeline=i.createComputePipeline({compute:r,layout:i.createPipelineLayout({bindGroupLayouts:a})})}_getBlending(e){let t,n;const i=e.blending,r=e.blendSrc,o=e.blendDst,a=e.blendEquation;if(i===Ff){const c=e.blendSrcAlpha!==null?e.blendSrcAlpha:r,l=e.blendDstAlpha!==null?e.blendDstAlpha:o,u=e.blendEquationAlpha!==null?e.blendEquationAlpha:a;t={srcFactor:this._getBlendFactor(r),dstFactor:this._getBlendFactor(o),operation:this._getBlendOperation(a)},n={srcFactor:this._getBlendFactor(c),dstFactor:this._getBlendFactor(l),operation:this._getBlendOperation(u)}}else{const c=e.premultipliedAlpha,l=(u,h,d,f)=>{t={srcFactor:u,dstFactor:h,operation:$r.Add},n={srcFactor:d,dstFactor:f,operation:$r.Add}};if(c)switch(i){case Ui:l(Je.One,Je.OneMinusSrcAlpha,Je.One,Je.OneMinusSrcAlpha);break;case wa:l(Je.One,Je.One,Je.One,Je.One);break;case Na:l(Je.Zero,Je.OneMinusSrc,Je.Zero,Je.One);break;case Ca:l(Je.Zero,Je.Src,Je.Zero,Je.SrcAlpha);break}else switch(i){case Ui:l(Je.SrcAlpha,Je.OneMinusSrcAlpha,Je.One,Je.OneMinusSrcAlpha);break;case wa:l(Je.SrcAlpha,Je.One,Je.SrcAlpha,Je.One);break;case Na:l(Je.Zero,Je.OneMinusSrc,Je.Zero,Je.One);break;case Ca:l(Je.Zero,Je.Src,Je.Zero,Je.Src);break}}if(t!==void 0&&n!==void 0)return{color:t,alpha:n};console.error("THREE.WebGPURenderer: Invalid blending: ",i)}_getBlendFactor(e){let t;switch(e){case Vf:t=Je.Zero;break;case Gf:t=Je.One;break;case zf:t=Je.Src;break;case kf:t=Je.OneMinusSrc;break;case Vc:t=Je.SrcAlpha;break;case Gc:t=Je.OneMinusSrcAlpha;break;case $f:t=Je.Dst;break;case Xf:t=Je.OneMinusDstColor;break;case Hf:t=Je.DstAlpha;break;case Wf:t=Je.OneMinusDstAlpha;break;case qf:t=Je.SrcAlphaSaturated;break;case YP:t=Je.Constant;break;case jP:t=Je.OneMinusConstant;break;default:console.error("THREE.WebGPURenderer: Blend factor not supported.",e)}return t}_getStencilCompare(e){let t;const n=e.stencilFunc;switch(n){case yb:t=wn.Never;break;case af:t=wn.Always;break;case vb:t=wn.Less;break;case Sb:t=wn.LessEqual;break;case Tb:t=wn.Equal;break;case Eb:t=wn.GreaterEqual;break;case bb:t=wn.Greater;break;case Mb:t=wn.NotEqual;break;default:console.error("THREE.WebGPURenderer: Invalid stencil function.",n)}return t}_getStencilOperation(e){let t;switch(e){case Xr:t=cr.Keep;break;case db:t=cr.Zero;break;case fb:t=cr.Replace;break;case xb:t=cr.Invert;break;case pb:t=cr.IncrementClamp;break;case mb:t=cr.DecrementClamp;break;case gb:t=cr.IncrementWrap;break;case _b:t=cr.DecrementWrap;break;default:console.error("THREE.WebGPURenderer: Invalid stencil operation.",t)}return t}_getBlendOperation(e){let t;switch(e){case vi:t=$r.Add;break;case Bf:t=$r.Subtract;break;case Of:t=$r.ReverseSubtract;break;case _x:t=$r.Min;break;case xx:t=$r.Max;break;default:console.error("THREE.WebGPUPipelineUtils: Blend equation not supported.",e)}return t}_getPrimitiveState(e,t,n){const i={},r=this.backend.utils;switch(i.topology=r.getPrimitiveTopology(e,n),t.index!==null&&e.isLine===!0&&e.isLineSegments!==!0&&(i.stripIndexFormat=t.index.array instanceof Uint16Array?Ja.Uint16:Ja.Uint32),n.side){case Ki:i.frontFace=jd.CCW,i.cullMode=Kd.Back;break;case Wt:i.frontFace=jd.CCW,i.cullMode=Kd.Front;break;case Bn:i.frontFace=jd.CCW,i.cullMode=Kd.None;break;default:console.error("THREE.WebGPUPipelineUtils: Unknown material.side value.",n.side);break}return i}_getColorWriteMask(e){return e.colorWrite===!0?H_.All:H_.None}_getDepthCompare(e){let t;if(e.depthTest===!1)t=wn.Always;else{const n=e.depthFunc;switch(n){case zc:t=wn.Never;break;case kc:t=wn.Always;break;case Hc:t=wn.Less;break;case br:t=wn.LessEqual;break;case Wc:t=wn.Equal;break;case $c:t=wn.GreaterEqual;break;case Xc:t=wn.Greater;break;case qc:t=wn.NotEqual;break;default:console.error("THREE.WebGPUPipelineUtils: Invalid depth function.",n)}}return t}}class V2 extends TS{constructor(e={}){super(e),this.isWebGPUBackend=!0,this.parameters.alpha=e.alpha===void 0?!0:e.alpha,this.parameters.requiredLimits=e.requiredLimits===void 0?{}:e.requiredLimits,this.trackTimestamp=e.trackTimestamp===!0,this.device=null,this.context=null,this.colorBuffer=null,this.defaultRenderPassdescriptor=null,this.utils=new D2(this),this.attributeUtils=new F2(this),this.bindingUtils=new B2(this),this.pipelineUtils=new O2(this),this.textureUtils=new S2(this),this.occludedResolveCache=new Map}async init(e){await super.init(e);const t=this.parameters;let n;if(t.device===void 0){const o={powerPreference:t.powerPreference},a=typeof navigator<"u"?await navigator.gpu.requestAdapter(o):null;if(a===null)throw new Error("WebGPUBackend: Unable to create WebGPU adapter.");const c=Object.values(wf),l=[];for(const h of c)a.features.has(h)&&l.push(h);const u={requiredFeatures:l,requiredLimits:t.requiredLimits};n=await a.requestDevice(u)}else n=t.device;n.lost.then(o=>{const a={api:"WebGPU",message:o.message||"Unknown reason",reason:o.reason||null,originalEvent:o};e.onDeviceLost(a)});const i=t.context!==void 0?t.context:e.domElement.getContext("webgpu");this.device=n,this.context=i;const r=t.alpha?"premultiplied":"opaque";this.trackTimestamp=this.trackTimestamp&&this.hasFeature(wf.TimestampQuery),this.context.configure({device:this.device,format:this.utils.getPreferredCanvasFormat(),usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC,alphaMode:r}),this.updateSize()}get coordinateSystem(){return _s}async getArrayBufferAsync(e){return await this.attributeUtils.getArrayBufferAsync(e)}getContext(){return this.context}_getDefaultRenderPassDescriptor(){let e=this.defaultRenderPassdescriptor;if(e===null){const n=this.renderer;e={colorAttachments:[{view:null}]},(this.renderer.depth===!0||this.renderer.stencil===!0)&&(e.depthStencilAttachment={view:this.textureUtils.getDepthBuffer(n.depth,n.stencil).createView()});const i=e.colorAttachments[0];this.renderer.samples>0?i.view=this.colorBuffer.createView():i.resolveTarget=void 0,this.defaultRenderPassdescriptor=e}const t=e.colorAttachments[0];return this.renderer.samples>0?t.resolveTarget=this.context.getCurrentTexture().createView():t.view=this.context.getCurrentTexture().createView(),e}_getRenderPassDescriptor(e,t={}){const n=e.renderTarget,i=this.get(n);let r=i.descriptors;if(r===void 0||i.width!==n.width||i.height!==n.height||i.dimensions!==n.dimensions||i.activeMipmapLevel!==n.activeMipmapLevel||i.activeCubeFace!==e.activeCubeFace||i.samples!==n.samples||i.loadOp!==t.loadOp){r={},i.descriptors=r;const c=()=>{n.removeEventListener("dispose",c),this.delete(n)};n.addEventListener("dispose",c)}const o=e.getCacheKey();let a=r[o];if(a===void 0){const c=e.textures,l=[];let u;for(let h=0;h<c.length;h++){const d=this.get(c[h]),f={label:`colorAttachment_${h}`,baseMipLevel:e.activeMipmapLevel,mipLevelCount:1,baseArrayLayer:e.activeCubeFace,arrayLayerCount:1,dimension:Jn.TwoD};n.isRenderTarget3D?(u=e.activeCubeFace,f.baseArrayLayer=0,f.dimension=Jn.ThreeD,f.depthOrArrayLayers=c[h].image.depth):n.isRenderTargetArray&&(f.dimension=Jn.TwoDArray,f.depthOrArrayLayers=c[h].image.depth);const m=d.texture.createView(f);let _,g;d.msaaTexture!==void 0?(_=d.msaaTexture.createView(),g=m):(_=m,g=void 0),l.push({view:_,depthSlice:u,resolveTarget:g,loadOp:sn.Load,storeOp:Fn.Store,...t})}if(a={colorAttachments:l},e.depth){const d={view:this.get(e.depthTexture).texture.createView()};a.depthStencilAttachment=d}r[o]=a,i.width=n.width,i.height=n.height,i.samples=n.samples,i.activeMipmapLevel=e.activeMipmapLevel,i.activeCubeFace=e.activeCubeFace,i.dimensions=n.dimensions,i.depthSlice=u,i.loadOp=l[0].loadOp}return a}beginRender(e){const t=this.get(e),n=this.device,i=e.occlusionQueryCount;let r;i>0&&(t.currentOcclusionQuerySet&&t.currentOcclusionQuerySet.destroy(),t.currentOcclusionQueryBuffer&&t.currentOcclusionQueryBuffer.destroy(),t.currentOcclusionQuerySet=t.occlusionQuerySet,t.currentOcclusionQueryBuffer=t.occlusionQueryBuffer,t.currentOcclusionQueryObjects=t.occlusionQueryObjects,r=n.createQuerySet({type:"occlusion",count:i,label:`occlusionQuerySet_${e.id}`}),t.occlusionQuerySet=r,t.occlusionQueryIndex=0,t.occlusionQueryObjects=new Array(i),t.lastOcclusionObject=null);let o;e.textures===null?o=this._getDefaultRenderPassDescriptor():o=this._getRenderPassDescriptor(e,{loadOp:sn.Load}),this.initTimestampQuery(e,o),o.occlusionQuerySet=r;const a=o.depthStencilAttachment;if(e.textures!==null){const u=o.colorAttachments;for(let h=0;h<u.length;h++){const d=u[h];e.clearColor?(d.clearValue=h===0?e.clearColorValue:{r:0,g:0,b:0,a:1},d.loadOp=sn.Clear,d.storeOp=Fn.Store):(d.loadOp=sn.Load,d.storeOp=Fn.Store)}}else{const u=o.colorAttachments[0];e.clearColor?(u.clearValue=e.clearColorValue,u.loadOp=sn.Clear,u.storeOp=Fn.Store):(u.loadOp=sn.Load,u.storeOp=Fn.Store)}e.depth&&(e.clearDepth?(a.depthClearValue=e.clearDepthValue,a.depthLoadOp=sn.Clear,a.depthStoreOp=Fn.Store):(a.depthLoadOp=sn.Load,a.depthStoreOp=Fn.Store)),e.stencil&&(e.clearStencil?(a.stencilClearValue=e.clearStencilValue,a.stencilLoadOp=sn.Clear,a.stencilStoreOp=Fn.Store):(a.stencilLoadOp=sn.Load,a.stencilStoreOp=Fn.Store));const c=n.createCommandEncoder({label:"renderContext_"+e.id}),l=c.beginRenderPass(o);if(t.descriptor=o,t.encoder=c,t.currentPass=l,t.currentSets={attributes:{},bindingGroups:[],pipeline:null,index:null},t.renderBundles=[],e.viewport&&this.updateViewport(e),e.scissor){const{x:u,y:h,width:d,height:f}=e.scissorValue;l.setScissorRect(u,h,d,f)}}finishRender(e){const t=this.get(e),n=e.occlusionQueryCount;if(t.renderBundles.length>0&&t.currentPass.executeBundles(t.renderBundles),n>t.occlusionQueryIndex&&t.currentPass.endOcclusionQuery(),t.currentPass.end(),n>0){const i=n*8;let r=this.occludedResolveCache.get(i);r===void 0&&(r=this.device.createBuffer({size:i,usage:GPUBufferUsage.QUERY_RESOLVE|GPUBufferUsage.COPY_SRC}),this.occludedResolveCache.set(i,r));const o=this.device.createBuffer({size:i,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});t.encoder.resolveQuerySet(t.occlusionQuerySet,0,n,r,0),t.encoder.copyBufferToBuffer(r,0,o,0,i),t.occlusionQueryBuffer=o,this.resolveOccludedAsync(e)}if(this.prepareTimestampBuffer(e,t.encoder),this.device.queue.submit([t.encoder.finish()]),e.textures!==null){const i=e.textures;for(let r=0;r<i.length;r++){const o=i[r];o.generateMipmaps===!0&&this.textureUtils.generateMipmaps(o)}}}isOccluded(e,t){const n=this.get(e);return n.occluded&&n.occluded.has(t)}async resolveOccludedAsync(e){const t=this.get(e),{currentOcclusionQueryBuffer:n,currentOcclusionQueryObjects:i}=t;if(n&&i){const r=new WeakSet;t.currentOcclusionQueryObjects=null,t.currentOcclusionQueryBuffer=null,await n.mapAsync(GPUMapMode.READ);const o=n.getMappedRange(),a=new BigUint64Array(o);for(let c=0;c<i.length;c++)a[c]!==BigInt(0)&&r.add(i[c]);n.destroy(),t.occluded=r}}updateViewport(e){const{currentPass:t}=this.get(e),{x:n,y:i,width:r,height:o,minDepth:a,maxDepth:c}=e.viewportValue;t.setViewport(n,i,r,o,a,c)}clear(e,t,n,i=null){const r=this.device,o=this.renderer;let a=[],c,l,u,h;if(e){const m=this.getClearColor();if(this.renderer.alpha===!0){const _=m.a;l={r:m.r*_,g:m.g*_,b:m.b*_,a:_}}else l={r:m.r,g:m.g,b:m.b,a:m.a}}if(i===null){u=o.depth,h=o.stencil;const m=this._getDefaultRenderPassDescriptor();if(e){a=m.colorAttachments;const _=a[0];_.clearValue=l,_.loadOp=sn.Clear,_.storeOp=Fn.Store}(u||h)&&(c=m.depthStencilAttachment)}else u=i.depth,h=i.stencil,e&&(a=this._getRenderPassDescriptor(i,{loadOp:sn.Clear}).colorAttachments),(u||h)&&(c={view:this.get(i.depthTexture).texture.createView()});u&&(t?(c.depthLoadOp=sn.Clear,c.depthClearValue=o.getClearDepth(),c.depthStoreOp=Fn.Store):(c.depthLoadOp=sn.Load,c.depthStoreOp=Fn.Store)),h&&(n?(c.stencilLoadOp=sn.Clear,c.stencilClearValue=o.getClearStencil(),c.stencilStoreOp=Fn.Store):(c.stencilLoadOp=sn.Load,c.stencilStoreOp=Fn.Store));const d=r.createCommandEncoder({});d.beginRenderPass({colorAttachments:a,depthStencilAttachment:c}).end(),r.queue.submit([d.finish()])}beginCompute(e){const t=this.get(e),n={};this.initTimestampQuery(e,n),t.cmdEncoderGPU=this.device.createCommandEncoder(),t.passEncoderGPU=t.cmdEncoderGPU.beginComputePass(n)}compute(e,t,n,i){const{passEncoderGPU:r}=this.get(e),o=this.get(i).pipeline;r.setPipeline(o);for(let u=0,h=n.length;u<h;u++){const d=n[u],f=this.get(d);r.setBindGroup(u,f.group)}const a=this.device.limits.maxComputeWorkgroupsPerDimension,c=this.get(t);c.dispatchSize===void 0&&(c.dispatchSize={x:0,y:1,z:1});const{dispatchSize:l}=c;t.dispatchCount>a?(l.x=Math.min(t.dispatchCount,a),l.y=Math.ceil(t.dispatchCount/a)):l.x=t.dispatchCount,r.dispatchWorkgroups(l.x,l.y,l.z)}finishCompute(e){const t=this.get(e);t.passEncoderGPU.end(),this.prepareTimestampBuffer(e,t.cmdEncoderGPU),this.device.queue.submit([t.cmdEncoderGPU.finish()])}async waitForGPU(){await this.device.queue.onSubmittedWorkDone()}draw(e,t){const{object:n,context:i,pipeline:r}=e,o=e.getBindings(),a=this.get(i),c=this.get(r).pipeline,l=a.currentSets,u=a.currentPass,h=e.getDrawParameters();if(h===null)return;l.pipeline!==c&&(u.setPipeline(c),l.pipeline=c);const d=l.bindingGroups;for(let g=0,p=o.length;g<p;g++){const T=o[g],S=this.get(T);d[T.index]!==T.id&&(u.setBindGroup(T.index,S.group),d[T.index]=T.id)}const f=e.getIndex(),m=f!==null;if(m===!0&&l.index!==f){const g=this.get(f).buffer,p=f.array instanceof Uint16Array?Ja.Uint16:Ja.Uint32;u.setIndexBuffer(g,p),l.index=f}const _=e.getVertexBuffers();for(let g=0,p=_.length;g<p;g++){const T=_[g];if(l.attributes[g]!==T){const S=this.get(T).buffer;u.setVertexBuffer(g,S),l.attributes[g]=T}}if(a.occlusionQuerySet!==void 0){const g=a.lastOcclusionObject;g!==n&&(g!==null&&g.occlusionTest===!0&&(u.endOcclusionQuery(),a.occlusionQueryIndex++),n.occlusionTest===!0&&(u.beginOcclusionQuery(a.occlusionQueryIndex),a.occlusionQueryObjects[a.occlusionQueryIndex]=n),a.lastOcclusionObject=n)}if(n.isBatchedMesh===!0){const g=n._multiDrawStarts,p=n._multiDrawCounts,T=n._multiDrawCount,S=n._multiDrawInstances;for(let v=0;v<T;v++){const P=S?S[v]:1,N=P>1?0:v;m===!0?u.drawIndexed(p[v],P,g[v]/f.array.BYTES_PER_ELEMENT,0,N):u.draw(p[v],P,g[v],N)}}else if(m===!0){const{vertexCount:g,instanceCount:p,firstVertex:T}=h,S=e.getIndirect();if(S!==null){const v=this.get(S).buffer;u.drawIndexedIndirect(v,0)}else u.drawIndexed(g,p,T,0,0);t.update(n,g,p)}else{const{vertexCount:g,instanceCount:p,firstVertex:T}=h,S=e.getIndirect();if(S!==null){const v=this.get(S).buffer;u.drawIndirect(v,0)}else u.draw(g,p,T,0);t.update(n,g,p)}}needsRenderUpdate(e){const t=this.get(e),{object:n,material:i}=e,r=this.utils,o=r.getSampleCountRenderContext(e.context),a=r.getCurrentColorSpace(e.context),c=r.getCurrentColorFormat(e.context),l=r.getCurrentDepthStencilFormat(e.context),u=r.getPrimitiveTopology(n,i);let h=!1;return(t.material!==i||t.materialVersion!==i.version||t.transparent!==i.transparent||t.blending!==i.blending||t.premultipliedAlpha!==i.premultipliedAlpha||t.blendSrc!==i.blendSrc||t.blendDst!==i.blendDst||t.blendEquation!==i.blendEquation||t.blendSrcAlpha!==i.blendSrcAlpha||t.blendDstAlpha!==i.blendDstAlpha||t.blendEquationAlpha!==i.blendEquationAlpha||t.colorWrite!==i.colorWrite||t.depthWrite!==i.depthWrite||t.depthTest!==i.depthTest||t.depthFunc!==i.depthFunc||t.stencilWrite!==i.stencilWrite||t.stencilFunc!==i.stencilFunc||t.stencilFail!==i.stencilFail||t.stencilZFail!==i.stencilZFail||t.stencilZPass!==i.stencilZPass||t.stencilFuncMask!==i.stencilFuncMask||t.stencilWriteMask!==i.stencilWriteMask||t.side!==i.side||t.alphaToCoverage!==i.alphaToCoverage||t.sampleCount!==o||t.colorSpace!==a||t.colorFormat!==c||t.depthStencilFormat!==l||t.primitiveTopology!==u||t.clippingContextCacheKey!==e.clippingContextCacheKey)&&(t.material=i,t.materialVersion=i.version,t.transparent=i.transparent,t.blending=i.blending,t.premultipliedAlpha=i.premultipliedAlpha,t.blendSrc=i.blendSrc,t.blendDst=i.blendDst,t.blendEquation=i.blendEquation,t.blendSrcAlpha=i.blendSrcAlpha,t.blendDstAlpha=i.blendDstAlpha,t.blendEquationAlpha=i.blendEquationAlpha,t.colorWrite=i.colorWrite,t.depthWrite=i.depthWrite,t.depthTest=i.depthTest,t.depthFunc=i.depthFunc,t.stencilWrite=i.stencilWrite,t.stencilFunc=i.stencilFunc,t.stencilFail=i.stencilFail,t.stencilZFail=i.stencilZFail,t.stencilZPass=i.stencilZPass,t.stencilFuncMask=i.stencilFuncMask,t.stencilWriteMask=i.stencilWriteMask,t.side=i.side,t.alphaToCoverage=i.alphaToCoverage,t.sampleCount=o,t.colorSpace=a,t.colorFormat=c,t.depthStencilFormat=l,t.primitiveTopology=u,t.clippingContextCacheKey=e.clippingContextCacheKey,h=!0),h}getRenderCacheKey(e){const{object:t,material:n}=e,i=this.utils,r=e.context;return[n.transparent,n.blending,n.premultipliedAlpha,n.blendSrc,n.blendDst,n.blendEquation,n.blendSrcAlpha,n.blendDstAlpha,n.blendEquationAlpha,n.colorWrite,n.depthWrite,n.depthTest,n.depthFunc,n.stencilWrite,n.stencilFunc,n.stencilFail,n.stencilZFail,n.stencilZPass,n.stencilFuncMask,n.stencilWriteMask,n.side,i.getSampleCountRenderContext(r),i.getCurrentColorSpace(r),i.getCurrentColorFormat(r),i.getCurrentDepthStencilFormat(r),i.getPrimitiveTopology(t,n),e.getGeometryCacheKey(),e.clippingContextCacheKey].join()}createSampler(e){this.textureUtils.createSampler(e)}destroySampler(e){this.textureUtils.destroySampler(e)}createDefaultTexture(e){this.textureUtils.createDefaultTexture(e)}createTexture(e,t){this.textureUtils.createTexture(e,t)}updateTexture(e,t){this.textureUtils.updateTexture(e,t)}generateMipmaps(e){this.textureUtils.generateMipmaps(e)}destroyTexture(e){this.textureUtils.destroyTexture(e)}copyTextureToBuffer(e,t,n,i,r,o){return this.textureUtils.copyTextureToBuffer(e,t,n,i,r,o)}initTimestampQuery(e,t){if(!this.trackTimestamp)return;const n=this.get(e);if(!n.timeStampQuerySet){const i=e.isComputeNode?"compute":"render",r=this.device.createQuerySet({type:"timestamp",count:2,label:`timestamp_${i}_${e.id}`});Object.assign(t,{timestampWrites:{querySet:r,beginningOfPassWriteIndex:0,endOfPassWriteIndex:1}}),n.timeStampQuerySet=r}}prepareTimestampBuffer(e,t){if(!this.trackTimestamp)return;const n=this.get(e),i=2*BigInt64Array.BYTES_PER_ELEMENT;n.currentTimestampQueryBuffers===void 0&&(n.currentTimestampQueryBuffers={resolveBuffer:this.device.createBuffer({label:"timestamp resolve buffer",size:i,usage:GPUBufferUsage.QUERY_RESOLVE|GPUBufferUsage.COPY_SRC}),resultBuffer:this.device.createBuffer({label:"timestamp result buffer",size:i,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ})});const{resolveBuffer:r,resultBuffer:o}=n.currentTimestampQueryBuffers;t.resolveQuerySet(n.timeStampQuerySet,0,2,r,0),o.mapState==="unmapped"&&t.copyBufferToBuffer(r,0,o,0,i)}async resolveTimestampAsync(e,t="render"){if(!this.trackTimestamp)return;const n=this.get(e);if(n.currentTimestampQueryBuffers===void 0)return;const{resultBuffer:i}=n.currentTimestampQueryBuffers;i.mapState==="unmapped"&&i.mapAsync(GPUMapMode.READ).then(()=>{const r=new BigUint64Array(i.getMappedRange()),o=Number(r[1]-r[0])/1e6;this.renderer.info.updateTimestamp(t,o),i.unmap()})}createNodeBuilder(e,t){return new P2(e,t)}createProgram(e){const t=this.get(e);t.module={module:this.device.createShaderModule({code:e.code,label:e.stage+(e.name!==""?`_${e.name}`:"")}),entryPoint:"main"}}destroyProgram(e){this.delete(e)}createRenderPipeline(e,t){this.pipelineUtils.createRenderPipeline(e,t)}createComputePipeline(e,t){this.pipelineUtils.createComputePipeline(e,t)}beginBundle(e){const t=this.get(e);t._currentPass=t.currentPass,t._currentSets=t.currentSets,t.currentSets={attributes:{},bindingGroups:[],pipeline:null,index:null},t.currentPass=this.pipelineUtils.createBundleEncoder(e)}finishBundle(e,t){const n=this.get(e),r=n.currentPass.finish();this.get(t).bundleGPU=r,n.currentSets=n._currentSets,n.currentPass=n._currentPass}addBundle(e,t){this.get(e).renderBundles.push(this.get(t).bundleGPU)}createBindings(e,t,n,i){this.bindingUtils.createBindings(e,t,n,i)}updateBindings(e,t,n,i){this.bindingUtils.createBindings(e,t,n,i)}updateBinding(e){this.bindingUtils.updateBinding(e)}createIndexAttribute(e){this.attributeUtils.createAttribute(e,GPUBufferUsage.INDEX|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST)}createAttribute(e){this.attributeUtils.createAttribute(e,GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST)}createStorageAttribute(e){this.attributeUtils.createAttribute(e,GPUBufferUsage.STORAGE|GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST)}createIndirectStorageAttribute(e){this.attributeUtils.createAttribute(e,GPUBufferUsage.STORAGE|GPUBufferUsage.INDIRECT|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST)}updateAttribute(e){this.attributeUtils.updateAttribute(e)}destroyAttribute(e){this.attributeUtils.destroyAttribute(e)}updateSize(){this.colorBuffer=this.textureUtils.getColorBuffer(),this.defaultRenderPassdescriptor=null}getMaxAnisotropy(){return 16}hasFeature(e){return this.device.features.has(e)}copyTextureToTexture(e,t,n=null,i=null,r=0){let o=0,a=0,c=0,l=0,u=0,h=0,d=e.image.width,f=e.image.height;n!==null&&(l=n.x,u=n.y,h=n.z||0,d=n.width,f=n.height),i!==null&&(o=i.x,a=i.y,c=i.z||0);const m=this.device.createCommandEncoder({label:"copyTextureToTexture_"+e.id+"_"+t.id}),_=this.get(e).texture,g=this.get(t).texture;m.copyTextureToTexture({texture:_,mipLevel:r,origin:{x:l,y:u,z:h}},{texture:g,mipLevel:r,origin:{x:o,y:a,z:c}},[d,f,1]),this.device.queue.submit([m.finish()])}copyFramebufferToTexture(e,t,n){const i=this.get(t);let r=null;t.renderTarget?e.isDepthTexture?r=this.get(t.depthTexture).texture:r=this.get(t.textures[0]).texture:e.isDepthTexture?r=this.textureUtils.getDepthBuffer(t.depth,t.stencil):r=this.context.getCurrentTexture();const o=this.get(e).texture;if(r.format!==o.format){console.error("WebGPUBackend: copyFramebufferToTexture: Source and destination formats do not match.",r.format,o.format);return}let a;if(i.currentPass?(i.currentPass.end(),a=i.encoder):a=this.device.createCommandEncoder({label:"copyFramebufferToTexture_"+e.id}),a.copyTextureToTexture({texture:r,origin:[n.x,n.y,0]},{texture:o},[n.z,n.w]),e.generateMipmaps&&this.textureUtils.generateMipmaps(e),i.currentPass){const{descriptor:c}=i;for(let l=0;l<c.colorAttachments.length;l++)c.colorAttachments[l].loadOp=sn.Load;if(t.depth&&(c.depthStencilAttachment.depthLoadOp=sn.Load),t.stencil&&(c.depthStencilAttachment.stencilLoadOp=sn.Load),i.currentPass=a.beginRenderPass(c),i.currentSets={attributes:{},bindingGroups:[],pipeline:null,index:null},t.viewport&&this.updateViewport(t),t.scissor){const{x:l,y:u,width:h,height:d}=t.scissorValue;i.currentPass.setScissorRect(l,u,h,d)}}else this.device.queue.submit([a.finish()])}}class G2 extends kx{constructor(e,t,n,i,r,o){super(e,t,n,i,r,o),this.iesMap=null}copy(e,t){return super.copy(e,t),this.iesMap=e.iesMap,this}}class z2 extends pS{constructor(){super(),this.addMaterial(X1,"MeshPhongMaterial"),this.addMaterial(fT,"MeshStandardMaterial"),this.addMaterial(MP,"MeshPhysicalMaterial"),this.addMaterial(wP,"MeshToonMaterial"),this.addMaterial(J0,"MeshBasicMaterial"),this.addMaterial(W1,"MeshLambertMaterial"),this.addMaterial(U1,"MeshNormalMaterial"),this.addMaterial(PP,"MeshMatcapMaterial"),this.addMaterial(R1,"LineBasicMaterial"),this.addMaterial(N1,"LineDashedMaterial"),this.addMaterial(LP,"PointsMaterial"),this.addMaterial(FP,"SpriteMaterial"),this.addMaterial(VP,"ShadowMaterial"),this.addLight(zU,NM),this.addLight(CF,PM),this.addLight(PF,LM),this.addLight(dS,kx),this.addLight(LF,DM),this.addLight(UF,AM),this.addLight(IF,IM),this.addLight(DF,G2),this.addToneMapping(UT,Tx),this.addToneMapping(IT,Sx),this.addToneMapping(FT,bx),this.addToneMapping(BT,Mx),this.addToneMapping(OT,Ex),this.addToneMapping(VT,Yf)}}class j_ extends XF{constructor(e={}){let t;e.forceWebGL?t=k_:(t=V2,e.getFallback=()=>(console.warn("THREE.WebGPURenderer: WebGPU is not available, running under WebGL2 backend."),new k_(e)));const n=new t(e);super(n,e),this.library=new z2,this.isWebGPURenderer=!0}}var dn,ss,Bs,Os,fl,pl,ml,pr,ga,_a;const Ls=class Ls{constructor(){nt(this,ss);nt(this,Bs);nt(this,Os);nt(this,fl);nt(this,pl);nt(this,ml);nt(this,pr);nt(this,ga);nt(this,_a);this.state=dn.NEW,Me(this,ss,!1),Me(this,Bs,!0),Me(this,Os,!0),Me(this,fl,()=>{switch(this.state){case dn.RUNNING:ee(this,ss)&&ee(this,pr).call(this);break;case dn.PAUSED:ee(this,ss)||this.start();break}}),Me(this,pl,()=>{switch(this.state){case dn.RUNNING:case dn.PAUSED:ee(this,Bs)?this.start():ee(this,pr).call(this);break}}),Me(this,ml,()=>{switch(this.state){case dn.RUNNING:case dn.PAUSED:ee(this,Os)?this.start():ee(this,pr).call(this);break}}),Me(this,pr,()=>{this.state!==dn.PAUSED&&(this.state=dn.PAUSED,Di(this,dn.Pause))}),Me(this,ga,!0),Me(this,_a,()=>{ee(this,ga)?(Me(this,ga,!1),Di(this,dn.Init)):Di(this,dn.Restart)}),Uf(this)}get pausedByUser(){return ee(this,ss)}set pausedByUser(e){e!==ee(this,ss)&&(Me(this,ss,e),ee(this,fl).call(this))}get documentIsVisible(){return ee(this,Bs)}set documentIsVisible(e){e!==ee(this,Bs)&&(Me(this,Bs,e),ee(this,pl).call(this))}get elementIsInsideViewport(){return ee(this,Os)}set elementIsInsideViewport(e){e!==ee(this,Os)&&(Me(this,Os,e),ee(this,ml).call(this))}start(){if(this.state!==dn.RUNNING){const e=ee(this,ss)||!ee(this,Bs)||!ee(this,Os);switch(this.state){case dn.NEW:e?ee(this,pr).call(this):(ee(this,_a).call(this),this.state=dn.RUNNING,Di(this,dn.Start));break;case dn.PAUSED:e||(ee(this,_a).call(this),this.state=dn.RUNNING,Di(this,dn.Start));break}}}};ss=new WeakMap,Bs=new WeakMap,Os=new WeakMap,fl=new WeakMap,pl=new WeakMap,ml=new WeakMap,pr=new WeakMap,ga=new WeakMap,_a=new WeakMap,Ls.NEW="new",Ls.RUNNING="running",Ls.PAUSED="paused",Ls.Init="init",Ls.Start="start",Ls.Pause="pause",Ls.Restart="restart";let Fs=Ls;dn=Fs;function k2(s){return parseFloat(s.getPropertyValue("padding-top")||"0")+parseFloat(s.getPropertyValue("padding-bottom")||"0")}function H2(s){return parseFloat(s.getPropertyValue("padding-left")||"0")+parseFloat(s.getPropertyValue("padding-right")||"0")}function bS(s){return parseFloat(s.getPropertyValue("border-top-width")||"0")+parseFloat(s.getPropertyValue("border-bottom-width")||"0")}function MS(s){return bS(s)+k2(s)}function ES(s){return bS(s)+H2(s)}function W2(s,e){e??(e=getComputedStyle(s,null));const t=s.getBoundingClientRect(),n=ES(e),i=MS(e);return{style:e,width:t.width-n,height:t.height-i}}function $2(s){return s.getPropertyValue("box-sizing")==="content-box"}let K_=!1;function Z_(s,e){K_||(console.warn(`Oops, the canvas width or height should not bigger than ${ih.MaxResolution} pixels (${s}x${e} was requested).`,"If you need more, please set Display.MaxResolution before you create a Display!"),K_=!0)}var Wi,$i,no,xa,io,so,Xi;const gi=class gi{constructor(e,t){nt(this,Wi);nt(this,$i);nt(this,no);nt(this,xa);nt(this,io);nt(this,so);nt(this,Xi);if(Me(this,Wi,new eb(0)),Me(this,$i,new Fs),Me(this,no,-1),Me(this,xa,""),Me(this,so,!1),this.width=0,this.height=0,this.frameNo=0,Me(this,Xi,i=>{Di(this,i,this.getEventArgs())}),Uf(this),Lf(this,["init","start","resize"]),ee(this,Wi).stop(),this.resizeToCallback=t==null?void 0:t.resizeTo,this.styleSheetRoot=(t==null?void 0:t.styleSheetRoot)??document.head,e instanceof Hg||e instanceof j_)this.renderer=e,this.resizeToElement=e.domElement;else if(e instanceof HTMLElement){let i;if(e.tagName==="CANVAS")i=e;else{const r=document.createElement("div");la.addRule(r,gi.CssRulesPrefixContainer,"display:block;width:100%;height:100%;margin:0;padding:0;border:0;line-height:0;font-size:0;",this.styleSheetRoot),e.appendChild(r),i=document.createElement("canvas"),r.appendChild(i)}this.resizeToElement=e,this.renderer=t!=null&&t.webgpu?new j_({canvas:i,stencil:!1,alpha:!0,antialias:!0,...t,powerPreference:"high-performance"}):new Hg({canvas:i,precision:"highp",preserveDrawingBuffer:!1,powerPreference:"high-performance",stencil:!1,alpha:!0,antialias:!0,...t})}const{domElement:n}=this.renderer;if(la.addRule(n,gi.CssRulesPrefixDisplay,"touch-action: none;",this.styleSheetRoot),n.setAttribute("touch-action","none"),this.resizeToElement=(t==null?void 0:t.resizeToElement)??this.resizeToElement,this.resizeToAttributeEl=(t==null?void 0:t.resizeToAttributeEl)??n,this.resize(),xo(ee(this,$i),{[Fs.Init]:async()=>{this.renderer.isWebGPURenderer&&await this.renderer.init(),ee(this,Xi).call(this,"init")},[Fs.Restart]:()=>ee(this,Xi).call(this,"restart"),[Fs.Start]:()=>{ee(this,Wi).start(),ee(this,Wi).update();const i=r=>{this.pause||this.renderFrame(r),Me(this,no,window.requestAnimationFrame(i))};Me(this,no,window.requestAnimationFrame(i)),ee(this,Xi).call(this,"start")},[Fs.Pause]:()=>{window.cancelAnimationFrame(ee(this,no)),ee(this,Wi).stop(),fx(this,"start"),ee(this,Xi).call(this,"pause")}}),typeof document<"u"){const i=()=>{ee(this,$i).documentIsVisible=!document.hidden};document.addEventListener("visibilitychange",i,!1),sh(this,"dispose",()=>{document.removeEventListener("visibilitychange",i,!1)}),i()}}get now(){return ee(this,Wi).time}get deltaTime(){return ee(this,Wi).deltaTime}get pause(){return ee(this,$i).state===Fs.PAUSED}set pause(e){ee(this,$i).pausedByUser=e}get pixelRatio(){return window.devicePixelRatio??1}resize(){let e=300,t=150;const n=this.renderer.domElement;let i=this.resizeToElement,r=ee(this,so);if(this.resizeToAttributeEl.hasAttribute("resize-to")){const m=this.resizeToAttributeEl.getAttribute("resize-to").trim();if(m.match(/^:?(fullscreen|window)$/)){e=window.innerWidth,t=window.innerHeight,i=void 0;let _=ee(this,io);_||(_=la.installRule(gi.CssRulesPrefixFullscreen,"position:fixed;top:0;left:0;",this.styleSheetRoot),Me(this,io,_)),r?r=!1:(n.classList.add(_),Me(this,so,!0))}else m==="self"?i=this.resizeToElement??n:m&&(i=document.querySelector(m)??this.resizeToElement??n)}if(r&&(ee(this,io)&&n.classList.remove(ee(this,io)),Me(this,so,!1)),this.resizeToCallback){const m=this.resizeToCallback(this);m&&(e=m[0],t=m[1])}else if(i){const m=W2(i);e=m.width,t=m.height}let o=e,a=t;const c=getComputedStyle(n,null),l=$2(c),u=ES(c),h=MS(c);l&&n!==i?(e-=u,t-=h,o-=u,a-=h):!l&&n===i&&(o+=u,a+=h),e<0&&(e=0),t<0&&(t=0),o<0&&(o=0),a<0&&(a=0),e>gi.MaxResolution&&(e=gi.MaxResolution,Z_(e,t)),t>gi.MaxResolution&&(t=gi.MaxResolution,Z_(e,t));const{pixelRatio:d}=this,f=`${e}|${o}x${t}|${a}x${d}`;f!==ee(this,xa)&&(Me(this,xa,f),this.width=e,this.height=t,this.renderer.setPixelRatio(d),this.renderer.setSize(e,t,!1),n.style.width=`${o}px`,n.style.height=`${a}px`,this.frameNo>0&&ee(this,Xi).call(this,"resize"))}renderFrame(e=window.performance.now()){ee(this,Wi).update(e/1e3),this.resize(),this.frameNo===0&&ee(this,Xi).call(this,"resize"),ee(this,Xi).call(this,"frame"),++this.frameNo}async start(e){return typeof e=="function"&&await e(this.getEventArgs()),ee(this,$i).pausedByUser=!1,ee(this,$i).start(),this}stop(){ee(this,$i).pausedByUser=!0}dispose(){var e;this.stop(),Di(this,"dispose"),Df(this),(e=this.renderer)==null||e.dispose(),delete this.renderer}getEventArgs(){return{display:this,renderer:this.renderer,width:this.width,height:this.height,now:this.now,deltaTime:this.deltaTime,frameNo:this.frameNo}}};Wi=new WeakMap,$i=new WeakMap,no=new WeakMap,xa=new WeakMap,io=new WeakMap,so=new WeakMap,Xi=new WeakMap,gi.MaxResolution=8192,gi.CssRulesPrefixContainer="twopoint5d-container",gi.CssRulesPrefixDisplay="twopoint5d-canvas",gi.CssRulesPrefixFullscreen="twopoint5d-canvas--fullscreen";let ih=gi;class Bc{constructor(e,t){if(e==="xy|bottom-left")this.plane=new ei(new U(0,0,1)),this.up=(t==null?void 0:t.clone())??new U(0,1,0);else if(e==="xy|top-left")this.plane=new ei(new U(0,0,-1)),this.up=(t==null?void 0:t.clone())??new U(0,-1,0);else if(e==="xz|top-left")this.plane=new ei(new U(0,1,0)),this.up=(t==null?void 0:t.clone())??new U(0,0,-1);else if(e==="xz|bottom-left")this.plane=new ei(new U(0,-1,0)),this.up=(t==null?void 0:t.clone())??new U(0,0,1);else{if(this.plane=e.clone(),t==null)throw new Error("up is mandatory for a custom projection plane");this.up=t.clone()}}static get(e){return e instanceof Bc?e:new Bc(e)}clone(){return new Bc(this.plane.clone(),this.up.clone())}equals(e){return e===this?!0:e==null?!1:this.plane.equals(e.plane)&&this.up.equals(e.up)}applyRotation(e){e.applyQuaternion(new Ar().setFromRotationMatrix(new ut().lookAt(this.getPointByDistance(1),this.getPointByDistance(0),this.up)))}getPointByDistance(e,t){return this.getOrigin(t).add(this.plane.normal.clone().multiplyScalar(e))}getOrigin(e){const{normal:t,constant:n}=this.plane;return e=e?e.copy(t):t.clone(),e.multiplyScalar(-n)}getForward(e){return this.getPointByDistance(1,e).negate()}getRight(e){return this.getForward(e).cross(this.up)}getPoint(e,t,n){return n=this.getOrigin(n),n.add(this.getRight().setLength(e)),n.add(this.up.clone().setLength(t)),n}}function X2(s,e,t=new Ee){if("pixelZoom"in e)t.copy(s).divideScalar(e.pixelZoom);else if(e.fit==="fill")t.copy(s);else if(e.fit==="contain"||e.fit==="cover"){if("width"in e&&e.width!==0&&(!("height"in e)||e.height===0))t.width=e.width,t.height=s.height*(e.width/s.width);else if((!("width"in e)||e.width===0)&&"height"in e&&e.height!==0)t.width=s.width*(e.height/s.height),t.height=e.height;else if("width"in e&&e.width!==0&&"height"in e&&e.height!==0){const n=s.width/s.height,i=e.width/e.height,r=e.fit==="contain";r&&n>i||!r&&n<i?(t.width=s.width*(e.height/s.height),t.height=e.height):r&&n<i||!r&&n>i?(t.width=e.width,t.height=s.height*(e.width/s.width)):t.set(e.width,e.height)}"minPixelZoom"in e&&s.width/t.width<e.minPixelZoom?t.copy(s).divideScalar(e.minPixelZoom):"maxPixelZoom"in e&&s.width/t.width>e.maxPixelZoom&&t.copy(s).divideScalar(e.maxPixelZoom)}return t}class q2{constructor(){this.isPass=!0,this.enabled=!0,this.needsSwap=!0,this.clear=!1,this.renderToScreen=!1}setSize(){}render(){console.error("THREE.Pass: .render() must be implemented in derived pass.")}dispose(){}}new Ml(-1,1,1,-1,0,1);class Y2 extends Qi{constructor(){super(),this.setAttribute("position",new oi([-1,3,0,-1,-1,0,3,-1,0],3)),this.setAttribute("uv",new oi([0,2,0,0,2,0],2))}}new Y2;class j2 extends q2{constructor(e,t,n=null,i=null,r=null){super(),this.scene=e,this.camera=t,this.overrideMaterial=n,this.clearColor=i,this.clearAlpha=r,this.clear=!0,this.clearDepth=!1,this.needsSwap=!1,this._oldClearColor=new De}render(e,t,n){const i=e.autoClear;e.autoClear=!1;let r,o;this.overrideMaterial!==null&&(o=this.scene.overrideMaterial,this.scene.overrideMaterial=this.overrideMaterial),this.clearColor!==null&&(e.getClearColor(this._oldClearColor),e.setClearColor(this.clearColor,e.getClearAlpha())),this.clearAlpha!==null&&(r=e.getClearAlpha(),e.setClearAlpha(this.clearAlpha)),this.clearDepth==!0&&e.clearDepth(),e.setRenderTarget(this.renderToScreen?null:n),this.clear===!0&&e.clear(e.autoClearColor,e.autoClearDepth,e.autoClearStencil),e.render(this.scene,this.camera),this.clearColor!==null&&e.setClearColor(this._oldClearColor),this.clearAlpha!==null&&e.setClearAlpha(r),this.overrideMaterial!==null&&(this.scene.overrideMaterial=o),e.autoClear=i}}const K2="stageResize",Z2="stageRenderFrame",Q2="stageAfterCameraChanged",Q_="firstFrame";var mr,gr,ro,oo,ya,va,gl,Ta,Sa,ba,Ma,_r,Vs;class J2{constructor(e,t){nt(this,mr);nt(this,gr);nt(this,ro);nt(this,oo);nt(this,ya);nt(this,va);nt(this,gl);nt(this,Ta);nt(this,Sa);nt(this,ba);nt(this,Ma);nt(this,_r);nt(this,Vs);this.autoClear=!0,this.needsUpdate=!1,Me(this,mr,0),Me(this,gr,0),Me(this,ro,0),Me(this,oo,0),Me(this,Ta,n=>{const i=this.camera;n(),i!==this.camera&&Di(this,Q2,...[this,i])}),Me(this,Sa,(n,i)=>{this.needsUpdate=!1,this.projection.updateViewRect(n,i);const[r,o]=this.projection.getViewRect(),a=ee(this,ro),c=ee(this,oo);Me(this,ro,r),Me(this,oo,o),this.camera!=null?this.projection.updateCamera(this.camera):ee(this,Ta).call(this,()=>{Me(this,va,this.projection.createCamera())}),(a!==r||c!==o)&&Di(this,K2,{stage:this,width:r,height:o})}),Me(this,ba,0),Me(this,Ma,!0),Uf(this),Lf(this,Q_),this.projection=e,this.scene=t??new dp}get name(){return this.scene.name}set name(e){this.scene.name=e}get containerWidth(){return ee(this,mr)}get containerHeight(){return ee(this,gr)}get width(){return ee(this,ro)}get height(){return ee(this,oo)}get projection(){return ee(this,ya)}set projection(e){ee(this,ya)!==e&&(Me(this,ya,e),Me(this,va,void 0),this.update(!0))}get camera(){return ee(this,gl)??ee(this,va)}set camera(e){ee(this,Ta).call(this,()=>void Me(this,gl,e))}resize(e,t){(e!==ee(this,mr)||t!==ee(this,gr))&&(Me(this,mr,e),Me(this,gr,t),this.projection&&ee(this,Sa).call(this,e,t))}update(e=!1){(e||this.needsUpdate)&&this.projection&&ee(this,Sa).call(this,ee(this,mr),ee(this,gr))}renderFrame(e,t,n,i,r){const{scene:o,camera:a}=this;if(o&&a){const c=e.autoClear;r||(e.autoClear=this.autoClear);let l=!1;const u=()=>{l||(l=!0,r?r(o,a,this.autoClear):e.render(o,a))},h={renderer:e,now:t,deltaTime:n,frameNo:i,renderFrame:u,stage:this,width:this.width,height:this.height};ee(this,Ma)?(Me(this,_r,{...h,scene:this.scene}),Di(this,Q_,ee(this,_r)),Me(this,Ma,!1)):ee(this,_r)!=null&&(Object.assign(ee(this,_r),h),ee(this,_r).scene=this.scene),Di(this,Z2,h),l||u(),e.autoClear=c}else!a&&++Hm(this,ba)._===100&&(Me(this,ba,-1e3),console.warn("Stage2D has no camera and therefore cannot be rendered! normally this only happens if you forget to call the resize() method .."))}getRenderPass(){return ee(this,Vs)==null&&(Me(this,Vs,new j2(this.scene,this.camera)),ee(this,Vs).clear=this.autoClear,ee(this,Vs).clearColor=new De(0),ee(this,Vs).clearAlpha=0),ee(this,Vs)}}mr=new WeakMap,gr=new WeakMap,ro=new WeakMap,oo=new WeakMap,ya=new WeakMap,va=new WeakMap,gl=new WeakMap,Ta=new WeakMap,Sa=new WeakMap,ba=new WeakMap,Ma=new WeakMap,_r=new WeakMap,Vs=new WeakMap;var rs,Ea,Aa,_l,xl,ao,Ra,co;class eB{constructor(e,t){nt(this,rs,new Ee);nt(this,Ea,new Ee);nt(this,Aa);nt(this,_l);nt(this,xl);nt(this,ao);nt(this,Ra);nt(this,co);this.projectionPlane=typeof e=="string"?Bc.get(e):e,this.viewSpecs=t??{}}updateViewRect(e,t){X2(new Ee(e,t),this.viewSpecs,ee(this,rs)),Me(this,Aa,ee(this,rs).height/2),ee(this,Ea).set(e,t).divide(ee(this,rs)),Me(this,_l,this.viewSpecs.near??.1),Me(this,xl,this.viewSpecs.far??1e5),Me(this,ao,this.viewSpecs.distanceToProjectionPlane??300),Me(this,Ra,ee(this,rs).width/ee(this,rs).height),Me(this,co,2*Math.atan(ee(this,Aa)/ee(this,ao))*180/Math.PI)}getViewRect(){return[ee(this,rs).width,ee(this,rs).height,ee(this,Ea).x,ee(this,Ea).y]}createCamera(){const e=new Yn(ee(this,co),ee(this,Ra),ee(this,_l),ee(this,xl));return this.projectionPlane.applyRotation(e),e.position.copy(this.projectionPlane.getPointByDistance(ee(this,ao))),e.updateProjectionMatrix(),e}updateCamera(e){e.fov=ee(this,co),e.aspect=ee(this,Ra),e.updateProjectionMatrix()}getZoom(e){if(e===0)return 1;const t=ee(this,ao)-e;return Math.tan(ee(this,co)/2*Math.PI/180)*t/ee(this,Aa)}}rs=new WeakMap,Ea=new WeakMap,Aa=new WeakMap,_l=new WeakMap,xl=new WeakMap,ao=new WeakMap,Ra=new WeakMap,co=new WeakMap;const J_={type:"change"},Lm={type:"start"},AS={type:"end"},Ru=new Cx,ex=new ei,tB=Math.cos(70*ap.DEG2RAD),_n=new U,Zn=2*Math.PI,Lt={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_PAN:4,TOUCH_DOLLY_PAN:5,TOUCH_DOLLY_ROTATE:6},ef=1e-6;class nB extends OM{constructor(e,t=null){super(e,t),this.state=Lt.NONE,this.enabled=!0,this.target=new U,this.cursor=new U,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minTargetRadius=0,this.maxTargetRadius=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.05,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.keyRotateSpeed=1,this.enablePan=!0,this.panSpeed=1,this.screenSpacePanning=!0,this.keyPanSpeed=7,this.zoomToCursor=!1,this.autoRotate=!1,this.autoRotateSpeed=2,this.keys={LEFT:"ArrowLeft",UP:"ArrowUp",RIGHT:"ArrowRight",BOTTOM:"ArrowDown"},this.mouseButtons={LEFT:ua.ROTATE,MIDDLE:ua.DOLLY,RIGHT:ua.PAN},this.touches={ONE:na.ROTATE,TWO:na.DOLLY_PAN},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this._domElementKeyEvents=null,this._lastPosition=new U,this._lastQuaternion=new Ar,this._lastTargetPosition=new U,this._quat=new Ar().setFromUnitVectors(e.up,new U(0,1,0)),this._quatInverse=this._quat.clone().invert(),this._spherical=new _g,this._sphericalDelta=new _g,this._scale=1,this._panOffset=new U,this._rotateStart=new Ee,this._rotateEnd=new Ee,this._rotateDelta=new Ee,this._panStart=new Ee,this._panEnd=new Ee,this._panDelta=new Ee,this._dollyStart=new Ee,this._dollyEnd=new Ee,this._dollyDelta=new Ee,this._dollyDirection=new U,this._mouse=new Ee,this._performCursorZoom=!1,this._pointers=[],this._pointerPositions={},this._controlActive=!1,this._onPointerMove=sB.bind(this),this._onPointerDown=iB.bind(this),this._onPointerUp=rB.bind(this),this._onContextMenu=dB.bind(this),this._onMouseWheel=cB.bind(this),this._onKeyDown=lB.bind(this),this._onTouchStart=uB.bind(this),this._onTouchMove=hB.bind(this),this._onMouseDown=oB.bind(this),this._onMouseMove=aB.bind(this),this._interceptControlDown=fB.bind(this),this._interceptControlUp=pB.bind(this),this.domElement!==null&&this.connect(),this.update()}connect(){this.domElement.addEventListener("pointerdown",this._onPointerDown),this.domElement.addEventListener("pointercancel",this._onPointerUp),this.domElement.addEventListener("contextmenu",this._onContextMenu),this.domElement.addEventListener("wheel",this._onMouseWheel,{passive:!1}),this.domElement.getRootNode().addEventListener("keydown",this._interceptControlDown,{passive:!0,capture:!0}),this.domElement.style.touchAction="none"}disconnect(){this.domElement.removeEventListener("pointerdown",this._onPointerDown),this.domElement.removeEventListener("pointermove",this._onPointerMove),this.domElement.removeEventListener("pointerup",this._onPointerUp),this.domElement.removeEventListener("pointercancel",this._onPointerUp),this.domElement.removeEventListener("wheel",this._onMouseWheel),this.domElement.removeEventListener("contextmenu",this._onContextMenu),this.stopListenToKeyEvents(),this.domElement.getRootNode().removeEventListener("keydown",this._interceptControlDown,{capture:!0}),this.domElement.style.touchAction="auto"}dispose(){this.disconnect()}getPolarAngle(){return this._spherical.phi}getAzimuthalAngle(){return this._spherical.theta}getDistance(){return this.object.position.distanceTo(this.target)}listenToKeyEvents(e){e.addEventListener("keydown",this._onKeyDown),this._domElementKeyEvents=e}stopListenToKeyEvents(){this._domElementKeyEvents!==null&&(this._domElementKeyEvents.removeEventListener("keydown",this._onKeyDown),this._domElementKeyEvents=null)}saveState(){this.target0.copy(this.target),this.position0.copy(this.object.position),this.zoom0=this.object.zoom}reset(){this.target.copy(this.target0),this.object.position.copy(this.position0),this.object.zoom=this.zoom0,this.object.updateProjectionMatrix(),this.dispatchEvent(J_),this.update(),this.state=Lt.NONE}update(e=null){const t=this.object.position;_n.copy(t).sub(this.target),_n.applyQuaternion(this._quat),this._spherical.setFromVector3(_n),this.autoRotate&&this.state===Lt.NONE&&this._rotateLeft(this._getAutoRotationAngle(e)),this.enableDamping?(this._spherical.theta+=this._sphericalDelta.theta*this.dampingFactor,this._spherical.phi+=this._sphericalDelta.phi*this.dampingFactor):(this._spherical.theta+=this._sphericalDelta.theta,this._spherical.phi+=this._sphericalDelta.phi);let n=this.minAzimuthAngle,i=this.maxAzimuthAngle;isFinite(n)&&isFinite(i)&&(n<-Math.PI?n+=Zn:n>Math.PI&&(n-=Zn),i<-Math.PI?i+=Zn:i>Math.PI&&(i-=Zn),n<=i?this._spherical.theta=Math.max(n,Math.min(i,this._spherical.theta)):this._spherical.theta=this._spherical.theta>(n+i)/2?Math.max(n,this._spherical.theta):Math.min(i,this._spherical.theta)),this._spherical.phi=Math.max(this.minPolarAngle,Math.min(this.maxPolarAngle,this._spherical.phi)),this._spherical.makeSafe(),this.enableDamping===!0?this.target.addScaledVector(this._panOffset,this.dampingFactor):this.target.add(this._panOffset),this.target.sub(this.cursor),this.target.clampLength(this.minTargetRadius,this.maxTargetRadius),this.target.add(this.cursor);let r=!1;if(this.zoomToCursor&&this._performCursorZoom||this.object.isOrthographicCamera)this._spherical.radius=this._clampDistance(this._spherical.radius);else{const o=this._spherical.radius;this._spherical.radius=this._clampDistance(this._spherical.radius*this._scale),r=o!=this._spherical.radius}if(_n.setFromSpherical(this._spherical),_n.applyQuaternion(this._quatInverse),t.copy(this.target).add(_n),this.object.lookAt(this.target),this.enableDamping===!0?(this._sphericalDelta.theta*=1-this.dampingFactor,this._sphericalDelta.phi*=1-this.dampingFactor,this._panOffset.multiplyScalar(1-this.dampingFactor)):(this._sphericalDelta.set(0,0,0),this._panOffset.set(0,0,0)),this.zoomToCursor&&this._performCursorZoom){let o=null;if(this.object.isPerspectiveCamera){const a=_n.length();o=this._clampDistance(a*this._scale);const c=a-o;this.object.position.addScaledVector(this._dollyDirection,c),this.object.updateMatrixWorld(),r=!!c}else if(this.object.isOrthographicCamera){const a=new U(this._mouse.x,this._mouse.y,0);a.unproject(this.object);const c=this.object.zoom;this.object.zoom=Math.max(this.minZoom,Math.min(this.maxZoom,this.object.zoom/this._scale)),this.object.updateProjectionMatrix(),r=c!==this.object.zoom;const l=new U(this._mouse.x,this._mouse.y,0);l.unproject(this.object),this.object.position.sub(l).add(a),this.object.updateMatrixWorld(),o=_n.length()}else console.warn("WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled."),this.zoomToCursor=!1;o!==null&&(this.screenSpacePanning?this.target.set(0,0,-1).transformDirection(this.object.matrix).multiplyScalar(o).add(this.object.position):(Ru.origin.copy(this.object.position),Ru.direction.set(0,0,-1).transformDirection(this.object.matrix),Math.abs(this.object.up.dot(Ru.direction))<tB?this.object.lookAt(this.target):(ex.setFromNormalAndCoplanarPoint(this.object.up,this.target),Ru.intersectPlane(ex,this.target))))}else if(this.object.isOrthographicCamera){const o=this.object.zoom;this.object.zoom=Math.max(this.minZoom,Math.min(this.maxZoom,this.object.zoom/this._scale)),o!==this.object.zoom&&(this.object.updateProjectionMatrix(),r=!0)}return this._scale=1,this._performCursorZoom=!1,r||this._lastPosition.distanceToSquared(this.object.position)>ef||8*(1-this._lastQuaternion.dot(this.object.quaternion))>ef||this._lastTargetPosition.distanceToSquared(this.target)>ef?(this.dispatchEvent(J_),this._lastPosition.copy(this.object.position),this._lastQuaternion.copy(this.object.quaternion),this._lastTargetPosition.copy(this.target),!0):!1}_getAutoRotationAngle(e){return e!==null?Zn/60*this.autoRotateSpeed*e:Zn/60/60*this.autoRotateSpeed}_getZoomScale(e){const t=Math.abs(e*.01);return Math.pow(.95,this.zoomSpeed*t)}_rotateLeft(e){this._sphericalDelta.theta-=e}_rotateUp(e){this._sphericalDelta.phi-=e}_panLeft(e,t){_n.setFromMatrixColumn(t,0),_n.multiplyScalar(-e),this._panOffset.add(_n)}_panUp(e,t){this.screenSpacePanning===!0?_n.setFromMatrixColumn(t,1):(_n.setFromMatrixColumn(t,0),_n.crossVectors(this.object.up,_n)),_n.multiplyScalar(e),this._panOffset.add(_n)}_pan(e,t){const n=this.domElement;if(this.object.isPerspectiveCamera){const i=this.object.position;_n.copy(i).sub(this.target);let r=_n.length();r*=Math.tan(this.object.fov/2*Math.PI/180),this._panLeft(2*e*r/n.clientHeight,this.object.matrix),this._panUp(2*t*r/n.clientHeight,this.object.matrix)}else this.object.isOrthographicCamera?(this._panLeft(e*(this.object.right-this.object.left)/this.object.zoom/n.clientWidth,this.object.matrix),this._panUp(t*(this.object.top-this.object.bottom)/this.object.zoom/n.clientHeight,this.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),this.enablePan=!1)}_dollyOut(e){this.object.isPerspectiveCamera||this.object.isOrthographicCamera?this._scale/=e:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),this.enableZoom=!1)}_dollyIn(e){this.object.isPerspectiveCamera||this.object.isOrthographicCamera?this._scale*=e:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),this.enableZoom=!1)}_updateZoomParameters(e,t){if(!this.zoomToCursor)return;this._performCursorZoom=!0;const n=this.domElement.getBoundingClientRect(),i=e-n.left,r=t-n.top,o=n.width,a=n.height;this._mouse.x=i/o*2-1,this._mouse.y=-(r/a)*2+1,this._dollyDirection.set(this._mouse.x,this._mouse.y,1).unproject(this.object).sub(this.object.position).normalize()}_clampDistance(e){return Math.max(this.minDistance,Math.min(this.maxDistance,e))}_handleMouseDownRotate(e){this._rotateStart.set(e.clientX,e.clientY)}_handleMouseDownDolly(e){this._updateZoomParameters(e.clientX,e.clientX),this._dollyStart.set(e.clientX,e.clientY)}_handleMouseDownPan(e){this._panStart.set(e.clientX,e.clientY)}_handleMouseMoveRotate(e){this._rotateEnd.set(e.clientX,e.clientY),this._rotateDelta.subVectors(this._rotateEnd,this._rotateStart).multiplyScalar(this.rotateSpeed);const t=this.domElement;this._rotateLeft(Zn*this._rotateDelta.x/t.clientHeight),this._rotateUp(Zn*this._rotateDelta.y/t.clientHeight),this._rotateStart.copy(this._rotateEnd),this.update()}_handleMouseMoveDolly(e){this._dollyEnd.set(e.clientX,e.clientY),this._dollyDelta.subVectors(this._dollyEnd,this._dollyStart),this._dollyDelta.y>0?this._dollyOut(this._getZoomScale(this._dollyDelta.y)):this._dollyDelta.y<0&&this._dollyIn(this._getZoomScale(this._dollyDelta.y)),this._dollyStart.copy(this._dollyEnd),this.update()}_handleMouseMovePan(e){this._panEnd.set(e.clientX,e.clientY),this._panDelta.subVectors(this._panEnd,this._panStart).multiplyScalar(this.panSpeed),this._pan(this._panDelta.x,this._panDelta.y),this._panStart.copy(this._panEnd),this.update()}_handleMouseWheel(e){this._updateZoomParameters(e.clientX,e.clientY),e.deltaY<0?this._dollyIn(this._getZoomScale(e.deltaY)):e.deltaY>0&&this._dollyOut(this._getZoomScale(e.deltaY)),this.update()}_handleKeyDown(e){let t=!1;switch(e.code){case this.keys.UP:e.ctrlKey||e.metaKey||e.shiftKey?this.enableRotate&&this._rotateUp(Zn*this.keyRotateSpeed/this.domElement.clientHeight):this.enablePan&&this._pan(0,this.keyPanSpeed),t=!0;break;case this.keys.BOTTOM:e.ctrlKey||e.metaKey||e.shiftKey?this.enableRotate&&this._rotateUp(-Zn*this.keyRotateSpeed/this.domElement.clientHeight):this.enablePan&&this._pan(0,-this.keyPanSpeed),t=!0;break;case this.keys.LEFT:e.ctrlKey||e.metaKey||e.shiftKey?this.enableRotate&&this._rotateLeft(Zn*this.keyRotateSpeed/this.domElement.clientHeight):this.enablePan&&this._pan(this.keyPanSpeed,0),t=!0;break;case this.keys.RIGHT:e.ctrlKey||e.metaKey||e.shiftKey?this.enableRotate&&this._rotateLeft(-Zn*this.keyRotateSpeed/this.domElement.clientHeight):this.enablePan&&this._pan(-this.keyPanSpeed,0),t=!0;break}t&&(e.preventDefault(),this.update())}_handleTouchStartRotate(e){if(this._pointers.length===1)this._rotateStart.set(e.pageX,e.pageY);else{const t=this._getSecondPointerPosition(e),n=.5*(e.pageX+t.x),i=.5*(e.pageY+t.y);this._rotateStart.set(n,i)}}_handleTouchStartPan(e){if(this._pointers.length===1)this._panStart.set(e.pageX,e.pageY);else{const t=this._getSecondPointerPosition(e),n=.5*(e.pageX+t.x),i=.5*(e.pageY+t.y);this._panStart.set(n,i)}}_handleTouchStartDolly(e){const t=this._getSecondPointerPosition(e),n=e.pageX-t.x,i=e.pageY-t.y,r=Math.sqrt(n*n+i*i);this._dollyStart.set(0,r)}_handleTouchStartDollyPan(e){this.enableZoom&&this._handleTouchStartDolly(e),this.enablePan&&this._handleTouchStartPan(e)}_handleTouchStartDollyRotate(e){this.enableZoom&&this._handleTouchStartDolly(e),this.enableRotate&&this._handleTouchStartRotate(e)}_handleTouchMoveRotate(e){if(this._pointers.length==1)this._rotateEnd.set(e.pageX,e.pageY);else{const n=this._getSecondPointerPosition(e),i=.5*(e.pageX+n.x),r=.5*(e.pageY+n.y);this._rotateEnd.set(i,r)}this._rotateDelta.subVectors(this._rotateEnd,this._rotateStart).multiplyScalar(this.rotateSpeed);const t=this.domElement;this._rotateLeft(Zn*this._rotateDelta.x/t.clientHeight),this._rotateUp(Zn*this._rotateDelta.y/t.clientHeight),this._rotateStart.copy(this._rotateEnd)}_handleTouchMovePan(e){if(this._pointers.length===1)this._panEnd.set(e.pageX,e.pageY);else{const t=this._getSecondPointerPosition(e),n=.5*(e.pageX+t.x),i=.5*(e.pageY+t.y);this._panEnd.set(n,i)}this._panDelta.subVectors(this._panEnd,this._panStart).multiplyScalar(this.panSpeed),this._pan(this._panDelta.x,this._panDelta.y),this._panStart.copy(this._panEnd)}_handleTouchMoveDolly(e){const t=this._getSecondPointerPosition(e),n=e.pageX-t.x,i=e.pageY-t.y,r=Math.sqrt(n*n+i*i);this._dollyEnd.set(0,r),this._dollyDelta.set(0,Math.pow(this._dollyEnd.y/this._dollyStart.y,this.zoomSpeed)),this._dollyOut(this._dollyDelta.y),this._dollyStart.copy(this._dollyEnd);const o=(e.pageX+t.x)*.5,a=(e.pageY+t.y)*.5;this._updateZoomParameters(o,a)}_handleTouchMoveDollyPan(e){this.enableZoom&&this._handleTouchMoveDolly(e),this.enablePan&&this._handleTouchMovePan(e)}_handleTouchMoveDollyRotate(e){this.enableZoom&&this._handleTouchMoveDolly(e),this.enableRotate&&this._handleTouchMoveRotate(e)}_addPointer(e){this._pointers.push(e.pointerId)}_removePointer(e){delete this._pointerPositions[e.pointerId];for(let t=0;t<this._pointers.length;t++)if(this._pointers[t]==e.pointerId){this._pointers.splice(t,1);return}}_isTrackingPointer(e){for(let t=0;t<this._pointers.length;t++)if(this._pointers[t]==e.pointerId)return!0;return!1}_trackPointer(e){let t=this._pointerPositions[e.pointerId];t===void 0&&(t=new Ee,this._pointerPositions[e.pointerId]=t),t.set(e.pageX,e.pageY)}_getSecondPointerPosition(e){const t=e.pointerId===this._pointers[0]?this._pointers[1]:this._pointers[0];return this._pointerPositions[t]}_customWheelEvent(e){const t=e.deltaMode,n={clientX:e.clientX,clientY:e.clientY,deltaY:e.deltaY};switch(t){case 1:n.deltaY*=16;break;case 2:n.deltaY*=100;break}return e.ctrlKey&&!this._controlActive&&(n.deltaY*=10),n}}function iB(s){this.enabled!==!1&&(this._pointers.length===0&&(this.domElement.setPointerCapture(s.pointerId),this.domElement.addEventListener("pointermove",this._onPointerMove),this.domElement.addEventListener("pointerup",this._onPointerUp)),!this._isTrackingPointer(s)&&(this._addPointer(s),s.pointerType==="touch"?this._onTouchStart(s):this._onMouseDown(s)))}function sB(s){this.enabled!==!1&&(s.pointerType==="touch"?this._onTouchMove(s):this._onMouseMove(s))}function rB(s){switch(this._removePointer(s),this._pointers.length){case 0:this.domElement.releasePointerCapture(s.pointerId),this.domElement.removeEventListener("pointermove",this._onPointerMove),this.domElement.removeEventListener("pointerup",this._onPointerUp),this.dispatchEvent(AS),this.state=Lt.NONE;break;case 1:const e=this._pointers[0],t=this._pointerPositions[e];this._onTouchStart({pointerId:e,pageX:t.x,pageY:t.y});break}}function oB(s){let e;switch(s.button){case 0:e=this.mouseButtons.LEFT;break;case 1:e=this.mouseButtons.MIDDLE;break;case 2:e=this.mouseButtons.RIGHT;break;default:e=-1}switch(e){case ua.DOLLY:if(this.enableZoom===!1)return;this._handleMouseDownDolly(s),this.state=Lt.DOLLY;break;case ua.ROTATE:if(s.ctrlKey||s.metaKey||s.shiftKey){if(this.enablePan===!1)return;this._handleMouseDownPan(s),this.state=Lt.PAN}else{if(this.enableRotate===!1)return;this._handleMouseDownRotate(s),this.state=Lt.ROTATE}break;case ua.PAN:if(s.ctrlKey||s.metaKey||s.shiftKey){if(this.enableRotate===!1)return;this._handleMouseDownRotate(s),this.state=Lt.ROTATE}else{if(this.enablePan===!1)return;this._handleMouseDownPan(s),this.state=Lt.PAN}break;default:this.state=Lt.NONE}this.state!==Lt.NONE&&this.dispatchEvent(Lm)}function aB(s){switch(this.state){case Lt.ROTATE:if(this.enableRotate===!1)return;this._handleMouseMoveRotate(s);break;case Lt.DOLLY:if(this.enableZoom===!1)return;this._handleMouseMoveDolly(s);break;case Lt.PAN:if(this.enablePan===!1)return;this._handleMouseMovePan(s);break}}function cB(s){this.enabled===!1||this.enableZoom===!1||this.state!==Lt.NONE||(s.preventDefault(),this.dispatchEvent(Lm),this._handleMouseWheel(this._customWheelEvent(s)),this.dispatchEvent(AS))}function lB(s){this.enabled!==!1&&this._handleKeyDown(s)}function uB(s){switch(this._trackPointer(s),this._pointers.length){case 1:switch(this.touches.ONE){case na.ROTATE:if(this.enableRotate===!1)return;this._handleTouchStartRotate(s),this.state=Lt.TOUCH_ROTATE;break;case na.PAN:if(this.enablePan===!1)return;this._handleTouchStartPan(s),this.state=Lt.TOUCH_PAN;break;default:this.state=Lt.NONE}break;case 2:switch(this.touches.TWO){case na.DOLLY_PAN:if(this.enableZoom===!1&&this.enablePan===!1)return;this._handleTouchStartDollyPan(s),this.state=Lt.TOUCH_DOLLY_PAN;break;case na.DOLLY_ROTATE:if(this.enableZoom===!1&&this.enableRotate===!1)return;this._handleTouchStartDollyRotate(s),this.state=Lt.TOUCH_DOLLY_ROTATE;break;default:this.state=Lt.NONE}break;default:this.state=Lt.NONE}this.state!==Lt.NONE&&this.dispatchEvent(Lm)}function hB(s){switch(this._trackPointer(s),this.state){case Lt.TOUCH_ROTATE:if(this.enableRotate===!1)return;this._handleTouchMoveRotate(s),this.update();break;case Lt.TOUCH_PAN:if(this.enablePan===!1)return;this._handleTouchMovePan(s),this.update();break;case Lt.TOUCH_DOLLY_PAN:if(this.enableZoom===!1&&this.enablePan===!1)return;this._handleTouchMoveDollyPan(s),this.update();break;case Lt.TOUCH_DOLLY_ROTATE:if(this.enableZoom===!1&&this.enableRotate===!1)return;this._handleTouchMoveDollyRotate(s),this.update();break;default:this.state=Lt.NONE}}function dB(s){this.enabled!==!1&&s.preventDefault()}function fB(s){s.key==="Control"&&(this._controlActive=!0,this.domElement.getRootNode().addEventListener("keyup",this._interceptControlUp,{passive:!0,capture:!0}))}function pB(s){s.key==="Control"&&(this._controlActive=!1,this.domElement.getRootNode().removeEventListener("keyup",this._interceptControlUp,{passive:!0,capture:!0}))}class mB extends ih{constructor(...t){super(t[0],{...t[1]??{},webgpu:!0});It(this,"projection");It(this,"stage");It(this,"controls");this.projection=new eB("xy|bottom-left",{width:100,height:100,fit:"contain",distanceToProjectionPlane:100,near:.1,far:1e3}),this.stage=new J2(this.projection),this.stage.name="App",sh(this,"init",()=>{this.renderer.toneMapping=Yf,this.renderer.setClearColor(new De(0),0),this.controls=new nB(this.camera,this.renderer.domElement),this.controls.enableDamping=!0,xo(this,"resize",({stage:n,width:i,height:r})=>{n.resize(i,r)}),xo(this,"frame",lx.Low,({stage:n,renderer:i,now:r,deltaTime:o,frameNo:a})=>{var c;(c=this.controls)==null||c.update(),n.renderFrame(i,r,o,a)})})}get scene(){return this.stage.scene}get camera(){return this.stage.camera}getEventArgs(){return{...super.getEventArgs(),stage:this.stage,scene:this.scene,camera:this.camera}}}/**
 * @license
 * Copyright 2010-2024 Three.js Authors
 * SPDX-License-Identifier: MIT
 */x.BRDF_GGX;x.BRDF_Lambert;x.BasicShadowFilter;x.Break;x.Continue;x.DFGApprox;x.D_GGX;x.Discard;x.EPSILON;x.F_Schlick;const gB=x.Fn;x.INFINITY;x.If;x.Loop;x.NodeShaderStage;x.NodeType;x.NodeUpdateType;x.NodeAccess;x.PCFShadowFilter;x.PCFSoftShadowFilter;x.PI;x.PI2;x.Return;x.Schlick_to_F0;x.ScriptableNodeResources;x.ShaderNode;x.TBNViewMatrix;x.VSMShadowFilter;x.V_GGX_SmithCorrelated;const _B=x.abs;x.acesFilmicToneMapping;x.acos;x.add;x.addNodeElement;x.agxToneMapping;x.all;x.alphaT;x.and;x.anisotropy;x.anisotropyB;x.anisotropyT;x.any;x.append;x.arrayBuffer;x.asin;x.assign;x.atan;x.atan2;x.atomicAdd;x.atomicAnd;x.atomicFunc;x.atomicMax;x.atomicMin;x.atomicOr;x.atomicStore;x.atomicSub;x.atomicXor;x.attenuationColor;x.attenuationDistance;x.attribute;x.attributeArray;x.backgroundBlurriness;x.backgroundIntensity;x.backgroundRotation;x.batch;x.billboarding;x.bitAnd;x.bitNot;x.bitOr;x.bitXor;x.bitangentGeometry;x.bitangentLocal;x.bitangentView;x.bitangentWorld;x.bitcast;x.blendBurn;x.blendColor;x.blendDodge;x.blendOverlay;x.blendScreen;x.blur;x.bool;x.buffer;x.bufferAttribute;x.bumpMap;x.burn;x.bvec2;x.bvec3;x.bvec4;x.bypass;x.cache;x.call;x.cameraFar;x.cameraNear;x.cameraNormalMatrix;x.cameraPosition;x.cameraProjectionMatrix;x.cameraProjectionMatrixInverse;x.cameraViewMatrix;x.cameraWorldMatrix;x.cbrt;x.cdl;x.ceil;x.checker;x.cineonToneMapping;x.clamp;x.clearcoat;x.clearcoatRoughness;x.code;const xB=x.color;x.colorSpaceToWorking;x.colorToDirection;x.compute;x.cond;x.context;x.convert;x.convertColorSpace;x.convertToTexture;const yB=x.cos;x.cross;x.cubeTexture;x.dFdx;x.dFdy;x.dashSize;x.defaultBuildStages;x.defaultShaderStages;x.defined;x.degrees;x.deltaTime;x.densityFog;x.densityFogFactor;x.depth;x.depthPass;x.difference;x.diffuseColor;x.directPointLight;x.directionToColor;x.dispersion;x.distance;x.div;x.dodge;x.dot;x.drawIndex;x.dynamicBufferAttribute;x.element;x.emissive;x.equal;x.equals;x.equirectUV;const vB=x.exp;x.exp2;x.expression;x.faceDirection;x.faceForward;x.faceforward;const tx=x.float;x.floor;x.fog;const TB=x.fract;x.frameGroup;x.frameId;x.frontFacing;x.fwidth;x.gain;x.gapSize;x.getConstNodeType;x.getCurrentStack;x.getDirection;x.getDistanceAttenuation;x.getGeometryRoughness;x.getNormalFromDepth;x.getParallaxCorrectNormal;x.getRoughness;x.getScreenPosition;x.getShIrradianceAt;x.getTextureIndex;x.getViewPosition;x.glsl;x.glslFn;x.grayscale;x.greaterThan;x.greaterThanEqual;x.hash;x.highpModelNormalViewMatrix;x.highpModelViewMatrix;x.hue;x.instance;x.instanceIndex;x.instancedArray;x.instancedBufferAttribute;x.instancedDynamicBufferAttribute;x.instancedMesh;x.int;x.inverseSqrt;x.inversesqrt;x.invocationLocalIndex;x.invocationSubgroupIndex;x.ior;x.iridescence;x.iridescenceIOR;x.iridescenceThickness;x.ivec2;x.ivec3;x.ivec4;x.js;x.label;const wu=x.length;x.lengthSq;x.lessThan;x.lessThanEqual;x.lightPosition;x.lightTargetDirection;x.lightTargetPosition;x.lightViewPosition;x.lightingContext;x.lights;x.linearDepth;x.linearToneMapping;x.localId;x.log;x.log2;x.logarithmicDepthToViewZ;x.loop;x.luminance;x.mediumpModelViewMatrix;x.mat2;x.mat3;x.mat4;x.matcapUV;x.materialAO;x.materialAlphaTest;x.materialAnisotropy;x.materialAnisotropyVector;x.materialAttenuationColor;x.materialAttenuationDistance;x.materialClearcoat;x.materialClearcoatNormal;x.materialClearcoatRoughness;x.materialColor;x.materialDispersion;x.materialEmissive;x.materialIOR;x.materialIridescence;x.materialIridescenceIOR;x.materialIridescenceThickness;x.materialLightMap;x.materialLineDashOffset;x.materialLineDashSize;x.materialLineGapSize;x.materialLineScale;x.materialLineWidth;x.materialMetalness;x.materialNormal;x.materialOpacity;x.materialPointWidth;x.materialReference;x.materialReflectivity;x.materialRefractionRatio;x.materialRotation;x.materialRoughness;x.materialSheen;x.materialSheenRoughness;x.materialShininess;x.materialSpecular;x.materialSpecularColor;x.materialSpecularIntensity;x.materialSpecularStrength;x.materialThickness;x.materialTransmission;x.max;x.maxMipLevel;x.metalness;x.min;x.mix;x.mixElement;x.mod;x.modInt;x.modelDirection;x.modelNormalMatrix;x.modelPosition;x.modelScale;x.modelViewMatrix;x.modelViewPosition;x.modelViewProjection;x.modelWorldMatrix;x.modelWorldMatrixInverse;x.morphReference;x.mrt;x.mul;x.mx_aastep;x.mx_cell_noise_float;x.mx_contrast;x.mx_fractal_noise_float;x.mx_fractal_noise_vec2;x.mx_fractal_noise_vec3;x.mx_fractal_noise_vec4;x.mx_hsvtorgb;x.mx_noise_float;x.mx_noise_vec3;x.mx_noise_vec4;x.mx_ramplr;x.mx_ramptb;x.mx_rgbtohsv;x.mx_safepower;x.mx_splitlr;x.mx_splittb;x.mx_srgb_texture_to_lin_rec709;x.mx_transform_uv;x.mx_worley_noise_float;x.mx_worley_noise_vec2;x.mx_worley_noise_vec3;x.negate;x.neutralToneMapping;x.nodeArray;x.nodeImmutable;x.nodeObject;x.nodeObjects;x.nodeProxy;x.normalFlat;x.normalGeometry;x.normalLocal;x.normalMap;x.normalView;x.normalWorld;x.normalize;x.not;x.notEqual;x.numWorkgroups;x.objectDirection;x.objectGroup;x.objectPosition;x.objectScale;x.objectViewPosition;x.objectWorldMatrix;x.oneMinus;x.or;x.orthographicDepthToViewZ;x.oscSawtooth;x.oscSine;x.oscSquare;x.oscTriangle;x.output;x.outputStruct;x.overlay;x.overloadingFn;x.parabola;x.parallaxDirection;x.parallaxUV;x.parameter;x.pass;x.passTexture;x.pcurve;x.perspectiveDepthToViewZ;x.pmremTexture;x.pointUV;x.pointWidth;x.positionGeometry;x.positionLocal;x.positionPrevious;x.positionView;x.positionViewDirection;x.positionWorld;x.positionWorldDirection;x.posterize;const SB=x.pow;x.pow2;x.pow3;x.pow4;x.property;x.radians;x.rand;x.range;x.rangeFog;x.rangeFogFactor;x.reciprocal;x.reference;x.referenceBuffer;x.reflect;x.reflectVector;x.reflectView;x.reflector;x.refract;x.refractVector;x.refractView;x.reinhardToneMapping;x.remainder;x.remap;x.remapClamp;x.renderGroup;x.renderOutput;x.rendererReference;x.rotate;x.rotateUV;x.roughness;x.round;x.rtt;x.sRGBTransferEOTF;x.sRGBTransferOETF;x.sampler;x.saturate;x.saturation;x.screen;x.screenCoordinate;x.screenSize;const bB=x.screenUV;x.scriptable;x.scriptableValue;x.select;x.setCurrentStack;x.shaderStages;x.shadow;x.shadowPositionWorld;x.sharedUniformGroup;x.sheen;x.sheenRoughness;x.shiftLeft;x.shiftRight;x.shininess;x.sign;const MB=x.sin;x.sinc;x.skinning;x.skinningReference;x.smoothstep;x.smoothstepElement;x.specularColor;x.specularF90;x.spherizeUV;x.split;x.spritesheetUV;x.sqrt;x.stack;x.step;x.storage;x.storageBarrier;x.storageObject;x.storageTexture;x.string;x.sub;x.subgroupIndex;x.subgroupSize;x.tan;x.tangentGeometry;x.tangentLocal;x.tangentView;x.tangentWorld;x.temp;x.texture;x.texture3D;x.textureBarrier;x.textureBicubic;x.textureCubeUV;x.textureLoad;x.textureSize;x.textureStore;x.thickness;x.threshold;x.time;x.timerDelta;x.timerGlobal;x.timerLocal;x.toOutputColorSpace;x.toWorkingColorSpace;x.toneMapping;x.toneMappingExposure;x.toonOutlinePass;x.transformDirection;x.transformNormal;x.transformNormalToView;x.transformedBentNormalView;x.transformedBitangentView;x.transformedBitangentWorld;x.transformedClearcoatNormalView;x.transformedNormalView;x.transformedNormalWorld;x.transformedTangentView;x.transformedTangentWorld;x.transmission;x.transpose;x.tri;x.tri3;x.triNoise3D;x.triplanarTexture;x.triplanarTextures;x.trunc;x.tslFn;x.uint;const Bu=x.uniform;x.uniformArray;x.uniformGroup;x.uniforms;x.userData;const EB=x.uv;x.uvec2;x.uvec3;x.uvec4;x.varying;x.varyingProperty;const nx=x.vec2,Ec=x.vec3,AB=x.vec4;x.vectorComponents;x.velocity;x.vertexColor;x.vertexIndex;x.vibrance;x.viewZToLogarithmicDepth;x.viewZToOrthographicDepth;x.viewZToPerspectiveDepth;x.viewport;x.viewportBottomLeft;x.viewportCoordinate;x.viewportDepthTexture;x.viewportLinearDepth;x.viewportMipTexture;x.viewportResolution;x.viewportSafeUV;x.viewportSharedTexture;x.viewportSize;x.viewportTexture;x.viewportTopLeft;x.viewportUV;x.wgsl;x.wgslFn;x.workgroupArray;x.workgroupBarrier;x.workgroupId;x.workingToColorSpace;x.xor;class RB{constructor(e){It(this,"iResolution");It(this,"iTime");It(this,"iTimeDelta");this.display=e,this.iResolution=Bu(new U(e.width,e.height,1)),xo(e,"resize",({width:t,height:n})=>{this.iResolution.value.set(t,n,1)}),this.iTime=Bu(e.now),this.iTime.onFrameUpdate(()=>{this.iTime.value=e.now}),this.iTimeDelta=Bu(e.deltaTime),this.iTimeDelta.onFrameUpdate(()=>{this.iTimeDelta.value=e.deltaTime})}}class wB extends RB{constructor(t){super(t);It(this,"material",new J0({side:Bn}));It(this,"aspectRatio");It(this,"palette");this.aspectRatio=Bu(t.width/t.height),xo(t,"resize",({width:l,height:u})=>{this.aspectRatio.value=l/u}),this.palette=gB(([l=this.iTime])=>{const u=[[.658,.5,.5],[.228,.5,.5],[1,1,1],[0,.333,.667]],h=Ec(...u[0]),d=Ec(...u[1]),f=Ec(...u[2]),m=Ec(...u[3]),_=6.28318*.5;return h.add(d.mul(yB(f.mul(l).add(m).mul(_))))});let n=Ec(0,0,0);const i=EB().sub(.5);let r=nx(this.aspectRatio.mul(i.x),i.y);const o=nx(r),a=4;for(let l=0;l<a;l++){r=TB(r.mul(1.7)).sub(.5);const u=wu(r).mul(vB(wu(o).mul(-1))),h=this.palette(wu(o).add(this.iTime.mul(.05)).add(tx(l).mul(.3))),d=_B(MB(u.mul(9).add(this.iTime.mul(.575))).div(8)),f=SB(tx(.015).div(d),2);n=n.add(h.mul(f).div(a))}const c=n.mul(wu(bB.xzy));this.material.colorNode=xB(AB(c,1))}}class NB{constructor(e=100){It(this,"geometry");It(this,"mesh");this.geometry=new Pr(e,e,e),this.mesh=new On(this.geometry)}set material(e){this.mesh.material=e}get material(){return this.mesh.material}}const ix=new mB(document.getElementById("demo"));ix.start(({display:s})=>{const e=new NB;xo(s,"resize",({width:n,height:i})=>{const r=n/i;r<1?e.mesh.scale.set(1,i/n,1):e.mesh.scale.set(r,1,1)});const t=new wB(s);e.material=t.material,ix.scene.add(e.mesh),Object.assign(window,{display:s,cube:e,shader:t})});
